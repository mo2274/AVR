
Timer_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000686  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ae  00800060  00000686  0000071a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080010e  0080010e  000007c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000131e  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a2  00000000  00000000  00001c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a35  00000000  00000000  000025dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00003014  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061e  00000000  00000000  000031c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000104e  00000000  00000000  000037e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004834  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 02 	jmp	0x48e	; 0x48e <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e8       	ldi	r30, 0x86	; 134
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 30       	cpi	r26, 0x0E	; 14
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ae e0       	ldi	r26, 0x0E	; 14
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 31       	cpi	r26, 0x12	; 18
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 86 02 	call	0x50c	; 0x50c <main>
  8a:	0c 94 41 03 	jmp	0x682	; 0x682 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Dio_init>:
		break;
	default:
		return ERROR;
	}
	return SUCCESS;
}
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	e0 e6       	ldi	r30, 0x60	; 96
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	6a e0       	ldi	r22, 0x0A	; 10
  9c:	71 e0       	ldi	r23, 0x01	; 1
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	50 e0       	ldi	r21, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	81 11       	cpse	r24, r1
  a6:	2f c0       	rjmp	.+94     	; 0x106 <Dio_init+0x74>
  a8:	c4 81       	ldd	r28, Z+4	; 0x04
  aa:	d5 81       	ldd	r29, Z+5	; 0x05
  ac:	98 81       	ld	r25, Y
  ae:	9a 01       	movw	r18, r20
  b0:	01 80       	ldd	r0, Z+1	; 0x01
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <Dio_init+0x26>
  b4:	22 0f       	add	r18, r18
  b6:	33 1f       	adc	r19, r19
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <Dio_init+0x22>
  bc:	82 2f       	mov	r24, r18
  be:	80 95       	com	r24
  c0:	89 23       	and	r24, r25
  c2:	88 83       	st	Y, r24
  c4:	82 81       	ldd	r24, Z+2	; 0x02
  c6:	81 11       	cpse	r24, r1
  c8:	0d c0       	rjmp	.+26     	; 0xe4 <Dio_init+0x52>
  ca:	c6 81       	ldd	r28, Z+6	; 0x06
  cc:	d7 81       	ldd	r29, Z+7	; 0x07
  ce:	28 81       	ld	r18, Y
  d0:	ca 01       	movw	r24, r20
  d2:	01 80       	ldd	r0, Z+1	; 0x01
  d4:	02 c0       	rjmp	.+4      	; 0xda <Dio_init+0x48>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	0a 94       	dec	r0
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <Dio_init+0x44>
  de:	82 2b       	or	r24, r18
  e0:	88 83       	st	Y, r24
  e2:	2d c0       	rjmp	.+90     	; 0x13e <Dio_init+0xac>
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	91 f5       	brne	.+100    	; 0x14c <Dio_init+0xba>
  e8:	c6 81       	ldd	r28, Z+6	; 0x06
  ea:	d7 81       	ldd	r29, Z+7	; 0x07
  ec:	98 81       	ld	r25, Y
  ee:	9a 01       	movw	r18, r20
  f0:	01 80       	ldd	r0, Z+1	; 0x01
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <Dio_init+0x66>
  f4:	22 0f       	add	r18, r18
  f6:	33 1f       	adc	r19, r19
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <Dio_init+0x62>
  fc:	82 2f       	mov	r24, r18
  fe:	80 95       	com	r24
 100:	89 23       	and	r24, r25
 102:	88 83       	st	Y, r24
 104:	1c c0       	rjmp	.+56     	; 0x13e <Dio_init+0xac>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	19 f5       	brne	.+70     	; 0x150 <Dio_init+0xbe>
 10a:	c4 81       	ldd	r28, Z+4	; 0x04
 10c:	d5 81       	ldd	r29, Z+5	; 0x05
 10e:	28 81       	ld	r18, Y
 110:	ca 01       	movw	r24, r20
 112:	01 80       	ldd	r0, Z+1	; 0x01
 114:	02 c0       	rjmp	.+4      	; 0x11a <Dio_init+0x88>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <Dio_init+0x84>
 11e:	82 2b       	or	r24, r18
 120:	88 83       	st	Y, r24
 122:	c6 81       	ldd	r28, Z+6	; 0x06
 124:	d7 81       	ldd	r29, Z+7	; 0x07
 126:	28 81       	ld	r18, Y
 128:	93 81       	ldd	r25, Z+3	; 0x03
 12a:	89 2f       	mov	r24, r25
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	01 80       	ldd	r0, Z+1	; 0x01
 130:	02 c0       	rjmp	.+4      	; 0x136 <Dio_init+0xa4>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	0a 94       	dec	r0
 138:	e2 f7       	brpl	.-8      	; 0x132 <Dio_init+0xa0>
 13a:	82 2b       	or	r24, r18
 13c:	88 83       	st	Y, r24
 13e:	3a 96       	adiw	r30, 0x0a	; 10
 140:	e6 17       	cp	r30, r22
 142:	f7 07       	cpc	r31, r23
 144:	09 f0       	breq	.+2      	; 0x148 <Dio_init+0xb6>
 146:	ad cf       	rjmp	.-166    	; 0xa2 <Dio_init+0x10>
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	03 c0       	rjmp	.+6      	; 0x152 <Dio_init+0xc0>
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	01 c0       	rjmp	.+2      	; 0x152 <Dio_init+0xc0>
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <Dio_Write_pin>:
 158:	88 30       	cpi	r24, 0x08	; 8
 15a:	08 f0       	brcs	.+2      	; 0x15e <Dio_Write_pin+0x6>
 15c:	86 c0       	rjmp	.+268    	; 0x26a <Dio_Write_pin+0x112>
 15e:	61 30       	cpi	r22, 0x01	; 1
 160:	39 f1       	breq	.+78     	; 0x1b0 <Dio_Write_pin+0x58>
 162:	38 f0       	brcs	.+14     	; 0x172 <Dio_Write_pin+0x1a>
 164:	62 30       	cpi	r22, 0x02	; 2
 166:	09 f4       	brne	.+2      	; 0x16a <Dio_Write_pin+0x12>
 168:	42 c0       	rjmp	.+132    	; 0x1ee <Dio_Write_pin+0x96>
 16a:	63 30       	cpi	r22, 0x03	; 3
 16c:	09 f4       	brne	.+2      	; 0x170 <Dio_Write_pin+0x18>
 16e:	5e c0       	rjmp	.+188    	; 0x22c <Dio_Write_pin+0xd4>
 170:	7e c0       	rjmp	.+252    	; 0x26e <Dio_Write_pin+0x116>
 172:	44 23       	and	r20, r20
 174:	71 f0       	breq	.+28     	; 0x192 <Dio_Write_pin+0x3a>
 176:	4b b3       	in	r20, 0x1b	; 27
 178:	21 e0       	ldi	r18, 0x01	; 1
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	b9 01       	movw	r22, r18
 17e:	02 c0       	rjmp	.+4      	; 0x184 <Dio_Write_pin+0x2c>
 180:	66 0f       	add	r22, r22
 182:	77 1f       	adc	r23, r23
 184:	8a 95       	dec	r24
 186:	e2 f7       	brpl	.-8      	; 0x180 <Dio_Write_pin+0x28>
 188:	cb 01       	movw	r24, r22
 18a:	84 2b       	or	r24, r20
 18c:	8b bb       	out	0x1b, r24	; 27
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	08 95       	ret
 192:	4b b3       	in	r20, 0x1b	; 27
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	b9 01       	movw	r22, r18
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <Dio_Write_pin+0x48>
 19c:	66 0f       	add	r22, r22
 19e:	77 1f       	adc	r23, r23
 1a0:	8a 95       	dec	r24
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <Dio_Write_pin+0x44>
 1a4:	cb 01       	movw	r24, r22
 1a6:	80 95       	com	r24
 1a8:	84 23       	and	r24, r20
 1aa:	8b bb       	out	0x1b, r24	; 27
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	08 95       	ret
 1b0:	44 23       	and	r20, r20
 1b2:	71 f0       	breq	.+28     	; 0x1d0 <Dio_Write_pin+0x78>
 1b4:	48 b3       	in	r20, 0x18	; 24
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	b9 01       	movw	r22, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <Dio_Write_pin+0x6a>
 1be:	66 0f       	add	r22, r22
 1c0:	77 1f       	adc	r23, r23
 1c2:	8a 95       	dec	r24
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <Dio_Write_pin+0x66>
 1c6:	cb 01       	movw	r24, r22
 1c8:	84 2b       	or	r24, r20
 1ca:	88 bb       	out	0x18, r24	; 24
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	08 95       	ret
 1d0:	48 b3       	in	r20, 0x18	; 24
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	b9 01       	movw	r22, r18
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <Dio_Write_pin+0x86>
 1da:	66 0f       	add	r22, r22
 1dc:	77 1f       	adc	r23, r23
 1de:	8a 95       	dec	r24
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <Dio_Write_pin+0x82>
 1e2:	cb 01       	movw	r24, r22
 1e4:	80 95       	com	r24
 1e6:	84 23       	and	r24, r20
 1e8:	88 bb       	out	0x18, r24	; 24
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	08 95       	ret
 1ee:	44 23       	and	r20, r20
 1f0:	71 f0       	breq	.+28     	; 0x20e <Dio_Write_pin+0xb6>
 1f2:	45 b3       	in	r20, 0x15	; 21
 1f4:	21 e0       	ldi	r18, 0x01	; 1
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	b9 01       	movw	r22, r18
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <Dio_Write_pin+0xa8>
 1fc:	66 0f       	add	r22, r22
 1fe:	77 1f       	adc	r23, r23
 200:	8a 95       	dec	r24
 202:	e2 f7       	brpl	.-8      	; 0x1fc <Dio_Write_pin+0xa4>
 204:	cb 01       	movw	r24, r22
 206:	84 2b       	or	r24, r20
 208:	85 bb       	out	0x15, r24	; 21
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	08 95       	ret
 20e:	45 b3       	in	r20, 0x15	; 21
 210:	21 e0       	ldi	r18, 0x01	; 1
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	b9 01       	movw	r22, r18
 216:	02 c0       	rjmp	.+4      	; 0x21c <Dio_Write_pin+0xc4>
 218:	66 0f       	add	r22, r22
 21a:	77 1f       	adc	r23, r23
 21c:	8a 95       	dec	r24
 21e:	e2 f7       	brpl	.-8      	; 0x218 <Dio_Write_pin+0xc0>
 220:	cb 01       	movw	r24, r22
 222:	80 95       	com	r24
 224:	84 23       	and	r24, r20
 226:	85 bb       	out	0x15, r24	; 21
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	08 95       	ret
 22c:	44 23       	and	r20, r20
 22e:	71 f0       	breq	.+28     	; 0x24c <Dio_Write_pin+0xf4>
 230:	42 b3       	in	r20, 0x12	; 18
 232:	21 e0       	ldi	r18, 0x01	; 1
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	b9 01       	movw	r22, r18
 238:	02 c0       	rjmp	.+4      	; 0x23e <Dio_Write_pin+0xe6>
 23a:	66 0f       	add	r22, r22
 23c:	77 1f       	adc	r23, r23
 23e:	8a 95       	dec	r24
 240:	e2 f7       	brpl	.-8      	; 0x23a <Dio_Write_pin+0xe2>
 242:	cb 01       	movw	r24, r22
 244:	84 2b       	or	r24, r20
 246:	82 bb       	out	0x12, r24	; 18
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	08 95       	ret
 24c:	42 b3       	in	r20, 0x12	; 18
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	b9 01       	movw	r22, r18
 254:	02 c0       	rjmp	.+4      	; 0x25a <Dio_Write_pin+0x102>
 256:	66 0f       	add	r22, r22
 258:	77 1f       	adc	r23, r23
 25a:	8a 95       	dec	r24
 25c:	e2 f7       	brpl	.-8      	; 0x256 <Dio_Write_pin+0xfe>
 25e:	cb 01       	movw	r24, r22
 260:	80 95       	com	r24
 262:	84 23       	and	r24, r20
 264:	82 bb       	out	0x12, r24	; 18
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	08 95       	ret
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	08 95       	ret
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	08 95       	ret

00000272 <Dio_Write_numOfBits>:
/* change the value of number of bits in a specific port according to a mask (put ones on the desired pins)*/
bool Dio_Write_numOfBits(Port_t port_name, Data_t value, uint8 mask) {
	if (value < 0 || value > 255) {
		return ERROR;
	}
	switch (port_name) {
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	e1 f0       	breq	.+56     	; 0x2ae <Dio_Write_numOfBits+0x3c>
 276:	30 f0       	brcs	.+12     	; 0x284 <Dio_Write_numOfBits+0x12>
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	71 f1       	breq	.+92     	; 0x2d8 <Dio_Write_numOfBits+0x66>
 27c:	83 30       	cpi	r24, 0x03	; 3
 27e:	09 f4       	brne	.+2      	; 0x282 <Dio_Write_numOfBits+0x10>
 280:	40 c0       	rjmp	.+128    	; 0x302 <Dio_Write_numOfBits+0x90>
 282:	54 c0       	rjmp	.+168    	; 0x32c <Dio_Write_numOfBits+0xba>
	case PORT_A:
		if (value == 1) {
 284:	61 30       	cpi	r22, 0x01	; 1
 286:	29 f4       	brne	.+10     	; 0x292 <Dio_Write_numOfBits+0x20>
			PORTA |= mask ;
 288:	6b b3       	in	r22, 0x1b	; 27
 28a:	46 2b       	or	r20, r22
 28c:	4b bb       	out	0x1b, r20	; 27
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	08 95       	ret
	}
	switch (port_name) {
	case PORT_A:
		if (value == 1) {
			PORTA |= mask ;
		} else if(value == 0) {
 292:	61 11       	cpse	r22, r1
 294:	06 c0       	rjmp	.+12     	; 0x2a2 <Dio_Write_numOfBits+0x30>
			PORTA &= ~mask;			
 296:	8b b3       	in	r24, 0x1b	; 27
 298:	40 95       	com	r20
 29a:	48 23       	and	r20, r24
 29c:	4b bb       	out	0x1b, r20	; 27
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	08 95       	ret
		if (value == 1) {
			PORTA |= mask ;
		} else if(value == 0) {
			PORTA &= ~mask;			
		} else {
			PORTA |= value & mask;
 2a2:	8b b3       	in	r24, 0x1b	; 27
 2a4:	46 23       	and	r20, r22
 2a6:	48 2b       	or	r20, r24
 2a8:	4b bb       	out	0x1b, r20	; 27
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	08 95       	ret
		} else {
			PORTA |= value & mask;
		}		
		break;
	case PORT_B:
		if (value == 1) {
 2ae:	61 30       	cpi	r22, 0x01	; 1
 2b0:	29 f4       	brne	.+10     	; 0x2bc <Dio_Write_numOfBits+0x4a>
			PORTB |= mask ;
 2b2:	68 b3       	in	r22, 0x18	; 24
 2b4:	46 2b       	or	r20, r22
 2b6:	48 bb       	out	0x18, r20	; 24
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	08 95       	ret
		}		
		break;
	case PORT_B:
		if (value == 1) {
			PORTB |= mask ;
			} else if(value == 0) {
 2bc:	61 11       	cpse	r22, r1
 2be:	06 c0       	rjmp	.+12     	; 0x2cc <Dio_Write_numOfBits+0x5a>
			PORTB &= ~mask;
 2c0:	88 b3       	in	r24, 0x18	; 24
 2c2:	40 95       	com	r20
 2c4:	48 23       	and	r20, r24
 2c6:	48 bb       	out	0x18, r20	; 24
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	08 95       	ret
		if (value == 1) {
			PORTB |= mask ;
			} else if(value == 0) {
			PORTB &= ~mask;
			} else {
			PORTB |= value & mask;
 2cc:	88 b3       	in	r24, 0x18	; 24
 2ce:	46 23       	and	r20, r22
 2d0:	48 2b       	or	r20, r24
 2d2:	48 bb       	out	0x18, r20	; 24
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	08 95       	ret
			} else {
			PORTB |= value & mask;
		}
		break;
	case PORT_C:
		if (value == 1) {
 2d8:	61 30       	cpi	r22, 0x01	; 1
 2da:	29 f4       	brne	.+10     	; 0x2e6 <Dio_Write_numOfBits+0x74>
			PORTC |= mask ;
 2dc:	65 b3       	in	r22, 0x15	; 21
 2de:	46 2b       	or	r20, r22
 2e0:	45 bb       	out	0x15, r20	; 21
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	08 95       	ret
		}
		break;
	case PORT_C:
		if (value == 1) {
			PORTC |= mask ;
			} else if(value == 0) {
 2e6:	61 11       	cpse	r22, r1
 2e8:	06 c0       	rjmp	.+12     	; 0x2f6 <Dio_Write_numOfBits+0x84>
			PORTC &= ~mask;
 2ea:	85 b3       	in	r24, 0x15	; 21
 2ec:	40 95       	com	r20
 2ee:	48 23       	and	r20, r24
 2f0:	45 bb       	out	0x15, r20	; 21
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	08 95       	ret
		if (value == 1) {
			PORTC |= mask ;
			} else if(value == 0) {
			PORTC &= ~mask;
			} else {
			PORTC |= value & mask;
 2f6:	85 b3       	in	r24, 0x15	; 21
 2f8:	46 23       	and	r20, r22
 2fa:	48 2b       	or	r20, r24
 2fc:	45 bb       	out	0x15, r20	; 21
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	08 95       	ret
			} else {
			PORTC |= value & mask;
		}
		break;
	case PORT_D:
		if (value == 1) {
 302:	61 30       	cpi	r22, 0x01	; 1
 304:	29 f4       	brne	.+10     	; 0x310 <Dio_Write_numOfBits+0x9e>
			PORTD |= mask ;
 306:	62 b3       	in	r22, 0x12	; 18
 308:	46 2b       	or	r20, r22
 30a:	42 bb       	out	0x12, r20	; 18
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	08 95       	ret
		}
		break;
	case PORT_D:
		if (value == 1) {
			PORTD |= mask ;
			} else if(value == 0) {
 310:	61 11       	cpse	r22, r1
 312:	06 c0       	rjmp	.+12     	; 0x320 <Dio_Write_numOfBits+0xae>
			PORTD &= ~mask;
 314:	82 b3       	in	r24, 0x12	; 18
 316:	40 95       	com	r20
 318:	48 23       	and	r20, r24
 31a:	42 bb       	out	0x12, r20	; 18
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	08 95       	ret
		if (value == 1) {
			PORTD |= mask ;
			} else if(value == 0) {
			PORTD &= ~mask;
			} else {
			PORTD |= value & mask;
 320:	82 b3       	in	r24, 0x12	; 18
 322:	46 23       	and	r20, r22
 324:	48 2b       	or	r20, r24
 326:	42 bb       	out	0x12, r20	; 18
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	08 95       	ret
			} else {
			PORTD |= value & mask;
		}
		break;
	default:
		return ERROR;
 32c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return SUCCESS;
 32e:	08 95       	ret

00000330 <EnPulse>:
	default:
		return ERROR;
		break;					
	}
	return SUCCESS;
}
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	0e 94 ac 00 	call	0x158	; 0x158 <Dio_Write_pin>
 33a:	98 2f       	mov	r25, r24
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	51 f0       	breq	.+20     	; 0x354 <EnPulse+0x24>
 340:	00 00       	nop
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	0e 94 ac 00 	call	0x158	; 0x158 <Dio_Write_pin>
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	81 30       	cpi	r24, 0x01	; 1
 350:	09 f0       	breq	.+2      	; 0x354 <EnPulse+0x24>
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	89 2f       	mov	r24, r25
 356:	08 95       	ret

00000358 <Lcd_Write_4>:
 358:	cf 93       	push	r28
 35a:	c8 2f       	mov	r28, r24
 35c:	40 ef       	ldi	r20, 0xF0	; 240
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 39 01 	call	0x272	; 0x272 <Dio_Write_numOfBits>
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	41 f1       	breq	.+80     	; 0x3ba <Lcd_Write_4+0x62>
 36a:	40 ef       	ldi	r20, 0xF0	; 240
 36c:	6c 2f       	mov	r22, r28
 36e:	60 7f       	andi	r22, 0xF0	; 240
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	0e 94 39 01 	call	0x272	; 0x272 <Dio_Write_numOfBits>
 376:	81 30       	cpi	r24, 0x01	; 1
 378:	01 f1       	breq	.+64     	; 0x3ba <Lcd_Write_4+0x62>
 37a:	0e 94 98 01 	call	0x330	; 0x330 <EnPulse>
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	e1 f0       	breq	.+56     	; 0x3ba <Lcd_Write_4+0x62>
 382:	40 ef       	ldi	r20, 0xF0	; 240
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	0e 94 39 01 	call	0x272	; 0x272 <Dio_Write_numOfBits>
 38c:	81 30       	cpi	r24, 0x01	; 1
 38e:	a9 f0       	breq	.+42     	; 0x3ba <Lcd_Write_4+0x62>
 390:	80 e1       	ldi	r24, 0x10	; 16
 392:	c8 9f       	mul	r28, r24
 394:	b0 01       	movw	r22, r0
 396:	11 24       	eor	r1, r1
 398:	40 ef       	ldi	r20, 0xF0	; 240
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	0e 94 39 01 	call	0x272	; 0x272 <Dio_Write_numOfBits>
 3a0:	81 30       	cpi	r24, 0x01	; 1
 3a2:	59 f0       	breq	.+22     	; 0x3ba <Lcd_Write_4+0x62>
 3a4:	0e 94 98 01 	call	0x330	; 0x330 <EnPulse>
 3a8:	81 30       	cpi	r24, 0x01	; 1
 3aa:	39 f0       	breq	.+14     	; 0x3ba <Lcd_Write_4+0x62>
 3ac:	83 ef       	ldi	r24, 0xF3	; 243
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	01 97       	sbiw	r24, 0x01	; 1
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <Lcd_Write_4+0x58>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <Lcd_Write_4+0x5e>
 3b6:	00 00       	nop
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	cf 91       	pop	r28
 3bc:	08 95       	ret

000003be <Lcd_Cmd>:
 3be:	cf 93       	push	r28
 3c0:	c8 2f       	mov	r28, r24
 3c2:	40 e0       	ldi	r20, 0x00	; 0
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 ac 00 	call	0x158	; 0x158 <Dio_Write_pin>
 3cc:	98 2f       	mov	r25, r24
 3ce:	81 30       	cpi	r24, 0x01	; 1
 3d0:	39 f0       	breq	.+14     	; 0x3e0 <Lcd_Cmd+0x22>
 3d2:	8c 2f       	mov	r24, r28
 3d4:	0e 94 ac 01 	call	0x358	; 0x358 <Lcd_Write_4>
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	09 f0       	breq	.+2      	; 0x3e0 <Lcd_Cmd+0x22>
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	89 2f       	mov	r24, r25
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <Lcd_Init>:
 3e6:	85 ea       	ldi	r24, 0xA5	; 165
 3e8:	9e e0       	ldi	r25, 0x0E	; 14
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <Lcd_Init+0x4>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <Lcd_Init+0xa>
 3f0:	00 00       	nop
 3f2:	80 e3       	ldi	r24, 0x30	; 48
 3f4:	0e 94 df 01 	call	0x3be	; 0x3be <Lcd_Cmd>
 3f8:	98 2f       	mov	r25, r24
 3fa:	81 30       	cpi	r24, 0x01	; 1
 3fc:	21 f1       	breq	.+72     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 3fe:	80 e2       	ldi	r24, 0x20	; 32
 400:	0e 94 df 01 	call	0x3be	; 0x3be <Lcd_Cmd>
 404:	98 2f       	mov	r25, r24
 406:	81 30       	cpi	r24, 0x01	; 1
 408:	f1 f0       	breq	.+60     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 40a:	0e 94 98 01 	call	0x330	; 0x330 <EnPulse>
 40e:	98 2f       	mov	r25, r24
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	c9 f0       	breq	.+50     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 414:	88 e2       	ldi	r24, 0x28	; 40
 416:	0e 94 df 01 	call	0x3be	; 0x3be <Lcd_Cmd>
 41a:	98 2f       	mov	r25, r24
 41c:	81 30       	cpi	r24, 0x01	; 1
 41e:	99 f0       	breq	.+38     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 420:	8f e0       	ldi	r24, 0x0F	; 15
 422:	0e 94 df 01 	call	0x3be	; 0x3be <Lcd_Cmd>
 426:	98 2f       	mov	r25, r24
 428:	81 30       	cpi	r24, 0x01	; 1
 42a:	69 f0       	breq	.+26     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	0e 94 df 01 	call	0x3be	; 0x3be <Lcd_Cmd>
 432:	98 2f       	mov	r25, r24
 434:	81 30       	cpi	r24, 0x01	; 1
 436:	39 f0       	breq	.+14     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 438:	86 e0       	ldi	r24, 0x06	; 6
 43a:	0e 94 df 01 	call	0x3be	; 0x3be <Lcd_Cmd>
 43e:	91 e0       	ldi	r25, 0x01	; 1
 440:	81 30       	cpi	r24, 0x01	; 1
 442:	09 f0       	breq	.+2      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	89 2f       	mov	r24, r25
 448:	08 95       	ret

0000044a <Lcd_Out>:


extern bool Lcd_Out(uint8 *str) {
 44a:	0f 93       	push	r16
 44c:	1f 93       	push	r17
 44e:	cf 93       	push	r28
	while (*str != '\0') {
 450:	fc 01       	movw	r30, r24
 452:	c0 81       	ld	r28, Z
 454:	cc 23       	and	r28, r28
 456:	b1 f0       	breq	.+44     	; 0x484 <Lcd_Out+0x3a>
 458:	8c 01       	movw	r16, r24
 45a:	0f 5f       	subi	r16, 0xFF	; 255
 45c:	1f 4f       	sbci	r17, 0xFF	; 255
	return SUCCESS;
}

static bool Lcd_Data(uint8 data) {
	// Set RS pin
	if (Dio_Write_pin(RS, LCD_CtrPort, 1) == ERROR) {
 45e:	41 e0       	ldi	r20, 0x01	; 1
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	0e 94 ac 00 	call	0x158	; 0x158 <Dio_Write_pin>
 468:	81 30       	cpi	r24, 0x01	; 1
 46a:	69 f0       	breq	.+26     	; 0x486 <Lcd_Out+0x3c>
		return ERROR;
	}
	#ifdef LCD_MODE_FOUR_BIT
	if (Lcd_Write_4(data) == ERROR) {
 46c:	8c 2f       	mov	r24, r28
 46e:	0e 94 ac 01 	call	0x358	; 0x358 <Lcd_Write_4>
}


extern bool Lcd_Out(uint8 *str) {
	while (*str != '\0') {
		if (Lcd_Data(*str) == ERROR) {
 472:	81 30       	cpi	r24, 0x01	; 1
 474:	41 f0       	breq	.+16     	; 0x486 <Lcd_Out+0x3c>
	return SUCCESS;
}


extern bool Lcd_Out(uint8 *str) {
	while (*str != '\0') {
 476:	f8 01       	movw	r30, r16
 478:	c1 91       	ld	r28, Z+
 47a:	8f 01       	movw	r16, r30
 47c:	c1 11       	cpse	r28, r1
 47e:	ef cf       	rjmp	.-34     	; 0x45e <Lcd_Out+0x14>
		if (Lcd_Data(*str) == ERROR) {
			return ERROR;
		}
		str++;
	}
	return SUCCESS;	
 480:	8c 2f       	mov	r24, r28
 482:	01 c0       	rjmp	.+2      	; 0x486 <Lcd_Out+0x3c>
 484:	8c 2f       	mov	r24, r28
}
 486:	cf 91       	pop	r28
 488:	1f 91       	pop	r17
 48a:	0f 91       	pop	r16
 48c:	08 95       	ret

0000048e <__vector_9>:
#include <util/delay.h>

void str_reverse(uint8 *str);
volatile uint32 count = 0;

ISR(TIMER1_OVF_vect) {
 48e:	1f 92       	push	r1
 490:	0f 92       	push	r0
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	0f 92       	push	r0
 496:	11 24       	eor	r1, r1
 498:	8f 93       	push	r24
 49a:	9f 93       	push	r25
 49c:	af 93       	push	r26
 49e:	bf 93       	push	r27
	count += 65536;
 4a0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 4a4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 4a8:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <__data_end+0x2>
 4ac:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <__data_end+0x3>
 4b0:	11 96       	adiw	r26, 0x01	; 1
 4b2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 4b6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
 4ba:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <__data_end+0x2>
 4be:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <__data_end+0x3>
}
 4c2:	bf 91       	pop	r27
 4c4:	af 91       	pop	r26
 4c6:	9f 91       	pop	r25
 4c8:	8f 91       	pop	r24
 4ca:	0f 90       	pop	r0
 4cc:	0f be       	out	0x3f, r0	; 63
 4ce:	0f 90       	pop	r0
 4d0:	1f 90       	pop	r1
 4d2:	18 95       	reti

000004d4 <str_reverse>:

	
	return 0;
}

void str_reverse(uint8 *str) {
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	9c 01       	movw	r18, r24
	uint8 start = 0;
	uint8 end = strlen((char*)str) - 1;
 4da:	fc 01       	movw	r30, r24
 4dc:	01 90       	ld	r0, Z+
 4de:	00 20       	and	r0, r0
 4e0:	e9 f7       	brne	.-6      	; 0x4dc <str_reverse+0x8>
 4e2:	e8 1b       	sub	r30, r24
 4e4:	e2 50       	subi	r30, 0x02	; 2
	uint8 temp;

	while (end > start) {
 4e6:	79 f0       	breq	.+30     	; 0x506 <str_reverse+0x32>
 4e8:	90 e0       	ldi	r25, 0x00	; 0
		temp = str[end];
 4ea:	e9 01       	movw	r28, r18
 4ec:	ce 0f       	add	r28, r30
 4ee:	d1 1d       	adc	r29, r1
 4f0:	88 81       	ld	r24, Y
		str[end] = str[start];
 4f2:	d9 01       	movw	r26, r18
 4f4:	a9 0f       	add	r26, r25
 4f6:	b1 1d       	adc	r27, r1
 4f8:	4c 91       	ld	r20, X
 4fa:	48 83       	st	Y, r20
		str[start] = temp;
 4fc:	8c 93       	st	X, r24
		end--;
 4fe:	e1 50       	subi	r30, 0x01	; 1
		start++;
 500:	9f 5f       	subi	r25, 0xFF	; 255
void str_reverse(uint8 *str) {
	uint8 start = 0;
	uint8 end = strlen((char*)str) - 1;
	uint8 temp;

	while (end > start) {
 502:	9e 17       	cp	r25, r30
 504:	90 f3       	brcs	.-28     	; 0x4ea <str_reverse+0x16>
		str[end] = str[start];
		str[start] = temp;
		end--;
		start++;
	}
}
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	08 95       	ret

0000050c <main>:

ISR(TIMER1_OVF_vect) {
	count += 65536;
}

int main(void) {
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	cd b7       	in	r28, 0x3d	; 61
 512:	de b7       	in	r29, 0x3e	; 62
 514:	6e 97       	sbiw	r28, 0x1e	; 30
 516:	0f b6       	in	r0, 0x3f	; 63
 518:	f8 94       	cli
 51a:	de bf       	out	0x3e, r29	; 62
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	cd bf       	out	0x3d, r28	; 61
	
	Dio_init();
 520:	0e 94 49 00 	call	0x92	; 0x92 <Dio_init>
	Lcd_Init();
 524:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <Lcd_Init>
	
	uint8 counter = 0;
	uint16 arr[10] = {0};
 528:	fe 01       	movw	r30, r28
 52a:	31 96       	adiw	r30, 0x01	; 1
 52c:	84 e1       	ldi	r24, 0x14	; 20
 52e:	df 01       	movw	r26, r30
 530:	1d 92       	st	X+, r1
 532:	8a 95       	dec	r24
 534:	e9 f7       	brne	.-6      	; 0x530 <main+0x24>
	uint32 result;
	uint8 output[10] = {'\0'}; 
 536:	9e 01       	movw	r18, r28
 538:	2b 5e       	subi	r18, 0xEB	; 235
 53a:	3f 4f       	sbci	r19, 0xFF	; 255
 53c:	8a e0       	ldi	r24, 0x0A	; 10
 53e:	d9 01       	movw	r26, r18
 540:	1d 92       	st	X+, r1
 542:	8a 95       	dec	r24
 544:	e9 f7       	brne	.-6      	; 0x540 <main+0x34>
	uint8 index = 0;	
	
	// configure normal mode
	CLR_BIT(TCCR1A, 0);
 546:	8f b5       	in	r24, 0x2f	; 47
 548:	8e 7f       	andi	r24, 0xFE	; 254
 54a:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A, 1);
 54c:	8f b5       	in	r24, 0x2f	; 47
 54e:	8d 7f       	andi	r24, 0xFD	; 253
 550:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1B, 3);
 552:	8e b5       	in	r24, 0x2e	; 46
 554:	87 7f       	andi	r24, 0xF7	; 247
 556:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B, 4);
 558:	8e b5       	in	r24, 0x2e	; 46
 55a:	8f 7e       	andi	r24, 0xEF	; 239
 55c:	8e bd       	out	0x2e, r24	; 46
	// Falling edge
	CLR_BIT(TCCR1B, 6);
 55e:	8e b5       	in	r24, 0x2e	; 46
 560:	8f 7b       	andi	r24, 0xBF	; 191
 562:	8e bd       	out	0x2e, r24	; 46
	// no prescaler
	SET_BIT(TCCR1B, 0);
 564:	8e b5       	in	r24, 0x2e	; 46
 566:	81 60       	ori	r24, 0x01	; 1
 568:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B, 2);
 56a:	8e b5       	in	r24, 0x2e	; 46
 56c:	84 60       	ori	r24, 0x04	; 4
 56e:	8e bd       	out	0x2e, r24	; 46
	// enable over flow interrupt
	SET_BIT(TIMSK, 2);
 570:	89 b7       	in	r24, 0x39	; 57
 572:	84 60       	ori	r24, 0x04	; 4
 574:	89 bf       	out	0x39, r24	; 57
	// enable global interrupt
	SET_BIT(SREG, 7);
 576:	8f b7       	in	r24, 0x3f	; 63
 578:	80 68       	ori	r24, 0x80	; 128
 57a:	8f bf       	out	0x3f, r24	; 63
 57c:	2a 50       	subi	r18, 0x0A	; 10
 57e:	31 09       	sbc	r19, r1
			
	while (1) {
		while (counter < 5) {
			while ((TIFR & (1 << 5)) == 0);		
 580:	08 b6       	in	r0, 0x38	; 56
 582:	05 fe       	sbrs	r0, 5
 584:	fd cf       	rjmp	.-6      	; 0x580 <main+0x74>
			SET_BIT(TIFR, 5);
 586:	88 b7       	in	r24, 0x38	; 56
 588:	80 62       	ori	r24, 0x20	; 32
 58a:	88 bf       	out	0x38, r24	; 56
			arr[counter] = ICR1L;
 58c:	86 b5       	in	r24, 0x26	; 38
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	91 83       	std	Z+1, r25	; 0x01
 592:	80 83       	st	Z, r24
			arr[counter] |= (ICR1H << 8);
 594:	a7 b5       	in	r26, 0x27	; 39
			arr[counter] += count;
 596:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <__data_end>
 59a:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <__data_end+0x1>
 59e:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <__data_end+0x2>
 5a2:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <__data_end+0x3>
 5a6:	9a 2b       	or	r25, r26
 5a8:	48 0f       	add	r20, r24
 5aa:	59 1f       	adc	r21, r25
 5ac:	41 93       	st	Z+, r20
 5ae:	51 93       	st	Z+, r21
	SET_BIT(TIMSK, 2);
	// enable global interrupt
	SET_BIT(SREG, 7);
			
	while (1) {
		while (counter < 5) {
 5b0:	2e 17       	cp	r18, r30
 5b2:	3f 07       	cpc	r19, r31
 5b4:	29 f7       	brne	.-54     	; 0x580 <main+0x74>
			arr[counter] = ICR1L;
			arr[counter] |= (ICR1H << 8);
			arr[counter] += count;
			counter++;
		}
		result = arr[4] - arr[3];
 5b6:	29 85       	ldd	r18, Y+9	; 0x09
 5b8:	3a 85       	ldd	r19, Y+10	; 0x0a
 5ba:	8f 81       	ldd	r24, Y+7	; 0x07
 5bc:	98 85       	ldd	r25, Y+8	; 0x08
 5be:	28 1b       	sub	r18, r24
 5c0:	39 0b       	sbc	r19, r25
 5c2:	40 e0       	ldi	r20, 0x00	; 0
 5c4:	50 e0       	ldi	r21, 0x00	; 0
		result = (F_CPU / 1024) / result;
 5c6:	60 ed       	ldi	r22, 0xD0	; 208
 5c8:	73 e0       	ldi	r23, 0x03	; 3
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 1f 03 	call	0x63e	; 0x63e <__udivmodsi4>
 5d2:	ca 01       	movw	r24, r20
 5d4:	b9 01       	movw	r22, r18
		while (result > 0) {
 5d6:	23 2b       	or	r18, r19
 5d8:	24 2b       	or	r18, r20
 5da:	25 2b       	or	r18, r21
 5dc:	19 f1       	breq	.+70     	; 0x624 <main+0x118>
 5de:	10 e0       	ldi	r17, 0x00	; 0
			output[index] = result % 10 + 48;
 5e0:	0f 2e       	mov	r0, r31
 5e2:	fa e0       	ldi	r31, 0x0A	; 10
 5e4:	cf 2e       	mov	r12, r31
 5e6:	d1 2c       	mov	r13, r1
 5e8:	e1 2c       	mov	r14, r1
 5ea:	f1 2c       	mov	r15, r1
 5ec:	f0 2d       	mov	r31, r0
 5ee:	0f 2e       	mov	r0, r31
 5f0:	f5 e1       	ldi	r31, 0x15	; 21
 5f2:	af 2e       	mov	r10, r31
 5f4:	b1 2c       	mov	r11, r1
 5f6:	f0 2d       	mov	r31, r0
 5f8:	ac 0e       	add	r10, r28
 5fa:	bd 1e       	adc	r11, r29
 5fc:	a1 0e       	add	r10, r17
 5fe:	b1 1c       	adc	r11, r1
 600:	a7 01       	movw	r20, r14
 602:	96 01       	movw	r18, r12
 604:	0e 94 1f 03 	call	0x63e	; 0x63e <__udivmodsi4>
 608:	80 e3       	ldi	r24, 0x30	; 48
 60a:	86 0f       	add	r24, r22
 60c:	f5 01       	movw	r30, r10
 60e:	80 83       	st	Z, r24
			result /= 10;
 610:	62 2f       	mov	r22, r18
 612:	73 2f       	mov	r23, r19
 614:	84 2f       	mov	r24, r20
 616:	95 2f       	mov	r25, r21
			index++;
 618:	1f 5f       	subi	r17, 0xFF	; 255
			arr[counter] += count;
			counter++;
		}
		result = arr[4] - arr[3];
		result = (F_CPU / 1024) / result;
		while (result > 0) {
 61a:	61 15       	cp	r22, r1
 61c:	71 05       	cpc	r23, r1
 61e:	81 05       	cpc	r24, r1
 620:	91 05       	cpc	r25, r1
 622:	29 f7       	brne	.-54     	; 0x5ee <main+0xe2>
			output[index] = result % 10 + 48;
			result /= 10;
			index++;
		}
		
		str_reverse(output);
 624:	ce 01       	movw	r24, r28
 626:	45 96       	adiw	r24, 0x15	; 21
 628:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <str_reverse>
		Lcd_Out(output);
 62c:	ce 01       	movw	r24, r28
 62e:	45 96       	adiw	r24, 0x15	; 21
 630:	0e 94 25 02 	call	0x44a	; 0x44a <Lcd_Out>
		Lcd_Out((uint8*)"Hz");
 634:	8a e0       	ldi	r24, 0x0A	; 10
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	0e 94 25 02 	call	0x44a	; 0x44a <Lcd_Out>
 63c:	ff cf       	rjmp	.-2      	; 0x63c <main+0x130>

0000063e <__udivmodsi4>:
 63e:	a1 e2       	ldi	r26, 0x21	; 33
 640:	1a 2e       	mov	r1, r26
 642:	aa 1b       	sub	r26, r26
 644:	bb 1b       	sub	r27, r27
 646:	fd 01       	movw	r30, r26
 648:	0d c0       	rjmp	.+26     	; 0x664 <__udivmodsi4_ep>

0000064a <__udivmodsi4_loop>:
 64a:	aa 1f       	adc	r26, r26
 64c:	bb 1f       	adc	r27, r27
 64e:	ee 1f       	adc	r30, r30
 650:	ff 1f       	adc	r31, r31
 652:	a2 17       	cp	r26, r18
 654:	b3 07       	cpc	r27, r19
 656:	e4 07       	cpc	r30, r20
 658:	f5 07       	cpc	r31, r21
 65a:	20 f0       	brcs	.+8      	; 0x664 <__udivmodsi4_ep>
 65c:	a2 1b       	sub	r26, r18
 65e:	b3 0b       	sbc	r27, r19
 660:	e4 0b       	sbc	r30, r20
 662:	f5 0b       	sbc	r31, r21

00000664 <__udivmodsi4_ep>:
 664:	66 1f       	adc	r22, r22
 666:	77 1f       	adc	r23, r23
 668:	88 1f       	adc	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	1a 94       	dec	r1
 66e:	69 f7       	brne	.-38     	; 0x64a <__udivmodsi4_loop>
 670:	60 95       	com	r22
 672:	70 95       	com	r23
 674:	80 95       	com	r24
 676:	90 95       	com	r25
 678:	9b 01       	movw	r18, r22
 67a:	ac 01       	movw	r20, r24
 67c:	bd 01       	movw	r22, r26
 67e:	cf 01       	movw	r24, r30
 680:	08 95       	ret

00000682 <_exit>:
 682:	f8 94       	cli

00000684 <__stop_program>:
 684:	ff cf       	rjmp	.-2      	; 0x684 <__stop_program>
