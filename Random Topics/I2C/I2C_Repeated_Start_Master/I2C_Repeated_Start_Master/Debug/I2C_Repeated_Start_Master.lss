
I2C_Repeated_Start_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000055a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  0000055a  000005ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000061c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015a0  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009c9  00000000  00000000  00001d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b8c  00000000  00000000  00002701  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000021c  00000000  00000000  00003290  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000653  00000000  00000000  000034ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f36  00000000  00000000  00003aff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  00004a35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e5       	ldi	r30, 0x5A	; 90
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 50 02 	call	0x4a0	; 0x4a0 <main>
  8a:	0c 94 ab 02 	jmp	0x556	; 0x556 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Dio_init>:
		break;
	default:
		return ERROR;
	}
	return SUCCESS;
}
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	e0 e6       	ldi	r30, 0x60	; 96
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	2b e7       	ldi	r18, 0x7B	; 123
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	9f ef       	ldi	r25, 0xFF	; 255
  a0:	80 81       	ld	r24, Z
  a2:	81 11       	cpse	r24, r1
  a4:	10 c0       	rjmp	.+32     	; 0xc6 <Dio_init+0x34>
  a6:	c3 81       	ldd	r28, Z+3	; 0x03
  a8:	d4 81       	ldd	r29, Z+4	; 0x04
  aa:	18 82       	st	Y, r1
  ac:	81 81       	ldd	r24, Z+1	; 0x01
  ae:	81 11       	cpse	r24, r1
  b0:	04 c0       	rjmp	.+8      	; 0xba <Dio_init+0x28>
  b2:	a5 81       	ldd	r26, Z+5	; 0x05
  b4:	b6 81       	ldd	r27, Z+6	; 0x06
  b6:	9c 93       	st	X, r25
  b8:	0f c0       	rjmp	.+30     	; 0xd8 <Dio_init+0x46>
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	99 f4       	brne	.+38     	; 0xe4 <Dio_init+0x52>
  be:	a5 81       	ldd	r26, Z+5	; 0x05
  c0:	b6 81       	ldd	r27, Z+6	; 0x06
  c2:	1c 92       	st	X, r1
  c4:	09 c0       	rjmp	.+18     	; 0xd8 <Dio_init+0x46>
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	79 f4       	brne	.+30     	; 0xe8 <Dio_init+0x56>
  ca:	c3 81       	ldd	r28, Z+3	; 0x03
  cc:	d4 81       	ldd	r29, Z+4	; 0x04
  ce:	98 83       	st	Y, r25
  d0:	c5 81       	ldd	r28, Z+5	; 0x05
  d2:	d6 81       	ldd	r29, Z+6	; 0x06
  d4:	82 81       	ldd	r24, Z+2	; 0x02
  d6:	88 83       	st	Y, r24
  d8:	39 96       	adiw	r30, 0x09	; 9
  da:	e2 17       	cp	r30, r18
  dc:	f3 07       	cpc	r31, r19
  de:	01 f7       	brne	.-64     	; 0xa0 <Dio_init+0xe>
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	03 c0       	rjmp	.+6      	; 0xea <Dio_init+0x58>
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	01 c0       	rjmp	.+2      	; 0xea <Dio_init+0x58>
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <Dio_Write_pin>:
  f0:	88 30       	cpi	r24, 0x08	; 8
  f2:	08 f0       	brcs	.+2      	; 0xf6 <Dio_Write_pin+0x6>
  f4:	86 c0       	rjmp	.+268    	; 0x202 <Dio_Write_pin+0x112>
  f6:	61 30       	cpi	r22, 0x01	; 1
  f8:	39 f1       	breq	.+78     	; 0x148 <Dio_Write_pin+0x58>
  fa:	38 f0       	brcs	.+14     	; 0x10a <Dio_Write_pin+0x1a>
  fc:	62 30       	cpi	r22, 0x02	; 2
  fe:	09 f4       	brne	.+2      	; 0x102 <Dio_Write_pin+0x12>
 100:	42 c0       	rjmp	.+132    	; 0x186 <Dio_Write_pin+0x96>
 102:	63 30       	cpi	r22, 0x03	; 3
 104:	09 f4       	brne	.+2      	; 0x108 <Dio_Write_pin+0x18>
 106:	5e c0       	rjmp	.+188    	; 0x1c4 <Dio_Write_pin+0xd4>
 108:	7e c0       	rjmp	.+252    	; 0x206 <Dio_Write_pin+0x116>
 10a:	44 23       	and	r20, r20
 10c:	71 f0       	breq	.+28     	; 0x12a <Dio_Write_pin+0x3a>
 10e:	4b b3       	in	r20, 0x1b	; 27
 110:	21 e0       	ldi	r18, 0x01	; 1
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	b9 01       	movw	r22, r18
 116:	02 c0       	rjmp	.+4      	; 0x11c <Dio_Write_pin+0x2c>
 118:	66 0f       	add	r22, r22
 11a:	77 1f       	adc	r23, r23
 11c:	8a 95       	dec	r24
 11e:	e2 f7       	brpl	.-8      	; 0x118 <Dio_Write_pin+0x28>
 120:	cb 01       	movw	r24, r22
 122:	84 2b       	or	r24, r20
 124:	8b bb       	out	0x1b, r24	; 27
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	08 95       	ret
 12a:	4b b3       	in	r20, 0x1b	; 27
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	b9 01       	movw	r22, r18
 132:	02 c0       	rjmp	.+4      	; 0x138 <Dio_Write_pin+0x48>
 134:	66 0f       	add	r22, r22
 136:	77 1f       	adc	r23, r23
 138:	8a 95       	dec	r24
 13a:	e2 f7       	brpl	.-8      	; 0x134 <Dio_Write_pin+0x44>
 13c:	cb 01       	movw	r24, r22
 13e:	80 95       	com	r24
 140:	84 23       	and	r24, r20
 142:	8b bb       	out	0x1b, r24	; 27
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	08 95       	ret
 148:	44 23       	and	r20, r20
 14a:	71 f0       	breq	.+28     	; 0x168 <Dio_Write_pin+0x78>
 14c:	48 b3       	in	r20, 0x18	; 24
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	b9 01       	movw	r22, r18
 154:	02 c0       	rjmp	.+4      	; 0x15a <Dio_Write_pin+0x6a>
 156:	66 0f       	add	r22, r22
 158:	77 1f       	adc	r23, r23
 15a:	8a 95       	dec	r24
 15c:	e2 f7       	brpl	.-8      	; 0x156 <Dio_Write_pin+0x66>
 15e:	cb 01       	movw	r24, r22
 160:	84 2b       	or	r24, r20
 162:	88 bb       	out	0x18, r24	; 24
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	08 95       	ret
 168:	48 b3       	in	r20, 0x18	; 24
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	b9 01       	movw	r22, r18
 170:	02 c0       	rjmp	.+4      	; 0x176 <Dio_Write_pin+0x86>
 172:	66 0f       	add	r22, r22
 174:	77 1f       	adc	r23, r23
 176:	8a 95       	dec	r24
 178:	e2 f7       	brpl	.-8      	; 0x172 <Dio_Write_pin+0x82>
 17a:	cb 01       	movw	r24, r22
 17c:	80 95       	com	r24
 17e:	84 23       	and	r24, r20
 180:	88 bb       	out	0x18, r24	; 24
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	08 95       	ret
 186:	44 23       	and	r20, r20
 188:	71 f0       	breq	.+28     	; 0x1a6 <Dio_Write_pin+0xb6>
 18a:	45 b3       	in	r20, 0x15	; 21
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	b9 01       	movw	r22, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <Dio_Write_pin+0xa8>
 194:	66 0f       	add	r22, r22
 196:	77 1f       	adc	r23, r23
 198:	8a 95       	dec	r24
 19a:	e2 f7       	brpl	.-8      	; 0x194 <Dio_Write_pin+0xa4>
 19c:	cb 01       	movw	r24, r22
 19e:	84 2b       	or	r24, r20
 1a0:	85 bb       	out	0x15, r24	; 21
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	08 95       	ret
 1a6:	45 b3       	in	r20, 0x15	; 21
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	b9 01       	movw	r22, r18
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <Dio_Write_pin+0xc4>
 1b0:	66 0f       	add	r22, r22
 1b2:	77 1f       	adc	r23, r23
 1b4:	8a 95       	dec	r24
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <Dio_Write_pin+0xc0>
 1b8:	cb 01       	movw	r24, r22
 1ba:	80 95       	com	r24
 1bc:	84 23       	and	r24, r20
 1be:	85 bb       	out	0x15, r24	; 21
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	08 95       	ret
 1c4:	44 23       	and	r20, r20
 1c6:	71 f0       	breq	.+28     	; 0x1e4 <Dio_Write_pin+0xf4>
 1c8:	42 b3       	in	r20, 0x12	; 18
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	b9 01       	movw	r22, r18
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <Dio_Write_pin+0xe6>
 1d2:	66 0f       	add	r22, r22
 1d4:	77 1f       	adc	r23, r23
 1d6:	8a 95       	dec	r24
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <Dio_Write_pin+0xe2>
 1da:	cb 01       	movw	r24, r22
 1dc:	84 2b       	or	r24, r20
 1de:	82 bb       	out	0x12, r24	; 18
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	08 95       	ret
 1e4:	42 b3       	in	r20, 0x12	; 18
 1e6:	21 e0       	ldi	r18, 0x01	; 1
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	b9 01       	movw	r22, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <Dio_Write_pin+0x102>
 1ee:	66 0f       	add	r22, r22
 1f0:	77 1f       	adc	r23, r23
 1f2:	8a 95       	dec	r24
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <Dio_Write_pin+0xfe>
 1f6:	cb 01       	movw	r24, r22
 1f8:	80 95       	com	r24
 1fa:	84 23       	and	r24, r20
 1fc:	82 bb       	out	0x12, r24	; 18
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	08 95       	ret
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	08 95       	ret
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	08 95       	ret

0000020a <Dio_Write_numOfBits>:
/* change the value of number of bits in a specific port according to a mask (put ones on the desired pins)*/
bool Dio_Write_numOfBits(Port_t port_name, Data_t value, uint8 mask) {
	if (value < 0 || value > 255) {
		return ERROR;
	}
	switch (port_name) {
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	e1 f0       	breq	.+56     	; 0x246 <Dio_Write_numOfBits+0x3c>
 20e:	30 f0       	brcs	.+12     	; 0x21c <Dio_Write_numOfBits+0x12>
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	71 f1       	breq	.+92     	; 0x270 <Dio_Write_numOfBits+0x66>
 214:	83 30       	cpi	r24, 0x03	; 3
 216:	09 f4       	brne	.+2      	; 0x21a <Dio_Write_numOfBits+0x10>
 218:	40 c0       	rjmp	.+128    	; 0x29a <Dio_Write_numOfBits+0x90>
 21a:	54 c0       	rjmp	.+168    	; 0x2c4 <Dio_Write_numOfBits+0xba>
	case PORT_A:
		if (value == 1) {
 21c:	61 30       	cpi	r22, 0x01	; 1
 21e:	29 f4       	brne	.+10     	; 0x22a <Dio_Write_numOfBits+0x20>
			PORTA |= mask ;
 220:	6b b3       	in	r22, 0x1b	; 27
 222:	46 2b       	or	r20, r22
 224:	4b bb       	out	0x1b, r20	; 27
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	08 95       	ret
	}
	switch (port_name) {
	case PORT_A:
		if (value == 1) {
			PORTA |= mask ;
		} else if(value == 0) {
 22a:	61 11       	cpse	r22, r1
 22c:	06 c0       	rjmp	.+12     	; 0x23a <Dio_Write_numOfBits+0x30>
			PORTA &= ~mask;			
 22e:	8b b3       	in	r24, 0x1b	; 27
 230:	40 95       	com	r20
 232:	48 23       	and	r20, r24
 234:	4b bb       	out	0x1b, r20	; 27
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	08 95       	ret
		if (value == 1) {
			PORTA |= mask ;
		} else if(value == 0) {
			PORTA &= ~mask;			
		} else {
			PORTA |= value & mask;
 23a:	8b b3       	in	r24, 0x1b	; 27
 23c:	46 23       	and	r20, r22
 23e:	48 2b       	or	r20, r24
 240:	4b bb       	out	0x1b, r20	; 27
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	08 95       	ret
		} else {
			PORTA |= value & mask;
		}		
		break;
	case PORT_B:
		if (value == 1) {
 246:	61 30       	cpi	r22, 0x01	; 1
 248:	29 f4       	brne	.+10     	; 0x254 <Dio_Write_numOfBits+0x4a>
			PORTB |= mask ;
 24a:	68 b3       	in	r22, 0x18	; 24
 24c:	46 2b       	or	r20, r22
 24e:	48 bb       	out	0x18, r20	; 24
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	08 95       	ret
		}		
		break;
	case PORT_B:
		if (value == 1) {
			PORTB |= mask ;
			} else if(value == 0) {
 254:	61 11       	cpse	r22, r1
 256:	06 c0       	rjmp	.+12     	; 0x264 <Dio_Write_numOfBits+0x5a>
			PORTB &= ~mask;
 258:	88 b3       	in	r24, 0x18	; 24
 25a:	40 95       	com	r20
 25c:	48 23       	and	r20, r24
 25e:	48 bb       	out	0x18, r20	; 24
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	08 95       	ret
		if (value == 1) {
			PORTB |= mask ;
			} else if(value == 0) {
			PORTB &= ~mask;
			} else {
			PORTB |= value & mask;
 264:	88 b3       	in	r24, 0x18	; 24
 266:	46 23       	and	r20, r22
 268:	48 2b       	or	r20, r24
 26a:	48 bb       	out	0x18, r20	; 24
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	08 95       	ret
			} else {
			PORTB |= value & mask;
		}
		break;
	case PORT_C:
		if (value == 1) {
 270:	61 30       	cpi	r22, 0x01	; 1
 272:	29 f4       	brne	.+10     	; 0x27e <Dio_Write_numOfBits+0x74>
			PORTC |= mask ;
 274:	65 b3       	in	r22, 0x15	; 21
 276:	46 2b       	or	r20, r22
 278:	45 bb       	out	0x15, r20	; 21
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	08 95       	ret
		}
		break;
	case PORT_C:
		if (value == 1) {
			PORTC |= mask ;
			} else if(value == 0) {
 27e:	61 11       	cpse	r22, r1
 280:	06 c0       	rjmp	.+12     	; 0x28e <Dio_Write_numOfBits+0x84>
			PORTC &= ~mask;
 282:	85 b3       	in	r24, 0x15	; 21
 284:	40 95       	com	r20
 286:	48 23       	and	r20, r24
 288:	45 bb       	out	0x15, r20	; 21
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	08 95       	ret
		if (value == 1) {
			PORTC |= mask ;
			} else if(value == 0) {
			PORTC &= ~mask;
			} else {
			PORTC |= value & mask;
 28e:	85 b3       	in	r24, 0x15	; 21
 290:	46 23       	and	r20, r22
 292:	48 2b       	or	r20, r24
 294:	45 bb       	out	0x15, r20	; 21
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	08 95       	ret
			} else {
			PORTC |= value & mask;
		}
		break;
	case PORT_D:
		if (value == 1) {
 29a:	61 30       	cpi	r22, 0x01	; 1
 29c:	29 f4       	brne	.+10     	; 0x2a8 <Dio_Write_numOfBits+0x9e>
			PORTD |= mask ;
 29e:	62 b3       	in	r22, 0x12	; 18
 2a0:	46 2b       	or	r20, r22
 2a2:	42 bb       	out	0x12, r20	; 18
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	08 95       	ret
		}
		break;
	case PORT_D:
		if (value == 1) {
			PORTD |= mask ;
			} else if(value == 0) {
 2a8:	61 11       	cpse	r22, r1
 2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <Dio_Write_numOfBits+0xae>
			PORTD &= ~mask;
 2ac:	82 b3       	in	r24, 0x12	; 18
 2ae:	40 95       	com	r20
 2b0:	48 23       	and	r20, r24
 2b2:	42 bb       	out	0x12, r20	; 18
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	08 95       	ret
		if (value == 1) {
			PORTD |= mask ;
			} else if(value == 0) {
			PORTD &= ~mask;
			} else {
			PORTD |= value & mask;
 2b8:	82 b3       	in	r24, 0x12	; 18
 2ba:	46 23       	and	r20, r22
 2bc:	48 2b       	or	r20, r24
 2be:	42 bb       	out	0x12, r20	; 18
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	08 95       	ret
			} else {
			PORTD |= value & mask;
		}
		break;
	default:
		return ERROR;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return SUCCESS;
 2c6:	08 95       	ret

000002c8 <I2C_BitRate>:
	CLR_BIT(TWCR, 5);
}

void I2C_ACK(void)
{
	SET_BIT(TWCR, 6);
 2c8:	82 e0       	ldi	r24, 0x02	; 2
 2ca:	80 b9       	out	0x00, r24	; 0
 2cc:	08 95       	ret

000002ce <I2C_StartBit>:
 2ce:	86 b7       	in	r24, 0x36	; 54
 2d0:	80 62       	ori	r24, 0x20	; 32
 2d2:	86 bf       	out	0x36, r24	; 54
 2d4:	08 95       	ret

000002d6 <I2C_ClearFlagAndEnable>:
 2d6:	86 b7       	in	r24, 0x36	; 54
 2d8:	84 60       	ori	r24, 0x04	; 4
 2da:	86 bf       	out	0x36, r24	; 54
 2dc:	86 b7       	in	r24, 0x36	; 54
 2de:	80 68       	ori	r24, 0x80	; 128
 2e0:	86 bf       	out	0x36, r24	; 54
 2e2:	08 95       	ret

000002e4 <I2C_WaitForTheFlagToBeSet>:
 2e4:	06 b6       	in	r0, 0x36	; 54
 2e6:	07 fe       	sbrs	r0, 7
 2e8:	fd cf       	rjmp	.-6      	; 0x2e4 <I2C_WaitForTheFlagToBeSet>
 2ea:	08 95       	ret

000002ec <I2C_CheckStatusCode>:
 2ec:	21 b1       	in	r18, 0x01	; 1
 2ee:	28 7f       	andi	r18, 0xF8	; 248
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	28 17       	cp	r18, r24
 2f6:	39 07       	cpc	r19, r25
 2f8:	59 f4       	brne	.+22     	; 0x310 <I2C_CheckStatusCode+0x24>
 2fa:	2b b3       	in	r18, 0x1b	; 27
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	02 c0       	rjmp	.+4      	; 0x306 <I2C_CheckStatusCode+0x1a>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	6a 95       	dec	r22
 308:	e2 f7       	brpl	.-8      	; 0x302 <I2C_CheckStatusCode+0x16>
 30a:	82 2b       	or	r24, r18
 30c:	8b bb       	out	0x1b, r24	; 27
 30e:	08 95       	ret
 310:	28 b3       	in	r18, 0x18	; 24
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	02 c0       	rjmp	.+4      	; 0x31c <I2C_CheckStatusCode+0x30>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	6a 95       	dec	r22
 31e:	e2 f7       	brpl	.-8      	; 0x318 <I2C_CheckStatusCode+0x2c>
 320:	82 2b       	or	r24, r18
 322:	88 bb       	out	0x18, r24	; 24
 324:	08 95       	ret

00000326 <I2C_SetSlaveAddress>:
 326:	83 b9       	out	0x03, r24	; 3
 328:	08 95       	ret

0000032a <I2C_ClearStartBit>:
 32a:	86 b7       	in	r24, 0x36	; 54
 32c:	8f 7d       	andi	r24, 0xDF	; 223
 32e:	86 bf       	out	0x36, r24	; 54
 330:	08 95       	ret

00000332 <I2C_NACK>:
}

void I2C_NACK(void)
{
	CLR_BIT(TWCR, 6);
 332:	86 b7       	in	r24, 0x36	; 54
 334:	8f 7b       	andi	r24, 0xBF	; 191
 336:	86 bf       	out	0x36, r24	; 54
 338:	08 95       	ret

0000033a <I2C_StopBit>:
}

void I2C_StopBit(void)
{
	SET_BIT(TWCR, 4);
 33a:	86 b7       	in	r24, 0x36	; 54
 33c:	80 61       	ori	r24, 0x10	; 16
 33e:	86 bf       	out	0x36, r24	; 54
 340:	08 95       	ret

00000342 <EnPulse>:
	default:
		return ERROR;
		break;					
	}
	return SUCCESS;
}
 342:	41 e0       	ldi	r20, 0x01	; 1
 344:	61 e0       	ldi	r22, 0x01	; 1
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	0e 94 78 00 	call	0xf0	; 0xf0 <Dio_Write_pin>
 34c:	98 2f       	mov	r25, r24
 34e:	81 30       	cpi	r24, 0x01	; 1
 350:	51 f0       	breq	.+20     	; 0x366 <EnPulse+0x24>
 352:	00 00       	nop
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	0e 94 78 00 	call	0xf0	; 0xf0 <Dio_Write_pin>
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	09 f0       	breq	.+2      	; 0x366 <EnPulse+0x24>
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	89 2f       	mov	r24, r25
 368:	08 95       	ret

0000036a <Lcd_Write_4>:
 36a:	cf 93       	push	r28
 36c:	c8 2f       	mov	r28, r24
 36e:	40 ef       	ldi	r20, 0xF0	; 240
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	0e 94 05 01 	call	0x20a	; 0x20a <Dio_Write_numOfBits>
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	41 f1       	breq	.+80     	; 0x3cc <Lcd_Write_4+0x62>
 37c:	40 ef       	ldi	r20, 0xF0	; 240
 37e:	6c 2f       	mov	r22, r28
 380:	60 7f       	andi	r22, 0xF0	; 240
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	0e 94 05 01 	call	0x20a	; 0x20a <Dio_Write_numOfBits>
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	01 f1       	breq	.+64     	; 0x3cc <Lcd_Write_4+0x62>
 38c:	0e 94 a1 01 	call	0x342	; 0x342 <EnPulse>
 390:	81 30       	cpi	r24, 0x01	; 1
 392:	e1 f0       	breq	.+56     	; 0x3cc <Lcd_Write_4+0x62>
 394:	40 ef       	ldi	r20, 0xF0	; 240
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	0e 94 05 01 	call	0x20a	; 0x20a <Dio_Write_numOfBits>
 39e:	81 30       	cpi	r24, 0x01	; 1
 3a0:	a9 f0       	breq	.+42     	; 0x3cc <Lcd_Write_4+0x62>
 3a2:	80 e1       	ldi	r24, 0x10	; 16
 3a4:	c8 9f       	mul	r28, r24
 3a6:	b0 01       	movw	r22, r0
 3a8:	11 24       	eor	r1, r1
 3aa:	40 ef       	ldi	r20, 0xF0	; 240
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	0e 94 05 01 	call	0x20a	; 0x20a <Dio_Write_numOfBits>
 3b2:	81 30       	cpi	r24, 0x01	; 1
 3b4:	59 f0       	breq	.+22     	; 0x3cc <Lcd_Write_4+0x62>
 3b6:	0e 94 a1 01 	call	0x342	; 0x342 <EnPulse>
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	39 f0       	breq	.+14     	; 0x3cc <Lcd_Write_4+0x62>
 3be:	83 ef       	ldi	r24, 0xF3	; 243
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <Lcd_Write_4+0x58>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <Lcd_Write_4+0x5e>
 3c8:	00 00       	nop
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret

000003d0 <Lcd_Cmd>:
 3d0:	cf 93       	push	r28
 3d2:	c8 2f       	mov	r28, r24
 3d4:	40 e0       	ldi	r20, 0x00	; 0
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	0e 94 78 00 	call	0xf0	; 0xf0 <Dio_Write_pin>
 3de:	98 2f       	mov	r25, r24
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	39 f0       	breq	.+14     	; 0x3f2 <Lcd_Cmd+0x22>
 3e4:	8c 2f       	mov	r24, r28
 3e6:	0e 94 b5 01 	call	0x36a	; 0x36a <Lcd_Write_4>
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	81 30       	cpi	r24, 0x01	; 1
 3ee:	09 f0       	breq	.+2      	; 0x3f2 <Lcd_Cmd+0x22>
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	89 2f       	mov	r24, r25
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <Lcd_Init>:
 3f8:	85 ea       	ldi	r24, 0xA5	; 165
 3fa:	9e e0       	ldi	r25, 0x0E	; 14
 3fc:	01 97       	sbiw	r24, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <Lcd_Init+0x4>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 402:	00 00       	nop
 404:	80 e3       	ldi	r24, 0x30	; 48
 406:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Lcd_Cmd>
 40a:	98 2f       	mov	r25, r24
 40c:	81 30       	cpi	r24, 0x01	; 1
 40e:	21 f1       	breq	.+72     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 410:	80 e2       	ldi	r24, 0x20	; 32
 412:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Lcd_Cmd>
 416:	98 2f       	mov	r25, r24
 418:	81 30       	cpi	r24, 0x01	; 1
 41a:	f1 f0       	breq	.+60     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 41c:	0e 94 a1 01 	call	0x342	; 0x342 <EnPulse>
 420:	98 2f       	mov	r25, r24
 422:	81 30       	cpi	r24, 0x01	; 1
 424:	c9 f0       	breq	.+50     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 426:	88 e2       	ldi	r24, 0x28	; 40
 428:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Lcd_Cmd>
 42c:	98 2f       	mov	r25, r24
 42e:	81 30       	cpi	r24, 0x01	; 1
 430:	99 f0       	breq	.+38     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 432:	8f e0       	ldi	r24, 0x0F	; 15
 434:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Lcd_Cmd>
 438:	98 2f       	mov	r25, r24
 43a:	81 30       	cpi	r24, 0x01	; 1
 43c:	69 f0       	breq	.+26     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Lcd_Cmd>
 444:	98 2f       	mov	r25, r24
 446:	81 30       	cpi	r24, 0x01	; 1
 448:	39 f0       	breq	.+14     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 44a:	86 e0       	ldi	r24, 0x06	; 6
 44c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Lcd_Cmd>
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	81 30       	cpi	r24, 0x01	; 1
 454:	09 f0       	breq	.+2      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	89 2f       	mov	r24, r25
 45a:	08 95       	ret

0000045c <Lcd_Out>:


extern bool Lcd_Out(uint8 *str) {
 45c:	0f 93       	push	r16
 45e:	1f 93       	push	r17
 460:	cf 93       	push	r28
	while (*str != '\0') {
 462:	fc 01       	movw	r30, r24
 464:	c0 81       	ld	r28, Z
 466:	cc 23       	and	r28, r28
 468:	b1 f0       	breq	.+44     	; 0x496 <Lcd_Out+0x3a>
 46a:	8c 01       	movw	r16, r24
 46c:	0f 5f       	subi	r16, 0xFF	; 255
 46e:	1f 4f       	sbci	r17, 0xFF	; 255
	return SUCCESS;
}

static bool Lcd_Data(uint8 data) {
	// Set RS pin
	if (Dio_Write_pin(RS, LCD_CtrPort, 1) == ERROR) {
 470:	41 e0       	ldi	r20, 0x01	; 1
 472:	61 e0       	ldi	r22, 0x01	; 1
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	0e 94 78 00 	call	0xf0	; 0xf0 <Dio_Write_pin>
 47a:	81 30       	cpi	r24, 0x01	; 1
 47c:	69 f0       	breq	.+26     	; 0x498 <Lcd_Out+0x3c>
		return ERROR;
	}
	#ifdef LCD_MODE_FOUR_BIT
	if (Lcd_Write_4(data) == ERROR) {
 47e:	8c 2f       	mov	r24, r28
 480:	0e 94 b5 01 	call	0x36a	; 0x36a <Lcd_Write_4>
}


extern bool Lcd_Out(uint8 *str) {
	while (*str != '\0') {
		if (Lcd_Data(*str) == ERROR) {
 484:	81 30       	cpi	r24, 0x01	; 1
 486:	41 f0       	breq	.+16     	; 0x498 <Lcd_Out+0x3c>
	return SUCCESS;
}


extern bool Lcd_Out(uint8 *str) {
	while (*str != '\0') {
 488:	f8 01       	movw	r30, r16
 48a:	c1 91       	ld	r28, Z+
 48c:	8f 01       	movw	r16, r30
 48e:	c1 11       	cpse	r28, r1
 490:	ef cf       	rjmp	.-34     	; 0x470 <Lcd_Out+0x14>
		if (Lcd_Data(*str) == ERROR) {
			return ERROR;
		}
		str++;
	}
	return SUCCESS;	
 492:	8c 2f       	mov	r24, r28
 494:	01 c0       	rjmp	.+2      	; 0x498 <Lcd_Out+0x3c>
 496:	8c 2f       	mov	r24, r28
}
 498:	cf 91       	pop	r28
 49a:	1f 91       	pop	r17
 49c:	0f 91       	pop	r16
 49e:	08 95       	ret

000004a0 <main>:
#include "I2C.h"



int main(void)
{
 4a0:	cf 93       	push	r28
 4a2:	df 93       	push	r29
 4a4:	00 d0       	rcall	.+0      	; 0x4a6 <main+0x6>
 4a6:	cd b7       	in	r28, 0x3d	; 61
 4a8:	de b7       	in	r29, 0x3e	; 62
	uint8 data_write = 6;
	uint8 data_read = 0;
	uint8 output[2] = {'\0'};
 4aa:	1a 82       	std	Y+2, r1	; 0x02
 4ac:	19 82       	std	Y+1, r1	; 0x01
		
	Dio_init();	
 4ae:	0e 94 49 00 	call	0x92	; 0x92 <Dio_init>
	Lcd_Init();
 4b2:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <Lcd_Init>
	I2C_BitRate();
 4b6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <I2C_BitRate>
	I2C_StartBit();
 4ba:	0e 94 67 01 	call	0x2ce	; 0x2ce <I2C_StartBit>
	I2C_ClearFlagAndEnable();	
 4be:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <I2C_ClearFlagAndEnable>
	I2C_WaitForTheFlagToBeSet();
 4c2:	0e 94 72 01 	call	0x2e4	; 0x2e4 <I2C_WaitForTheFlagToBeSet>
	I2C_CheckStatusCode(0x08, 0);
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	88 e0       	ldi	r24, 0x08	; 8
 4ca:	0e 94 76 01 	call	0x2ec	; 0x2ec <I2C_CheckStatusCode>
	// send slave address and write
	I2C_SetSlaveAddress(0b00110010);
 4ce:	82 e3       	ldi	r24, 0x32	; 50
 4d0:	0e 94 93 01 	call	0x326	; 0x326 <I2C_SetSlaveAddress>
	I2C_ClearStartBit();
 4d4:	0e 94 95 01 	call	0x32a	; 0x32a <I2C_ClearStartBit>
	I2C_ClearFlagAndEnable();
 4d8:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <I2C_ClearFlagAndEnable>
    I2C_WaitForTheFlagToBeSet();
 4dc:	0e 94 72 01 	call	0x2e4	; 0x2e4 <I2C_WaitForTheFlagToBeSet>
	I2C_CheckStatusCode(0x18, 1);
 4e0:	61 e0       	ldi	r22, 0x01	; 1
 4e2:	88 e1       	ldi	r24, 0x18	; 24
 4e4:	0e 94 76 01 	call	0x2ec	; 0x2ec <I2C_CheckStatusCode>
	// flag set so the clock is disabled
	// send data
	TWDR = data_write;
 4e8:	86 e0       	ldi	r24, 0x06	; 6
 4ea:	83 b9       	out	0x03, r24	; 3
	I2C_ClearFlagAndEnable();
 4ec:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <I2C_ClearFlagAndEnable>
	I2C_WaitForTheFlagToBeSet();
 4f0:	0e 94 72 01 	call	0x2e4	; 0x2e4 <I2C_WaitForTheFlagToBeSet>
	I2C_CheckStatusCode(0x28, 2);		
 4f4:	62 e0       	ldi	r22, 0x02	; 2
 4f6:	88 e2       	ldi	r24, 0x28	; 40
 4f8:	0e 94 76 01 	call	0x2ec	; 0x2ec <I2C_CheckStatusCode>
	// send repeated start
	I2C_StartBit();
 4fc:	0e 94 67 01 	call	0x2ce	; 0x2ce <I2C_StartBit>
	I2C_ClearFlagAndEnable();
 500:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <I2C_ClearFlagAndEnable>
	I2C_WaitForTheFlagToBeSet();
 504:	0e 94 72 01 	call	0x2e4	; 0x2e4 <I2C_WaitForTheFlagToBeSet>
	I2C_CheckStatusCode(0x10, 3);
 508:	63 e0       	ldi	r22, 0x03	; 3
 50a:	80 e1       	ldi	r24, 0x10	; 16
 50c:	0e 94 76 01 	call	0x2ec	; 0x2ec <I2C_CheckStatusCode>
	// send slave address and read
	I2C_SetSlaveAddress(0b00110011);
 510:	83 e3       	ldi	r24, 0x33	; 51
 512:	0e 94 93 01 	call	0x326	; 0x326 <I2C_SetSlaveAddress>
	I2C_ClearStartBit();
 516:	0e 94 95 01 	call	0x32a	; 0x32a <I2C_ClearStartBit>
	I2C_ClearFlagAndEnable();
 51a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <I2C_ClearFlagAndEnable>
	I2C_WaitForTheFlagToBeSet();
 51e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <I2C_WaitForTheFlagToBeSet>
	I2C_CheckStatusCode(0x40, 4);
 522:	64 e0       	ldi	r22, 0x04	; 4
 524:	80 e4       	ldi	r24, 0x40	; 64
 526:	0e 94 76 01 	call	0x2ec	; 0x2ec <I2C_CheckStatusCode>
	// send NACK
	I2C_NACK();
 52a:	0e 94 99 01 	call	0x332	; 0x332 <I2C_NACK>
	I2C_ClearFlagAndEnable();
 52e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <I2C_ClearFlagAndEnable>
	I2C_WaitForTheFlagToBeSet();
 532:	0e 94 72 01 	call	0x2e4	; 0x2e4 <I2C_WaitForTheFlagToBeSet>
	I2C_CheckStatusCode(0x58, 5);	
 536:	65 e0       	ldi	r22, 0x05	; 5
 538:	88 e5       	ldi	r24, 0x58	; 88
 53a:	0e 94 76 01 	call	0x2ec	; 0x2ec <I2C_CheckStatusCode>
	data_read = TWDR;			
 53e:	13 b1       	in	r17, 0x03	; 3
	// Stop bit
	I2C_StopBit();
 540:	0e 94 9d 01 	call	0x33a	; 0x33a <I2C_StopBit>
	I2C_ClearFlagAndEnable();
 544:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <I2C_ClearFlagAndEnable>
	output[0] = data_read + 48;	
 548:	10 5d       	subi	r17, 0xD0	; 208
 54a:	19 83       	std	Y+1, r17	; 0x01
	Lcd_Out(output);
 54c:	ce 01       	movw	r24, r28
 54e:	01 96       	adiw	r24, 0x01	; 1
 550:	0e 94 2e 02 	call	0x45c	; 0x45c <Lcd_Out>
 554:	ff cf       	rjmp	.-2      	; 0x554 <main+0xb4>

00000556 <_exit>:
 556:	f8 94       	cli

00000558 <__stop_program>:
 558:	ff cf       	rjmp	.-2      	; 0x558 <__stop_program>
