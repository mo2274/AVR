
I2C_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000001ea  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000096e  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000648  00000000  00000000  00000caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000041b  00000000  00000000  000012f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001710  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003be  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000028e  00000000  00000000  00001b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001e2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ce 00 	call	0x19c	; 0x19c <main>
  7a:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <I2C_Error>:
	SET_BIT(TWCR, 4);
}

void I2C_StopBit_Disable()
{
	CLR_BIT(TWCR, 4);
  82:	91 e0       	ldi	r25, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <I2C_Error+0x6>
  86:	99 0f       	add	r25, r25
  88:	8a 95       	dec	r24
  8a:	ea f7       	brpl	.-6      	; 0x86 <I2C_Error+0x4>
  8c:	8b b3       	in	r24, 0x1b	; 27
  8e:	89 27       	eor	r24, r25
  90:	8b bb       	out	0x1b, r24	; 27
  92:	2f e9       	ldi	r18, 0x9F	; 159
  94:	36 e8       	ldi	r19, 0x86	; 134
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	30 40       	sbci	r19, 0x00	; 0
  9c:	80 40       	sbci	r24, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <I2C_Error+0x16>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <I2C_Error+0x20>
  a2:	00 00       	nop
  a4:	f3 cf       	rjmp	.-26     	; 0x8c <I2C_Error+0xa>

000000a6 <I2C_Check_StatusCode>:
  a6:	21 b1       	in	r18, 0x01	; 1
  a8:	28 7f       	andi	r18, 0xF8	; 248
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	28 17       	cp	r18, r24
  b0:	39 07       	cpc	r19, r25
  b2:	19 f0       	breq	.+6      	; 0xba <I2C_Check_StatusCode+0x14>
  b4:	86 2f       	mov	r24, r22
  b6:	0e 94 41 00 	call	0x82	; 0x82 <I2C_Error>
  ba:	08 95       	ret

000000bc <I2C_Clear_INT_AndEnable>:
  bc:	86 b7       	in	r24, 0x36	; 54
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	86 bf       	out	0x36, r24	; 54
  c2:	86 b7       	in	r24, 0x36	; 54
  c4:	84 60       	ori	r24, 0x04	; 4
  c6:	86 bf       	out	0x36, r24	; 54
  c8:	08 95       	ret

000000ca <I2C_StartBit>:
  ca:	86 b7       	in	r24, 0x36	; 54
  cc:	80 62       	ori	r24, 0x20	; 32
  ce:	86 bf       	out	0x36, r24	; 54
  d0:	08 95       	ret

000000d2 <I2C_Wait_Until_Flag_Set>:
  d2:	06 b6       	in	r0, 0x36	; 54
  d4:	07 fe       	sbrs	r0, 7
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <I2C_Wait_Until_Flag_Set>
  d8:	08 95       	ret

000000da <I2C_StopBit>:
  da:	86 b7       	in	r24, 0x36	; 54
  dc:	80 61       	ori	r24, 0x10	; 16
  de:	86 bf       	out	0x36, r24	; 54
  e0:	08 95       	ret

000000e2 <I2C_Tx>:
    while (1); 
  
}


void I2C_Tx(uint8_t data, uint8_t address) {
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	c8 2f       	mov	r28, r24
  e8:	d6 2f       	mov	r29, r22
	/*---------- start bit --------*/
	TWDR = 0x00;
  ea:	13 b8       	out	0x03, r1	; 3
	TWCR = 0x00;
  ec:	16 be       	out	0x36, r1	; 54
	I2C_StartBit();
  ee:	0e 94 65 00 	call	0xca	; 0xca <I2C_StartBit>
	I2C_Clear_INT_AndEnable();
  f2:	0e 94 5e 00 	call	0xbc	; 0xbc <I2C_Clear_INT_AndEnable>
	I2C_Wait_Until_Flag_Set();
  f6:	0e 94 69 00 	call	0xd2	; 0xd2 <I2C_Wait_Until_Flag_Set>
	I2C_Check_StatusCode(0x08, 0);
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	88 e0       	ldi	r24, 0x08	; 8
  fe:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Check_StatusCode>
	/*-------- SLA + W---------*/
	TWDR = address;
 102:	d3 b9       	out	0x03, r29	; 3
	// clear the start bit
	CLR_BIT(TWCR, 5);
 104:	86 b7       	in	r24, 0x36	; 54
 106:	8f 7d       	andi	r24, 0xDF	; 223
 108:	86 bf       	out	0x36, r24	; 54
	I2C_Clear_INT_AndEnable();
 10a:	0e 94 5e 00 	call	0xbc	; 0xbc <I2C_Clear_INT_AndEnable>
	I2C_Wait_Until_Flag_Set();
 10e:	0e 94 69 00 	call	0xd2	; 0xd2 <I2C_Wait_Until_Flag_Set>
	I2C_Check_StatusCode(0x18, 1);
 112:	61 e0       	ldi	r22, 0x01	; 1
 114:	88 e1       	ldi	r24, 0x18	; 24
 116:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Check_StatusCode>
	// write data
	TWDR = data;
 11a:	c3 b9       	out	0x03, r28	; 3
	I2C_Clear_INT_AndEnable();
 11c:	0e 94 5e 00 	call	0xbc	; 0xbc <I2C_Clear_INT_AndEnable>
	I2C_Wait_Until_Flag_Set();
 120:	0e 94 69 00 	call	0xd2	; 0xd2 <I2C_Wait_Until_Flag_Set>
	I2C_Check_StatusCode(0x28, 2);
 124:	62 e0       	ldi	r22, 0x02	; 2
 126:	88 e2       	ldi	r24, 0x28	; 40
 128:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Check_StatusCode>
	// stop bit
	I2C_StopBit();	
 12c:	0e 94 6d 00 	call	0xda	; 0xda <I2C_StopBit>
}
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <I2C_send_string>:


void I2C_send_string(uint8_t* data, uint8_t address) {
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	ec 01       	movw	r28, r24
 13e:	16 2f       	mov	r17, r22
	/*---------- start bit --------*/
	TWDR = 0x00;
 140:	13 b8       	out	0x03, r1	; 3
	TWCR = 0x00;
 142:	16 be       	out	0x36, r1	; 54
	I2C_StartBit();
 144:	0e 94 65 00 	call	0xca	; 0xca <I2C_StartBit>
	I2C_Clear_INT_AndEnable();
 148:	0e 94 5e 00 	call	0xbc	; 0xbc <I2C_Clear_INT_AndEnable>
	I2C_Wait_Until_Flag_Set();
 14c:	0e 94 69 00 	call	0xd2	; 0xd2 <I2C_Wait_Until_Flag_Set>
	I2C_Check_StatusCode(0x08, 0);
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	88 e0       	ldi	r24, 0x08	; 8
 154:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Check_StatusCode>
	/*-------- SLA + W---------*/
	TWDR = address;
 158:	13 b9       	out	0x03, r17	; 3
	// clear the start bit
	CLR_BIT(TWCR, 5);
 15a:	86 b7       	in	r24, 0x36	; 54
 15c:	8f 7d       	andi	r24, 0xDF	; 223
 15e:	86 bf       	out	0x36, r24	; 54
	I2C_Clear_INT_AndEnable();
 160:	0e 94 5e 00 	call	0xbc	; 0xbc <I2C_Clear_INT_AndEnable>
	I2C_Wait_Until_Flag_Set();
 164:	0e 94 69 00 	call	0xd2	; 0xd2 <I2C_Wait_Until_Flag_Set>
	I2C_Check_StatusCode(0x18, 1);
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	88 e1       	ldi	r24, 0x18	; 24
 16c:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Check_StatusCode>
	// write data
	while (*data != '\0') {
 170:	98 81       	ld	r25, Y
 172:	99 23       	and	r25, r25
 174:	69 f0       	breq	.+26     	; 0x190 <I2C_send_string+0x5a>
 176:	21 96       	adiw	r28, 0x01	; 1
		TWDR = *data;
 178:	93 b9       	out	0x03, r25	; 3
		I2C_Clear_INT_AndEnable();
 17a:	0e 94 5e 00 	call	0xbc	; 0xbc <I2C_Clear_INT_AndEnable>
		I2C_Wait_Until_Flag_Set();
 17e:	0e 94 69 00 	call	0xd2	; 0xd2 <I2C_Wait_Until_Flag_Set>
		I2C_Check_StatusCode(0x28, 2);
 182:	62 e0       	ldi	r22, 0x02	; 2
 184:	88 e2       	ldi	r24, 0x28	; 40
 186:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Check_StatusCode>
	CLR_BIT(TWCR, 5);
	I2C_Clear_INT_AndEnable();
	I2C_Wait_Until_Flag_Set();
	I2C_Check_StatusCode(0x18, 1);
	// write data
	while (*data != '\0') {
 18a:	99 91       	ld	r25, Y+
 18c:	91 11       	cpse	r25, r1
 18e:	f4 cf       	rjmp	.-24     	; 0x178 <I2C_send_string+0x42>
		I2C_Wait_Until_Flag_Set();
		I2C_Check_StatusCode(0x28, 2);
		data++;
	}
	// stop bit
	I2C_StopBit();
 190:	0e 94 6d 00 	call	0xda	; 0xda <I2C_StopBit>
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	08 95       	ret

0000019c <main>:
void I2C_Tx(uint8_t data, uint8_t address);
void I2C_send_string(uint8_t* data, uint8_t address);

int main(void)
{
	DDRA = 0xFF;
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	8a bb       	out	0x1a, r24	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a0:	85 e4       	ldi	r24, 0x45	; 69
 1a2:	9e e1       	ldi	r25, 0x1E	; 30
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <main+0x8>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0xe>
 1aa:	00 00       	nop
	_delay_ms(31);
	// bit rate 50k
	TWBR = 2;
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	80 b9       	out	0x00, r24	; 0


	I2C_Tx('m', 100); 
 1b0:	64 e6       	ldi	r22, 0x64	; 100
 1b2:	8d e6       	ldi	r24, 0x6D	; 109
 1b4:	0e 94 71 00 	call	0xe2	; 0xe2 <I2C_Tx>
 1b8:	83 ec       	ldi	r24, 0xC3	; 195
 1ba:	99 e0       	ldi	r25, 0x09	; 9
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <main+0x20>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x26>
 1c2:	00 00       	nop
	_delay_ms(10);
	I2C_send_string((uint8_t*)"d", 200); 
 1c4:	68 ec       	ldi	r22, 0xC8	; 200
 1c6:	86 e6       	ldi	r24, 0x66	; 102
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 9b 00 	call	0x136	; 0x136 <I2C_send_string>
 1ce:	8b e5       	ldi	r24, 0x5B	; 91
 1d0:	94 e4       	ldi	r25, 0x44	; 68
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <main+0x36>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <main+0x3c>
 1d8:	00 00       	nop
	_delay_ms(70);
	I2C_send_string((uint8_t*)"mohamed", 200);	
 1da:	68 ec       	ldi	r22, 0xC8	; 200
 1dc:	80 e6       	ldi	r24, 0x60	; 96
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 9b 00 	call	0x136	; 0x136 <I2C_send_string>
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <main+0x48>

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
