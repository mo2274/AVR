
I2C_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000001b6  0000022a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d4f  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e7  00000000  00000000  00001093  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007b5  00000000  00000000  0000187a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00002030  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000050b  00000000  00000000  00002104  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c72  00000000  00000000  0000260f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00003281  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 eb       	ldi	r30, 0xB6	; 182
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b7 00 	call	0x16e	; 0x16e <main>
  7a:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Dio_init>:
#include "Dio.h"

extern Dio_Config_t Dio_configuration;
	
/* initialization function */	
bool Dio_init(void) {	
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	e0 e6       	ldi	r30, 0x60	; 96
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	2b e7       	ldi	r18, 0x7B	; 123
  8c:	30 e0       	ldi	r19, 0x00	; 0
				} else {
				status = ERROR;
				return status;
			}
			} else if (Dio_configuration.port_config[i].direction == OUTPUT) {
			*(Dio_configuration.port_config[i].ddr) = 0xFF;
  8e:	9f ef       	ldi	r25, 0xFF	; 255
			return status;
		}
	}
	/* configuration of ports */
	for (int i = 0; i < NUM_OF_PORTS; i++) {
		if (Dio_configuration.port_config[i].direction == INPUT) {
  90:	80 81       	ld	r24, Z
  92:	81 11       	cpse	r24, r1
  94:	10 c0       	rjmp	.+32     	; 0xb6 <Dio_init+0x34>
			*(Dio_configuration.port_config[i].ddr) = 0x00;
  96:	c3 81       	ldd	r28, Z+3	; 0x03
  98:	d4 81       	ldd	r29, Z+4	; 0x04
  9a:	18 82       	st	Y, r1
			if (Dio_configuration.port_config[i].pull_up == PULL_UP) {
  9c:	81 81       	ldd	r24, Z+1	; 0x01
  9e:	81 11       	cpse	r24, r1
  a0:	04 c0       	rjmp	.+8      	; 0xaa <Dio_init+0x28>
				*(Dio_configuration.port_config[i].port) = 0xFF;
  a2:	a5 81       	ldd	r26, Z+5	; 0x05
  a4:	b6 81       	ldd	r27, Z+6	; 0x06
  a6:	9c 93       	st	X, r25
  a8:	0f c0       	rjmp	.+30     	; 0xc8 <Dio_init+0x46>
				} else if (Dio_configuration.port_config[i].pull_up == NO_PULL_UP) {
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	99 f4       	brne	.+38     	; 0xd4 <Dio_init+0x52>
				*(Dio_configuration.port_config[i].port) = 0x00;
  ae:	a5 81       	ldd	r26, Z+5	; 0x05
  b0:	b6 81       	ldd	r27, Z+6	; 0x06
  b2:	1c 92       	st	X, r1
  b4:	09 c0       	rjmp	.+18     	; 0xc8 <Dio_init+0x46>
				} else {
				status = ERROR;
				return status;
			}
			} else if (Dio_configuration.port_config[i].direction == OUTPUT) {
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	79 f4       	brne	.+30     	; 0xd8 <Dio_init+0x56>
			*(Dio_configuration.port_config[i].ddr) = 0xFF;
  ba:	c3 81       	ldd	r28, Z+3	; 0x03
  bc:	d4 81       	ldd	r29, Z+4	; 0x04
  be:	98 83       	st	Y, r25
			*(Dio_configuration.port_config[i].port) = Dio_configuration.port_config[i].init_value;
  c0:	c5 81       	ldd	r28, Z+5	; 0x05
  c2:	d6 81       	ldd	r29, Z+6	; 0x06
  c4:	82 81       	ldd	r24, Z+2	; 0x02
  c6:	88 83       	st	Y, r24
  c8:	39 96       	adiw	r30, 0x09	; 9
			status = ERROR;
			return status;
		}
	}
	/* configuration of ports */
	for (int i = 0; i < NUM_OF_PORTS; i++) {
  ca:	e2 17       	cp	r30, r18
  cc:	f3 07       	cpc	r31, r19
  ce:	01 f7       	brne	.-64     	; 0x90 <Dio_init+0xe>
			} else {
			status = ERROR;
			return status;
		}		
	}		
	return status;
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	03 c0       	rjmp	.+6      	; 0xda <Dio_init+0x58>
				*(Dio_configuration.port_config[i].port) = 0xFF;
				} else if (Dio_configuration.port_config[i].pull_up == NO_PULL_UP) {
				*(Dio_configuration.port_config[i].port) = 0x00;
				} else {
				status = ERROR;
				return status;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	01 c0       	rjmp	.+2      	; 0xda <Dio_init+0x58>
			} else if (Dio_configuration.port_config[i].direction == OUTPUT) {
			*(Dio_configuration.port_config[i].ddr) = 0xFF;
			*(Dio_configuration.port_config[i].port) = Dio_configuration.port_config[i].init_value;
			} else {
			status = ERROR;
			return status;
  d8:	81 e0       	ldi	r24, 0x01	; 1
		}		
	}		
	return status;
}
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <I2C_MasterTransmit>:


bool I2C_MasterTransmit(const uint8 slave_address, const uint8 data[], const uint8 data_size ) {
	uint8 counter = 0;
	// send start bit
	SET_BIT(TWCR, 2);
  e0:	96 b7       	in	r25, 0x36	; 54
  e2:	94 60       	ori	r25, 0x04	; 4
  e4:	96 bf       	out	0x36, r25	; 54
	SET_BIT(TWCR, 5);
  e6:	96 b7       	in	r25, 0x36	; 54
  e8:	90 62       	ori	r25, 0x20	; 32
  ea:	96 bf       	out	0x36, r25	; 54
	SET_BIT(TWCR, 7);
  ec:	96 b7       	in	r25, 0x36	; 54
  ee:	90 68       	ori	r25, 0x80	; 128
  f0:	96 bf       	out	0x36, r25	; 54
	// wait until the interrupt flag to be set
	while (GET_BIT(TWCR, 7) == 0);
  f2:	06 b6       	in	r0, 0x36	; 54
  f4:	07 fe       	sbrs	r0, 7
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <I2C_MasterTransmit+0x12>
	// check the status code
	if ((TWSR & 0xF8) != 0x08) {
  f8:	91 b1       	in	r25, 0x01	; 1
  fa:	98 7f       	andi	r25, 0xF8	; 248
  fc:	98 30       	cpi	r25, 0x08	; 8
  fe:	99 f5       	brne	.+102    	; 0x166 <I2C_MasterTransmit+0x86>
		return ERROR;
	}
	// send slave address and write bit
	TWDR = slave_address << 1;
 100:	88 0f       	add	r24, r24
 102:	83 b9       	out	0x03, r24	; 3
	// clear start bit
	CLR_BIT(TWCR, 5);
 104:	86 b7       	in	r24, 0x36	; 54
 106:	8f 7d       	andi	r24, 0xDF	; 223
 108:	86 bf       	out	0x36, r24	; 54
	// clear flag
	SET_BIT(TWCR, 7);
 10a:	86 b7       	in	r24, 0x36	; 54
 10c:	80 68       	ori	r24, 0x80	; 128
 10e:	86 bf       	out	0x36, r24	; 54
	// wait until the interrupt flag to be set
	while (GET_BIT(TWCR, 7) == 0);
 110:	06 b6       	in	r0, 0x36	; 54
 112:	07 fe       	sbrs	r0, 7
 114:	fd cf       	rjmp	.-6      	; 0x110 <I2C_MasterTransmit+0x30>
	// check the status code
	if ((TWSR & 0xF8) != 0x18) {
 116:	81 b1       	in	r24, 0x01	; 1
 118:	88 7f       	andi	r24, 0xF8	; 248
 11a:	88 31       	cpi	r24, 0x18	; 24
 11c:	31 f5       	brne	.+76     	; 0x16a <I2C_MasterTransmit+0x8a>
		return ERROR;
	}	
	// send the first Data byte
	TWDR = data[counter];
 11e:	fb 01       	movw	r30, r22
 120:	80 81       	ld	r24, Z
 122:	83 b9       	out	0x03, r24	; 3
	counter++;
	// clear flag
	SET_BIT(TWCR, 7);
 124:	86 b7       	in	r24, 0x36	; 54
 126:	80 68       	ori	r24, 0x80	; 128
 128:	86 bf       	out	0x36, r24	; 54
	// wait until the interrupt flag to be set	
	while (GET_BIT(TWCR, 7) == 0);
 12a:	06 b6       	in	r0, 0x36	; 54
 12c:	07 fe       	sbrs	r0, 7
 12e:	fd cf       	rjmp	.-6      	; 0x12a <I2C_MasterTransmit+0x4a>
 130:	fb 01       	movw	r30, r22
 132:	31 96       	adiw	r30, 0x01	; 1
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	09 c0       	rjmp	.+18     	; 0x14a <I2C_MasterTransmit+0x6a>
	// send the rest bytes
	while (((TWSR & 0xF8) == 0x28) && counter < data_size) {
		TWDR = data[counter];
 138:	81 91       	ld	r24, Z+
 13a:	83 b9       	out	0x03, r24	; 3
		counter++;
 13c:	9f 5f       	subi	r25, 0xFF	; 255
		SET_BIT(TWCR, 7);
 13e:	86 b7       	in	r24, 0x36	; 54
 140:	80 68       	ori	r24, 0x80	; 128
 142:	86 bf       	out	0x36, r24	; 54
		while (GET_BIT(TWCR, 7) == 0);
 144:	06 b6       	in	r0, 0x36	; 54
 146:	07 fe       	sbrs	r0, 7
 148:	fd cf       	rjmp	.-6      	; 0x144 <I2C_MasterTransmit+0x64>
	// clear flag
	SET_BIT(TWCR, 7);
	// wait until the interrupt flag to be set	
	while (GET_BIT(TWCR, 7) == 0);
	// send the rest bytes
	while (((TWSR & 0xF8) == 0x28) && counter < data_size) {
 14a:	81 b1       	in	r24, 0x01	; 1
 14c:	88 7f       	andi	r24, 0xF8	; 248
 14e:	88 32       	cpi	r24, 0x28	; 40
 150:	11 f4       	brne	.+4      	; 0x156 <I2C_MasterTransmit+0x76>
 152:	94 17       	cp	r25, r20
 154:	88 f3       	brcs	.-30     	; 0x138 <I2C_MasterTransmit+0x58>
		counter++;
		SET_BIT(TWCR, 7);
		while (GET_BIT(TWCR, 7) == 0);
	}
	// send Stop bit
	SET_BIT(TWCR, 4);
 156:	86 b7       	in	r24, 0x36	; 54
 158:	80 61       	ori	r24, 0x10	; 16
 15a:	86 bf       	out	0x36, r24	; 54
	SET_BIT(TWCR, 7);	
 15c:	86 b7       	in	r24, 0x36	; 54
 15e:	80 68       	ori	r24, 0x80	; 128
 160:	86 bf       	out	0x36, r24	; 54
	return SUCCESS; 
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	08 95       	ret
	SET_BIT(TWCR, 7);
	// wait until the interrupt flag to be set
	while (GET_BIT(TWCR, 7) == 0);
	// check the status code
	if ((TWSR & 0xF8) != 0x08) {
		return ERROR;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	08 95       	ret
	SET_BIT(TWCR, 7);
	// wait until the interrupt flag to be set
	while (GET_BIT(TWCR, 7) == 0);
	// check the status code
	if ((TWSR & 0xF8) != 0x18) {
		return ERROR;
 16a:	81 e0       	ldi	r24, 0x01	; 1
	}
	// send Stop bit
	SET_BIT(TWCR, 4);
	SET_BIT(TWCR, 7);	
	return SUCCESS; 
 16c:	08 95       	ret

0000016e <main>:
#include "StdTypes.h"

bool I2C_MasterTransmit(const uint8 slave_address, const uint8 data[], const uint8 data_size );

int main(void)
{
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	00 d0       	rcall	.+0      	; 0x174 <main+0x6>
 174:	00 d0       	rcall	.+0      	; 0x176 <main+0x8>
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
	Dio_init();
 17a:	0e 94 41 00 	call	0x82	; 0x82 <Dio_init>
	uint8 data[4] = {1, 2, 3, 4};	
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	89 83       	std	Y+1, r24	; 0x01
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	8a 83       	std	Y+2, r24	; 0x02
 186:	93 e0       	ldi	r25, 0x03	; 3
 188:	9b 83       	std	Y+3, r25	; 0x03
 18a:	94 e0       	ldi	r25, 0x04	; 4
 18c:	9c 83       	std	Y+4, r25	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	2f e7       	ldi	r18, 0x7F	; 127
 190:	3f e4       	ldi	r19, 0x4F	; 79
 192:	92 e1       	ldi	r25, 0x12	; 18
 194:	21 50       	subi	r18, 0x01	; 1
 196:	30 40       	sbci	r19, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x26>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x30>
 19e:	00 00       	nop
	_delay_ms(6000);
	// adjust bit rate
	TWBR = 2; // 50k bit per second  0b0011101 
 1a0:	80 b9       	out	0x00, r24	; 0
	I2C_MasterTransmit(0b0011101, data, 4); 
 1a2:	44 e0       	ldi	r20, 0x04	; 4
 1a4:	be 01       	movw	r22, r28
 1a6:	6f 5f       	subi	r22, 0xFF	; 255
 1a8:	7f 4f       	sbci	r23, 0xFF	; 255
 1aa:	8d e1       	ldi	r24, 0x1D	; 29
 1ac:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_MasterTransmit>
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <main+0x42>

000001b2 <_exit>:
 1b2:	f8 94       	cli

000001b4 <__stop_program>:
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <__stop_program>
