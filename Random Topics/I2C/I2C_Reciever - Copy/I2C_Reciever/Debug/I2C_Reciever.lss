
I2C_Reciever.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000004da  0000056e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000064  0080007c  0080007c  0000058a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000058a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013db  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a41  00000000  00000000  00001adb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a38  00000000  00000000  0000251c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  00002f54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000619  00000000  00000000  00003100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f2b  00000000  00000000  00003719  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004644  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3e       	cpi	r26, 0xE0	; 224
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5f 02 	call	0x4be	; 0x4be <main>
  8a:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Dio_init>:
		break;
	default:
		return ERROR;
	}
	return SUCCESS;
}
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	e0 e6       	ldi	r30, 0x60	; 96
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	2b e7       	ldi	r18, 0x7B	; 123
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	9f ef       	ldi	r25, 0xFF	; 255
  a0:	80 81       	ld	r24, Z
  a2:	81 11       	cpse	r24, r1
  a4:	10 c0       	rjmp	.+32     	; 0xc6 <Dio_init+0x34>
  a6:	c3 81       	ldd	r28, Z+3	; 0x03
  a8:	d4 81       	ldd	r29, Z+4	; 0x04
  aa:	18 82       	st	Y, r1
  ac:	81 81       	ldd	r24, Z+1	; 0x01
  ae:	81 11       	cpse	r24, r1
  b0:	04 c0       	rjmp	.+8      	; 0xba <Dio_init+0x28>
  b2:	a5 81       	ldd	r26, Z+5	; 0x05
  b4:	b6 81       	ldd	r27, Z+6	; 0x06
  b6:	9c 93       	st	X, r25
  b8:	0f c0       	rjmp	.+30     	; 0xd8 <Dio_init+0x46>
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	99 f4       	brne	.+38     	; 0xe4 <Dio_init+0x52>
  be:	a5 81       	ldd	r26, Z+5	; 0x05
  c0:	b6 81       	ldd	r27, Z+6	; 0x06
  c2:	1c 92       	st	X, r1
  c4:	09 c0       	rjmp	.+18     	; 0xd8 <Dio_init+0x46>
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	79 f4       	brne	.+30     	; 0xe8 <Dio_init+0x56>
  ca:	c3 81       	ldd	r28, Z+3	; 0x03
  cc:	d4 81       	ldd	r29, Z+4	; 0x04
  ce:	98 83       	st	Y, r25
  d0:	c5 81       	ldd	r28, Z+5	; 0x05
  d2:	d6 81       	ldd	r29, Z+6	; 0x06
  d4:	82 81       	ldd	r24, Z+2	; 0x02
  d6:	88 83       	st	Y, r24
  d8:	39 96       	adiw	r30, 0x09	; 9
  da:	e2 17       	cp	r30, r18
  dc:	f3 07       	cpc	r31, r19
  de:	01 f7       	brne	.-64     	; 0xa0 <Dio_init+0xe>
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	03 c0       	rjmp	.+6      	; 0xea <Dio_init+0x58>
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	01 c0       	rjmp	.+2      	; 0xea <Dio_init+0x58>
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <Dio_Write_pin>:
  f0:	88 30       	cpi	r24, 0x08	; 8
  f2:	08 f0       	brcs	.+2      	; 0xf6 <Dio_Write_pin+0x6>
  f4:	86 c0       	rjmp	.+268    	; 0x202 <Dio_Write_pin+0x112>
  f6:	61 30       	cpi	r22, 0x01	; 1
  f8:	39 f1       	breq	.+78     	; 0x148 <Dio_Write_pin+0x58>
  fa:	38 f0       	brcs	.+14     	; 0x10a <Dio_Write_pin+0x1a>
  fc:	62 30       	cpi	r22, 0x02	; 2
  fe:	09 f4       	brne	.+2      	; 0x102 <Dio_Write_pin+0x12>
 100:	42 c0       	rjmp	.+132    	; 0x186 <Dio_Write_pin+0x96>
 102:	63 30       	cpi	r22, 0x03	; 3
 104:	09 f4       	brne	.+2      	; 0x108 <Dio_Write_pin+0x18>
 106:	5e c0       	rjmp	.+188    	; 0x1c4 <Dio_Write_pin+0xd4>
 108:	7e c0       	rjmp	.+252    	; 0x206 <Dio_Write_pin+0x116>
 10a:	44 23       	and	r20, r20
 10c:	71 f0       	breq	.+28     	; 0x12a <Dio_Write_pin+0x3a>
 10e:	4b b3       	in	r20, 0x1b	; 27
 110:	21 e0       	ldi	r18, 0x01	; 1
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	b9 01       	movw	r22, r18
 116:	02 c0       	rjmp	.+4      	; 0x11c <Dio_Write_pin+0x2c>
 118:	66 0f       	add	r22, r22
 11a:	77 1f       	adc	r23, r23
 11c:	8a 95       	dec	r24
 11e:	e2 f7       	brpl	.-8      	; 0x118 <Dio_Write_pin+0x28>
 120:	cb 01       	movw	r24, r22
 122:	84 2b       	or	r24, r20
 124:	8b bb       	out	0x1b, r24	; 27
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	08 95       	ret
 12a:	4b b3       	in	r20, 0x1b	; 27
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	b9 01       	movw	r22, r18
 132:	02 c0       	rjmp	.+4      	; 0x138 <Dio_Write_pin+0x48>
 134:	66 0f       	add	r22, r22
 136:	77 1f       	adc	r23, r23
 138:	8a 95       	dec	r24
 13a:	e2 f7       	brpl	.-8      	; 0x134 <Dio_Write_pin+0x44>
 13c:	cb 01       	movw	r24, r22
 13e:	80 95       	com	r24
 140:	84 23       	and	r24, r20
 142:	8b bb       	out	0x1b, r24	; 27
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	08 95       	ret
 148:	44 23       	and	r20, r20
 14a:	71 f0       	breq	.+28     	; 0x168 <Dio_Write_pin+0x78>
 14c:	48 b3       	in	r20, 0x18	; 24
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	b9 01       	movw	r22, r18
 154:	02 c0       	rjmp	.+4      	; 0x15a <Dio_Write_pin+0x6a>
 156:	66 0f       	add	r22, r22
 158:	77 1f       	adc	r23, r23
 15a:	8a 95       	dec	r24
 15c:	e2 f7       	brpl	.-8      	; 0x156 <Dio_Write_pin+0x66>
 15e:	cb 01       	movw	r24, r22
 160:	84 2b       	or	r24, r20
 162:	88 bb       	out	0x18, r24	; 24
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	08 95       	ret
 168:	48 b3       	in	r20, 0x18	; 24
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	b9 01       	movw	r22, r18
 170:	02 c0       	rjmp	.+4      	; 0x176 <Dio_Write_pin+0x86>
 172:	66 0f       	add	r22, r22
 174:	77 1f       	adc	r23, r23
 176:	8a 95       	dec	r24
 178:	e2 f7       	brpl	.-8      	; 0x172 <Dio_Write_pin+0x82>
 17a:	cb 01       	movw	r24, r22
 17c:	80 95       	com	r24
 17e:	84 23       	and	r24, r20
 180:	88 bb       	out	0x18, r24	; 24
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	08 95       	ret
 186:	44 23       	and	r20, r20
 188:	71 f0       	breq	.+28     	; 0x1a6 <Dio_Write_pin+0xb6>
 18a:	45 b3       	in	r20, 0x15	; 21
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	b9 01       	movw	r22, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <Dio_Write_pin+0xa8>
 194:	66 0f       	add	r22, r22
 196:	77 1f       	adc	r23, r23
 198:	8a 95       	dec	r24
 19a:	e2 f7       	brpl	.-8      	; 0x194 <Dio_Write_pin+0xa4>
 19c:	cb 01       	movw	r24, r22
 19e:	84 2b       	or	r24, r20
 1a0:	85 bb       	out	0x15, r24	; 21
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	08 95       	ret
 1a6:	45 b3       	in	r20, 0x15	; 21
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	b9 01       	movw	r22, r18
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <Dio_Write_pin+0xc4>
 1b0:	66 0f       	add	r22, r22
 1b2:	77 1f       	adc	r23, r23
 1b4:	8a 95       	dec	r24
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <Dio_Write_pin+0xc0>
 1b8:	cb 01       	movw	r24, r22
 1ba:	80 95       	com	r24
 1bc:	84 23       	and	r24, r20
 1be:	85 bb       	out	0x15, r24	; 21
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	08 95       	ret
 1c4:	44 23       	and	r20, r20
 1c6:	71 f0       	breq	.+28     	; 0x1e4 <Dio_Write_pin+0xf4>
 1c8:	42 b3       	in	r20, 0x12	; 18
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	b9 01       	movw	r22, r18
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <Dio_Write_pin+0xe6>
 1d2:	66 0f       	add	r22, r22
 1d4:	77 1f       	adc	r23, r23
 1d6:	8a 95       	dec	r24
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <Dio_Write_pin+0xe2>
 1da:	cb 01       	movw	r24, r22
 1dc:	84 2b       	or	r24, r20
 1de:	82 bb       	out	0x12, r24	; 18
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	08 95       	ret
 1e4:	42 b3       	in	r20, 0x12	; 18
 1e6:	21 e0       	ldi	r18, 0x01	; 1
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	b9 01       	movw	r22, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <Dio_Write_pin+0x102>
 1ee:	66 0f       	add	r22, r22
 1f0:	77 1f       	adc	r23, r23
 1f2:	8a 95       	dec	r24
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <Dio_Write_pin+0xfe>
 1f6:	cb 01       	movw	r24, r22
 1f8:	80 95       	com	r24
 1fa:	84 23       	and	r24, r20
 1fc:	82 bb       	out	0x12, r24	; 18
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	08 95       	ret
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	08 95       	ret
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	08 95       	ret

0000020a <Dio_Write_numOfBits>:
/* change the value of number of bits in a specific port according to a mask (put ones on the desired pins)*/
bool Dio_Write_numOfBits(Port_t port_name, Data_t value, uint8 mask) {
	if (value < 0 || value > 255) {
		return ERROR;
	}
	switch (port_name) {
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	e1 f0       	breq	.+56     	; 0x246 <Dio_Write_numOfBits+0x3c>
 20e:	30 f0       	brcs	.+12     	; 0x21c <Dio_Write_numOfBits+0x12>
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	71 f1       	breq	.+92     	; 0x270 <Dio_Write_numOfBits+0x66>
 214:	83 30       	cpi	r24, 0x03	; 3
 216:	09 f4       	brne	.+2      	; 0x21a <Dio_Write_numOfBits+0x10>
 218:	40 c0       	rjmp	.+128    	; 0x29a <Dio_Write_numOfBits+0x90>
 21a:	54 c0       	rjmp	.+168    	; 0x2c4 <Dio_Write_numOfBits+0xba>
	case PORT_A:
		if (value == 1) {
 21c:	61 30       	cpi	r22, 0x01	; 1
 21e:	29 f4       	brne	.+10     	; 0x22a <Dio_Write_numOfBits+0x20>
			PORTA |= mask ;
 220:	6b b3       	in	r22, 0x1b	; 27
 222:	46 2b       	or	r20, r22
 224:	4b bb       	out	0x1b, r20	; 27
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	08 95       	ret
	}
	switch (port_name) {
	case PORT_A:
		if (value == 1) {
			PORTA |= mask ;
		} else if(value == 0) {
 22a:	61 11       	cpse	r22, r1
 22c:	06 c0       	rjmp	.+12     	; 0x23a <Dio_Write_numOfBits+0x30>
			PORTA &= ~mask;			
 22e:	8b b3       	in	r24, 0x1b	; 27
 230:	40 95       	com	r20
 232:	48 23       	and	r20, r24
 234:	4b bb       	out	0x1b, r20	; 27
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	08 95       	ret
		if (value == 1) {
			PORTA |= mask ;
		} else if(value == 0) {
			PORTA &= ~mask;			
		} else {
			PORTA |= value & mask;
 23a:	8b b3       	in	r24, 0x1b	; 27
 23c:	46 23       	and	r20, r22
 23e:	48 2b       	or	r20, r24
 240:	4b bb       	out	0x1b, r20	; 27
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	08 95       	ret
		} else {
			PORTA |= value & mask;
		}		
		break;
	case PORT_B:
		if (value == 1) {
 246:	61 30       	cpi	r22, 0x01	; 1
 248:	29 f4       	brne	.+10     	; 0x254 <Dio_Write_numOfBits+0x4a>
			PORTB |= mask ;
 24a:	68 b3       	in	r22, 0x18	; 24
 24c:	46 2b       	or	r20, r22
 24e:	48 bb       	out	0x18, r20	; 24
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	08 95       	ret
		}		
		break;
	case PORT_B:
		if (value == 1) {
			PORTB |= mask ;
			} else if(value == 0) {
 254:	61 11       	cpse	r22, r1
 256:	06 c0       	rjmp	.+12     	; 0x264 <Dio_Write_numOfBits+0x5a>
			PORTB &= ~mask;
 258:	88 b3       	in	r24, 0x18	; 24
 25a:	40 95       	com	r20
 25c:	48 23       	and	r20, r24
 25e:	48 bb       	out	0x18, r20	; 24
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	08 95       	ret
		if (value == 1) {
			PORTB |= mask ;
			} else if(value == 0) {
			PORTB &= ~mask;
			} else {
			PORTB |= value & mask;
 264:	88 b3       	in	r24, 0x18	; 24
 266:	46 23       	and	r20, r22
 268:	48 2b       	or	r20, r24
 26a:	48 bb       	out	0x18, r20	; 24
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	08 95       	ret
			} else {
			PORTB |= value & mask;
		}
		break;
	case PORT_C:
		if (value == 1) {
 270:	61 30       	cpi	r22, 0x01	; 1
 272:	29 f4       	brne	.+10     	; 0x27e <Dio_Write_numOfBits+0x74>
			PORTC |= mask ;
 274:	65 b3       	in	r22, 0x15	; 21
 276:	46 2b       	or	r20, r22
 278:	45 bb       	out	0x15, r20	; 21
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	08 95       	ret
		}
		break;
	case PORT_C:
		if (value == 1) {
			PORTC |= mask ;
			} else if(value == 0) {
 27e:	61 11       	cpse	r22, r1
 280:	06 c0       	rjmp	.+12     	; 0x28e <Dio_Write_numOfBits+0x84>
			PORTC &= ~mask;
 282:	85 b3       	in	r24, 0x15	; 21
 284:	40 95       	com	r20
 286:	48 23       	and	r20, r24
 288:	45 bb       	out	0x15, r20	; 21
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	08 95       	ret
		if (value == 1) {
			PORTC |= mask ;
			} else if(value == 0) {
			PORTC &= ~mask;
			} else {
			PORTC |= value & mask;
 28e:	85 b3       	in	r24, 0x15	; 21
 290:	46 23       	and	r20, r22
 292:	48 2b       	or	r20, r24
 294:	45 bb       	out	0x15, r20	; 21
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	08 95       	ret
			} else {
			PORTC |= value & mask;
		}
		break;
	case PORT_D:
		if (value == 1) {
 29a:	61 30       	cpi	r22, 0x01	; 1
 29c:	29 f4       	brne	.+10     	; 0x2a8 <Dio_Write_numOfBits+0x9e>
			PORTD |= mask ;
 29e:	62 b3       	in	r22, 0x12	; 18
 2a0:	46 2b       	or	r20, r22
 2a2:	42 bb       	out	0x12, r20	; 18
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	08 95       	ret
		}
		break;
	case PORT_D:
		if (value == 1) {
			PORTD |= mask ;
			} else if(value == 0) {
 2a8:	61 11       	cpse	r22, r1
 2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <Dio_Write_numOfBits+0xae>
			PORTD &= ~mask;
 2ac:	82 b3       	in	r24, 0x12	; 18
 2ae:	40 95       	com	r20
 2b0:	48 23       	and	r20, r24
 2b2:	42 bb       	out	0x12, r20	; 18
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	08 95       	ret
		if (value == 1) {
			PORTD |= mask ;
			} else if(value == 0) {
			PORTD &= ~mask;
			} else {
			PORTD |= value & mask;
 2b8:	82 b3       	in	r24, 0x12	; 18
 2ba:	46 23       	and	r20, r22
 2bc:	48 2b       	or	r20, r24
 2be:	42 bb       	out	0x12, r20	; 18
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	08 95       	ret
			} else {
			PORTD |= value & mask;
		}
		break;
	default:
		return ERROR;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return SUCCESS;
 2c6:	08 95       	ret

000002c8 <I2C_Clear_INT_AndEnable>:
}

static void I2C_Clear_INT_AndEnable()
{
	/* clear the interrupt flag */
	SET_BIT(TWCR, 7);
 2c8:	86 b7       	in	r24, 0x36	; 54
 2ca:	80 68       	ori	r24, 0x80	; 128
 2cc:	86 bf       	out	0x36, r24	; 54
	/*  enable the TWI */
	SET_BIT(TWCR, 2);
 2ce:	86 b7       	in	r24, 0x36	; 54
 2d0:	84 60       	ori	r24, 0x04	; 4
 2d2:	86 bf       	out	0x36, r24	; 54
 2d4:	08 95       	ret

000002d6 <I2C_Rx>:
	while(GET_BIT(TWCR, 7) == 0) {
		PORTD ^= 1 << num;
	}
}

uint8_t* I2C_Rx(void) {
 2d6:	0f 93       	push	r16
 2d8:	1f 93       	push	r17
 2da:	cf 93       	push	r28
	static uint8_t data[100] = {'\0'};
	int index = 0;	
	// enable bit
	I2C_Clear_INT_AndEnable();
 2dc:	0e 94 64 01 	call	0x2c8	; 0x2c8 <I2C_Clear_INT_AndEnable>
	// ACK enable
	SET_BIT(TWCR, 6);
 2e0:	86 b7       	in	r24, 0x36	; 54
 2e2:	80 64       	ori	r24, 0x40	; 64
 2e4:	86 bf       	out	0x36, r24	; 54
	// clear start bit
	CLR_BIT(TWCR, 5);
 2e6:	86 b7       	in	r24, 0x36	; 54
 2e8:	8f 7d       	andi	r24, 0xDF	; 223
 2ea:	86 bf       	out	0x36, r24	; 54
	// clear stop bit
	CLR_BIT(TWCR, 4);
 2ec:	86 b7       	in	r24, 0x36	; 54
 2ee:	8f 7e       	andi	r24, 0xEF	; 239
 2f0:	86 bf       	out	0x36, r24	; 54
}


static void I2C_Wait_Until_Flag_Set(uint8_t num)
{
	while(GET_BIT(TWCR, 7) == 0) {
 2f2:	06 b6       	in	r0, 0x36	; 54
 2f4:	07 fc       	sbrc	r0, 7
 2f6:	07 c0       	rjmp	.+14     	; 0x306 <I2C_Rx+0x30>
		PORTD ^= 1 << num;
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	82 b3       	in	r24, 0x12	; 18
 2fc:	89 27       	eor	r24, r25
 2fe:	82 bb       	out	0x12, r24	; 18
}


static void I2C_Wait_Until_Flag_Set(uint8_t num)
{
	while(GET_BIT(TWCR, 7) == 0) {
 300:	06 b6       	in	r0, 0x36	; 54
 302:	07 fe       	sbrs	r0, 7
 304:	fa cf       	rjmp	.-12     	; 0x2fa <I2C_Rx+0x24>



static void I2C_Check_StatusCode(uint8_t status_code, uint8_t num)
{
	if ((TWSR & 0xF8) == status_code) {
 306:	81 b1       	in	r24, 0x01	; 1
 308:	88 7f       	andi	r24, 0xF8	; 248
 30a:	80 36       	cpi	r24, 0x60	; 96
 30c:	29 f4       	brne	.+10     	; 0x318 <I2C_Rx+0x42>
		SET_BIT(PORTA, num);
 30e:	d8 9a       	sbi	0x1b, 0	; 27
 310:	0c e7       	ldi	r16, 0x7C	; 124
 312:	10 e0       	ldi	r17, 0x00	; 0


static void I2C_Wait_Until_Flag_Set(uint8_t num)
{
	while(GET_BIT(TWCR, 7) == 0) {
		PORTD ^= 1 << num;
 314:	c2 e0       	ldi	r28, 0x02	; 2
 316:	02 c0       	rjmp	.+4      	; 0x31c <I2C_Rx+0x46>
static void I2C_Check_StatusCode(uint8_t status_code, uint8_t num)
{
	if ((TWSR & 0xF8) == status_code) {
		SET_BIT(PORTA, num);
	} else {
		SET_BIT(PORTD, num);
 318:	90 9a       	sbi	0x12, 0	; 18
 31a:	fa cf       	rjmp	.-12     	; 0x310 <I2C_Rx+0x3a>
	I2C_Wait_Until_Flag_Set(0);
	I2C_Check_StatusCode(0x60, 0);
	

	while (1) {
		I2C_Clear_INT_AndEnable();
 31c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <I2C_Clear_INT_AndEnable>
}


static void I2C_Wait_Until_Flag_Set(uint8_t num)
{
	while(GET_BIT(TWCR, 7) == 0) {
 320:	06 b6       	in	r0, 0x36	; 54
 322:	07 fc       	sbrc	r0, 7
 324:	06 c0       	rjmp	.+12     	; 0x332 <I2C_Rx+0x5c>
		PORTD ^= 1 << num;
 326:	82 b3       	in	r24, 0x12	; 18
 328:	8c 27       	eor	r24, r28
 32a:	82 bb       	out	0x12, r24	; 18
}


static void I2C_Wait_Until_Flag_Set(uint8_t num)
{
	while(GET_BIT(TWCR, 7) == 0) {
 32c:	06 b6       	in	r0, 0x36	; 54
 32e:	07 fe       	sbrs	r0, 7
 330:	fa cf       	rjmp	.-12     	; 0x326 <I2C_Rx+0x50>
	

	while (1) {
		I2C_Clear_INT_AndEnable();
		I2C_Wait_Until_Flag_Set(1);
		if ((TWSR & 0xF8) == 0x80) {
 332:	81 b1       	in	r24, 0x01	; 1
 334:	88 7f       	andi	r24, 0xF8	; 248
 336:	80 38       	cpi	r24, 0x80	; 128
 338:	11 f4       	brne	.+4      	; 0x33e <I2C_Rx+0x68>
			SET_BIT(PORTA, 3);
 33a:	db 9a       	sbi	0x1b, 3	; 27
 33c:	04 c0       	rjmp	.+8      	; 0x346 <I2C_Rx+0x70>
		} else if ((TWSR & 0xF8) == 0xA0) {
 33e:	81 b1       	in	r24, 0x01	; 1
 340:	88 7f       	andi	r24, 0xF8	; 248
 342:	80 3a       	cpi	r24, 0xA0	; 160
 344:	29 f0       	breq	.+10     	; 0x350 <I2C_Rx+0x7a>
			break;
			SET_BIT(PORTD, 3);
		}
		data[index] = TWDR;
 346:	83 b1       	in	r24, 0x03	; 3
 348:	f8 01       	movw	r30, r16
 34a:	81 93       	st	Z+, r24
 34c:	8f 01       	movw	r16, r30
		index++;
	}
 34e:	e6 cf       	rjmp	.-52     	; 0x31c <I2C_Rx+0x46>
	
	return data;
}
 350:	8c e7       	ldi	r24, 0x7C	; 124
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	08 95       	ret

0000035c <I2C_init>:

void I2C_init(uint8_t address) {
	TWAR = address;
 35c:	82 b9       	out	0x02, r24	; 2
 35e:	08 95       	ret

00000360 <EnPulse>:
	default:
		return ERROR;
		break;					
	}
	return SUCCESS;
}
 360:	41 e0       	ldi	r20, 0x01	; 1
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	0e 94 78 00 	call	0xf0	; 0xf0 <Dio_Write_pin>
 36a:	98 2f       	mov	r25, r24
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	51 f0       	breq	.+20     	; 0x384 <EnPulse+0x24>
 370:	00 00       	nop
 372:	40 e0       	ldi	r20, 0x00	; 0
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	0e 94 78 00 	call	0xf0	; 0xf0 <Dio_Write_pin>
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	09 f0       	breq	.+2      	; 0x384 <EnPulse+0x24>
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	89 2f       	mov	r24, r25
 386:	08 95       	ret

00000388 <Lcd_Write_4>:
 388:	cf 93       	push	r28
 38a:	c8 2f       	mov	r28, r24
 38c:	40 ef       	ldi	r20, 0xF0	; 240
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	0e 94 05 01 	call	0x20a	; 0x20a <Dio_Write_numOfBits>
 396:	81 30       	cpi	r24, 0x01	; 1
 398:	41 f1       	breq	.+80     	; 0x3ea <Lcd_Write_4+0x62>
 39a:	40 ef       	ldi	r20, 0xF0	; 240
 39c:	6c 2f       	mov	r22, r28
 39e:	60 7f       	andi	r22, 0xF0	; 240
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	0e 94 05 01 	call	0x20a	; 0x20a <Dio_Write_numOfBits>
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	01 f1       	breq	.+64     	; 0x3ea <Lcd_Write_4+0x62>
 3aa:	0e 94 b0 01 	call	0x360	; 0x360 <EnPulse>
 3ae:	81 30       	cpi	r24, 0x01	; 1
 3b0:	e1 f0       	breq	.+56     	; 0x3ea <Lcd_Write_4+0x62>
 3b2:	40 ef       	ldi	r20, 0xF0	; 240
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	0e 94 05 01 	call	0x20a	; 0x20a <Dio_Write_numOfBits>
 3bc:	81 30       	cpi	r24, 0x01	; 1
 3be:	a9 f0       	breq	.+42     	; 0x3ea <Lcd_Write_4+0x62>
 3c0:	80 e1       	ldi	r24, 0x10	; 16
 3c2:	c8 9f       	mul	r28, r24
 3c4:	b0 01       	movw	r22, r0
 3c6:	11 24       	eor	r1, r1
 3c8:	40 ef       	ldi	r20, 0xF0	; 240
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	0e 94 05 01 	call	0x20a	; 0x20a <Dio_Write_numOfBits>
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	59 f0       	breq	.+22     	; 0x3ea <Lcd_Write_4+0x62>
 3d4:	0e 94 b0 01 	call	0x360	; 0x360 <EnPulse>
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	39 f0       	breq	.+14     	; 0x3ea <Lcd_Write_4+0x62>
 3dc:	83 ef       	ldi	r24, 0xF3	; 243
 3de:	91 e0       	ldi	r25, 0x01	; 1
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <Lcd_Write_4+0x58>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <Lcd_Write_4+0x5e>
 3e6:	00 00       	nop
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	cf 91       	pop	r28
 3ec:	08 95       	ret

000003ee <Lcd_Cmd>:
 3ee:	cf 93       	push	r28
 3f0:	c8 2f       	mov	r28, r24
 3f2:	40 e0       	ldi	r20, 0x00	; 0
 3f4:	61 e0       	ldi	r22, 0x01	; 1
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	0e 94 78 00 	call	0xf0	; 0xf0 <Dio_Write_pin>
 3fc:	98 2f       	mov	r25, r24
 3fe:	81 30       	cpi	r24, 0x01	; 1
 400:	39 f0       	breq	.+14     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 402:	8c 2f       	mov	r24, r28
 404:	0e 94 c4 01 	call	0x388	; 0x388 <Lcd_Write_4>
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	81 30       	cpi	r24, 0x01	; 1
 40c:	09 f0       	breq	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	89 2f       	mov	r24, r25
 412:	cf 91       	pop	r28
 414:	08 95       	ret

00000416 <Lcd_Init>:
 416:	85 ea       	ldi	r24, 0xA5	; 165
 418:	9e e0       	ldi	r25, 0x0E	; 14
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <Lcd_Init+0x4>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <Lcd_Init+0xa>
 420:	00 00       	nop
 422:	80 e3       	ldi	r24, 0x30	; 48
 424:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Lcd_Cmd>
 428:	98 2f       	mov	r25, r24
 42a:	81 30       	cpi	r24, 0x01	; 1
 42c:	21 f1       	breq	.+72     	; 0x476 <Lcd_Init+0x60>
 42e:	80 e2       	ldi	r24, 0x20	; 32
 430:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Lcd_Cmd>
 434:	98 2f       	mov	r25, r24
 436:	81 30       	cpi	r24, 0x01	; 1
 438:	f1 f0       	breq	.+60     	; 0x476 <Lcd_Init+0x60>
 43a:	0e 94 b0 01 	call	0x360	; 0x360 <EnPulse>
 43e:	98 2f       	mov	r25, r24
 440:	81 30       	cpi	r24, 0x01	; 1
 442:	c9 f0       	breq	.+50     	; 0x476 <Lcd_Init+0x60>
 444:	88 e2       	ldi	r24, 0x28	; 40
 446:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Lcd_Cmd>
 44a:	98 2f       	mov	r25, r24
 44c:	81 30       	cpi	r24, 0x01	; 1
 44e:	99 f0       	breq	.+38     	; 0x476 <Lcd_Init+0x60>
 450:	8f e0       	ldi	r24, 0x0F	; 15
 452:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Lcd_Cmd>
 456:	98 2f       	mov	r25, r24
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	69 f0       	breq	.+26     	; 0x476 <Lcd_Init+0x60>
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Lcd_Cmd>
 462:	98 2f       	mov	r25, r24
 464:	81 30       	cpi	r24, 0x01	; 1
 466:	39 f0       	breq	.+14     	; 0x476 <Lcd_Init+0x60>
 468:	86 e0       	ldi	r24, 0x06	; 6
 46a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Lcd_Cmd>
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	81 30       	cpi	r24, 0x01	; 1
 472:	09 f0       	breq	.+2      	; 0x476 <Lcd_Init+0x60>
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	89 2f       	mov	r24, r25
 478:	08 95       	ret

0000047a <Lcd_Out>:


extern bool Lcd_Out(uint8 *str) {
 47a:	0f 93       	push	r16
 47c:	1f 93       	push	r17
 47e:	cf 93       	push	r28
	while (*str != '\0') {
 480:	fc 01       	movw	r30, r24
 482:	c0 81       	ld	r28, Z
 484:	cc 23       	and	r28, r28
 486:	b1 f0       	breq	.+44     	; 0x4b4 <Lcd_Out+0x3a>
 488:	8c 01       	movw	r16, r24
 48a:	0f 5f       	subi	r16, 0xFF	; 255
 48c:	1f 4f       	sbci	r17, 0xFF	; 255
	return SUCCESS;
}

static bool Lcd_Data(uint8 data) {
	// Set RS pin
	if (Dio_Write_pin(RS, LCD_CtrPort, 1) == ERROR) {
 48e:	41 e0       	ldi	r20, 0x01	; 1
 490:	61 e0       	ldi	r22, 0x01	; 1
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	0e 94 78 00 	call	0xf0	; 0xf0 <Dio_Write_pin>
 498:	81 30       	cpi	r24, 0x01	; 1
 49a:	69 f0       	breq	.+26     	; 0x4b6 <Lcd_Out+0x3c>
		return ERROR;
	}
	#ifdef LCD_MODE_FOUR_BIT
	if (Lcd_Write_4(data) == ERROR) {
 49c:	8c 2f       	mov	r24, r28
 49e:	0e 94 c4 01 	call	0x388	; 0x388 <Lcd_Write_4>
}


extern bool Lcd_Out(uint8 *str) {
	while (*str != '\0') {
		if (Lcd_Data(*str) == ERROR) {
 4a2:	81 30       	cpi	r24, 0x01	; 1
 4a4:	41 f0       	breq	.+16     	; 0x4b6 <Lcd_Out+0x3c>
	return SUCCESS;
}


extern bool Lcd_Out(uint8 *str) {
	while (*str != '\0') {
 4a6:	f8 01       	movw	r30, r16
 4a8:	c1 91       	ld	r28, Z+
 4aa:	8f 01       	movw	r16, r30
 4ac:	c1 11       	cpse	r28, r1
 4ae:	ef cf       	rjmp	.-34     	; 0x48e <Lcd_Out+0x14>
		if (Lcd_Data(*str) == ERROR) {
			return ERROR;
		}
		str++;
	}
	return SUCCESS;	
 4b0:	8c 2f       	mov	r24, r28
 4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <Lcd_Out+0x3c>
 4b4:	8c 2f       	mov	r24, r28
}
 4b6:	cf 91       	pop	r28
 4b8:	1f 91       	pop	r17
 4ba:	0f 91       	pop	r16
 4bc:	08 95       	ret

000004be <main>:
int main(void)
{
	uint8* data;
	
			
	Dio_init();
 4be:	0e 94 49 00 	call	0x92	; 0x92 <Dio_init>
	Lcd_Init();
 4c2:	0e 94 0b 02 	call	0x416	; 0x416 <Lcd_Init>
	I2C_init(200);
 4c6:	88 ec       	ldi	r24, 0xC8	; 200
 4c8:	0e 94 ae 01 	call	0x35c	; 0x35c <I2C_init>
	
    while (1) {
		data = I2C_Rx();
 4cc:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <I2C_Rx>
		Lcd_Out(data);
 4d0:	0e 94 3d 02 	call	0x47a	; 0x47a <Lcd_Out>
 4d4:	fb cf       	rjmp	.-10     	; 0x4cc <main+0xe>

000004d6 <_exit>:
 4d6:	f8 94       	cli

000004d8 <__stop_program>:
 4d8:	ff cf       	rjmp	.-2      	; 0x4d8 <__stop_program>
