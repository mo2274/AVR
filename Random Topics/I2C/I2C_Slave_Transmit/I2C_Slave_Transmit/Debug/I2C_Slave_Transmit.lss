
I2C_Slave_Transmit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000001ec  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f88  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e0  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000834  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00002374  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000055d  00000000  00000000  000024dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bab  00000000  00000000  00002a39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000035e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  7a:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Dio_init>:
#include "Dio.h"

extern Dio_Config_t Dio_configuration;
	
/* initialization function */	
bool Dio_init(void) {	
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	e0 e6       	ldi	r30, 0x60	; 96
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	2b e7       	ldi	r18, 0x7B	; 123
  8c:	30 e0       	ldi	r19, 0x00	; 0
				} else {
				status = ERROR;
				return status;
			}
			} else if (Dio_configuration.port_config[i].direction == OUTPUT) {
			*(Dio_configuration.port_config[i].ddr) = 0xFF;
  8e:	9f ef       	ldi	r25, 0xFF	; 255
			return status;
		}
	}
	/* configuration of ports */
	for (int i = 0; i < NUM_OF_PORTS; i++) {
		if (Dio_configuration.port_config[i].direction == INPUT) {
  90:	80 81       	ld	r24, Z
  92:	81 11       	cpse	r24, r1
  94:	10 c0       	rjmp	.+32     	; 0xb6 <Dio_init+0x34>
			*(Dio_configuration.port_config[i].ddr) = 0x00;
  96:	c3 81       	ldd	r28, Z+3	; 0x03
  98:	d4 81       	ldd	r29, Z+4	; 0x04
  9a:	18 82       	st	Y, r1
			if (Dio_configuration.port_config[i].pull_up == PULL_UP) {
  9c:	81 81       	ldd	r24, Z+1	; 0x01
  9e:	81 11       	cpse	r24, r1
  a0:	04 c0       	rjmp	.+8      	; 0xaa <Dio_init+0x28>
				*(Dio_configuration.port_config[i].port) = 0xFF;
  a2:	a5 81       	ldd	r26, Z+5	; 0x05
  a4:	b6 81       	ldd	r27, Z+6	; 0x06
  a6:	9c 93       	st	X, r25
  a8:	0f c0       	rjmp	.+30     	; 0xc8 <Dio_init+0x46>
				} else if (Dio_configuration.port_config[i].pull_up == NO_PULL_UP) {
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	99 f4       	brne	.+38     	; 0xd4 <Dio_init+0x52>
				*(Dio_configuration.port_config[i].port) = 0x00;
  ae:	a5 81       	ldd	r26, Z+5	; 0x05
  b0:	b6 81       	ldd	r27, Z+6	; 0x06
  b2:	1c 92       	st	X, r1
  b4:	09 c0       	rjmp	.+18     	; 0xc8 <Dio_init+0x46>
				} else {
				status = ERROR;
				return status;
			}
			} else if (Dio_configuration.port_config[i].direction == OUTPUT) {
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	79 f4       	brne	.+30     	; 0xd8 <Dio_init+0x56>
			*(Dio_configuration.port_config[i].ddr) = 0xFF;
  ba:	c3 81       	ldd	r28, Z+3	; 0x03
  bc:	d4 81       	ldd	r29, Z+4	; 0x04
  be:	98 83       	st	Y, r25
			*(Dio_configuration.port_config[i].port) = Dio_configuration.port_config[i].init_value;
  c0:	c5 81       	ldd	r28, Z+5	; 0x05
  c2:	d6 81       	ldd	r29, Z+6	; 0x06
  c4:	82 81       	ldd	r24, Z+2	; 0x02
  c6:	88 83       	st	Y, r24
  c8:	39 96       	adiw	r30, 0x09	; 9
			status = ERROR;
			return status;
		}
	}
	/* configuration of ports */
	for (int i = 0; i < NUM_OF_PORTS; i++) {
  ca:	e2 17       	cp	r30, r18
  cc:	f3 07       	cpc	r31, r19
  ce:	01 f7       	brne	.-64     	; 0x90 <Dio_init+0xe>
			} else {
			status = ERROR;
			return status;
		}		
	}		
	return status;
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	03 c0       	rjmp	.+6      	; 0xda <Dio_init+0x58>
				*(Dio_configuration.port_config[i].port) = 0xFF;
				} else if (Dio_configuration.port_config[i].pull_up == NO_PULL_UP) {
				*(Dio_configuration.port_config[i].port) = 0x00;
				} else {
				status = ERROR;
				return status;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	01 c0       	rjmp	.+2      	; 0xda <Dio_init+0x58>
			} else if (Dio_configuration.port_config[i].direction == OUTPUT) {
			*(Dio_configuration.port_config[i].ddr) = 0xFF;
			*(Dio_configuration.port_config[i].port) = Dio_configuration.port_config[i].init_value;
			} else {
			status = ERROR;
			return status;
  d8:	81 e0       	ldi	r24, 0x01	; 1
		}		
	}		
	return status;
}
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <I2C_Enable>:
}

void I2C_Enable(void)
{
	// enable
	SET_BIT(TWCR, 2);
  e0:	86 b7       	in	r24, 0x36	; 54
  e2:	84 60       	ori	r24, 0x04	; 4
  e4:	86 bf       	out	0x36, r24	; 54
  e6:	08 95       	ret

000000e8 <I2C_ACK>:
}

void I2C_ACK(void)
{
	// enable ACK
	SET_BIT(TWCR, 6);
  e8:	86 b7       	in	r24, 0x36	; 54
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	86 bf       	out	0x36, r24	; 54
  ee:	08 95       	ret

000000f0 <I2C_ClearStartBit>:
}

void I2C_ClearStartBit(void)
{
	// clear start bit
	CLR_BIT(TWCR, 5);
  f0:	86 b7       	in	r24, 0x36	; 54
  f2:	8f 7d       	andi	r24, 0xDF	; 223
  f4:	86 bf       	out	0x36, r24	; 54
  f6:	08 95       	ret

000000f8 <I2C_ClearStopBit>:
}

void I2C_ClearStopBit(void)
{
	// clear stop bit
	CLR_BIT(TWCR, 4);
  f8:	86 b7       	in	r24, 0x36	; 54
  fa:	8f 7e       	andi	r24, 0xEF	; 239
  fc:	86 bf       	out	0x36, r24	; 54
  fe:	08 95       	ret

00000100 <I2C_WaitUtilFlagToBeSet>:
}

void I2C_WaitUtilFlagToBeSet(void)
{
	// wait until the flag is set
	while (GET_BIT(TWCR, 7) == 0);
 100:	06 b6       	in	r0, 0x36	; 54
 102:	07 fe       	sbrs	r0, 7
 104:	fd cf       	rjmp	.-6      	; 0x100 <I2C_WaitUtilFlagToBeSet>
}
 106:	08 95       	ret

00000108 <I2C_CheckStatusCode>:

void I2C_CheckStatusCode(uint8 statusCode, uint8 errorNo)
{
	// check status code
	if ((TWSR & 0xF8) == statusCode) {
 108:	21 b1       	in	r18, 0x01	; 1
 10a:	28 7f       	andi	r18, 0xF8	; 248
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	28 17       	cp	r18, r24
 112:	39 07       	cpc	r19, r25
 114:	59 f4       	brne	.+22     	; 0x12c <I2C_CheckStatusCode+0x24>
		SET_BIT(PORTA, errorNo);
 116:	2b b3       	in	r18, 0x1b	; 27
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <I2C_CheckStatusCode+0x1a>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <I2C_CheckStatusCode+0x16>
 126:	82 2b       	or	r24, r18
 128:	8b bb       	out	0x1b, r24	; 27
 12a:	08 95       	ret
	} else {
		SET_BIT(PORTD, errorNo);
 12c:	22 b3       	in	r18, 0x12	; 18
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <I2C_CheckStatusCode+0x30>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <I2C_CheckStatusCode+0x2c>
 13c:	82 2b       	or	r24, r18
 13e:	82 bb       	out	0x12, r24	; 18
 140:	08 95       	ret

00000142 <Slave_init>:
#include "I2C.h"

void I2C_SetSlaveAdress(void)
{
	// set slave address
	TWAR = 0b00110010;
 142:	82 e3       	ldi	r24, 0x32	; 50
 144:	82 b9       	out	0x02, r24	; 2
	}
}

void Slave_init(void) {
	I2C_SetSlaveAdress();
	I2C_Enable();
 146:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_Enable>
	I2C_ACK();
 14a:	0e 94 74 00 	call	0xe8	; 0xe8 <I2C_ACK>
	I2C_ClearStartBit();
 14e:	0e 94 78 00 	call	0xf0	; 0xf0 <I2C_ClearStartBit>
	I2C_ClearStopBit();
 152:	0e 94 7c 00 	call	0xf8	; 0xf8 <I2C_ClearStopBit>
	I2C_WaitUtilFlagToBeSet();
 156:	0e 94 80 00 	call	0x100	; 0x100 <I2C_WaitUtilFlagToBeSet>
	I2C_CheckStatusCode(0xA8, 0);
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	88 ea       	ldi	r24, 0xA8	; 168
 15e:	0e 94 84 00 	call	0x108	; 0x108 <I2C_CheckStatusCode>
 162:	08 95       	ret

00000164 <I2C_SendData>:



void I2C_SendData(uint8 data)
{
	TWDR = data;
 164:	83 b9       	out	0x03, r24	; 3
 166:	08 95       	ret

00000168 <I2C_ClearFlag>:
}

void I2C_ClearFlag(void)
{
	// clear flag
	SET_BIT(TWCR, 7);
 168:	86 b7       	in	r24, 0x36	; 54
 16a:	80 68       	ori	r24, 0x80	; 128
 16c:	86 bf       	out	0x36, r24	; 54
 16e:	08 95       	ret

00000170 <main>:



int main(void)
{	
	Dio_init();
 170:	0e 94 41 00 	call	0x82	; 0x82 <Dio_init>
	Slave_init();
 174:	0e 94 a1 00 	call	0x142	; 0x142 <Slave_init>
	I2C_SendData(7);
 178:	87 e0       	ldi	r24, 0x07	; 7
 17a:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_SendData>
	I2C_ClearFlag();
 17e:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_ClearFlag>
	I2C_WaitUtilFlagToBeSet();
 182:	0e 94 80 00 	call	0x100	; 0x100 <I2C_WaitUtilFlagToBeSet>
	I2C_CheckStatusCode(0xB8, 1);
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	88 eb       	ldi	r24, 0xB8	; 184
 18a:	0e 94 84 00 	call	0x108	; 0x108 <I2C_CheckStatusCode>
	I2C_SendData(6);
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_SendData>
	I2C_ClearFlag();
 194:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_ClearFlag>
	I2C_WaitUtilFlagToBeSet();
 198:	0e 94 80 00 	call	0x100	; 0x100 <I2C_WaitUtilFlagToBeSet>
	I2C_CheckStatusCode(0xB8, 2);
 19c:	62 e0       	ldi	r22, 0x02	; 2
 19e:	88 eb       	ldi	r24, 0xB8	; 184
 1a0:	0e 94 84 00 	call	0x108	; 0x108 <I2C_CheckStatusCode>
	I2C_SendData(1);
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_SendData>
	I2C_ClearFlag();
 1aa:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_ClearFlag>
	I2C_WaitUtilFlagToBeSet();
 1ae:	0e 94 80 00 	call	0x100	; 0x100 <I2C_WaitUtilFlagToBeSet>
	I2C_CheckStatusCode(0xB8, 2);
 1b2:	62 e0       	ldi	r22, 0x02	; 2
 1b4:	88 eb       	ldi	r24, 0xB8	; 184
 1b6:	0e 94 84 00 	call	0x108	; 0x108 <I2C_CheckStatusCode>
	I2C_SendData(2);
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_SendData>
	I2C_ClearFlag();
 1c0:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_ClearFlag>
	I2C_WaitUtilFlagToBeSet();
 1c4:	0e 94 80 00 	call	0x100	; 0x100 <I2C_WaitUtilFlagToBeSet>
	I2C_CheckStatusCode(0xB8, 2);		
 1c8:	62 e0       	ldi	r22, 0x02	; 2
 1ca:	88 eb       	ldi	r24, 0xB8	; 184
 1cc:	0e 94 84 00 	call	0x108	; 0x108 <I2C_CheckStatusCode>
	I2C_SendData(3);
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_SendData>
	I2C_ClearFlag();
 1d6:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_ClearFlag>
	I2C_WaitUtilFlagToBeSet();
 1da:	0e 94 80 00 	call	0x100	; 0x100 <I2C_WaitUtilFlagToBeSet>
	I2C_CheckStatusCode(0xC0, 3);		
 1de:	63 e0       	ldi	r22, 0x03	; 3
 1e0:	80 ec       	ldi	r24, 0xC0	; 192
 1e2:	0e 94 84 00 	call	0x108	; 0x108 <I2C_CheckStatusCode>
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <main+0x76>

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>
