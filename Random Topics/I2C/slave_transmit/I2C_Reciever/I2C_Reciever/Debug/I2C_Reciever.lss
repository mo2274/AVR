
I2C_Reciever.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000142  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000080d  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000653  00000000  00000000  00000a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036b  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001430  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038a  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a7  00000000  00000000  0000184a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000018f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  8a:	0c 94 9f 00 	jmp	0x13e	; 0x13e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <I2C_Check_StatusCode>:



void I2C_Check_StatusCode(uint8_t status_code, uint8_t num)
{
	if ((TWSR & 0xF8) == status_code) {
  92:	21 b1       	in	r18, 0x01	; 1
  94:	28 7f       	andi	r18, 0xF8	; 248
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	28 17       	cp	r18, r24
  9c:	39 07       	cpc	r19, r25
  9e:	59 f4       	brne	.+22     	; 0xb6 <I2C_Check_StatusCode+0x24>
		SET_BIT(PORTA, num);
  a0:	2b b3       	in	r18, 0x1b	; 27
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	02 c0       	rjmp	.+4      	; 0xac <I2C_Check_StatusCode+0x1a>
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	6a 95       	dec	r22
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <I2C_Check_StatusCode+0x16>
  b0:	82 2b       	or	r24, r18
  b2:	8b bb       	out	0x1b, r24	; 27
  b4:	08 95       	ret
	} else {
		SET_BIT(PORTD, num);
  b6:	22 b3       	in	r18, 0x12	; 18
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <I2C_Check_StatusCode+0x30>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <I2C_Check_StatusCode+0x2c>
  c6:	82 2b       	or	r24, r18
  c8:	82 bb       	out	0x12, r24	; 18
  ca:	08 95       	ret

000000cc <I2C_Clear_INT_AndEnable>:
}

void I2C_Clear_INT_AndEnable()
{
	/* clear the interrupt flag */
	SET_BIT(TWCR, 7);
  cc:	86 b7       	in	r24, 0x36	; 54
  ce:	80 68       	ori	r24, 0x80	; 128
  d0:	86 bf       	out	0x36, r24	; 54
	/*  enable the TWI */
	SET_BIT(TWCR, 2);
  d2:	86 b7       	in	r24, 0x36	; 54
  d4:	84 60       	ori	r24, 0x04	; 4
  d6:	86 bf       	out	0x36, r24	; 54
  d8:	08 95       	ret

000000da <I2C_Wait_Until_Flag_Set>:
}


void I2C_Wait_Until_Flag_Set(uint8_t num)
{
	while(GET_BIT(TWCR, 7) == 0) {
  da:	06 b6       	in	r0, 0x36	; 54
  dc:	07 fc       	sbrc	r0, 7
  de:	0b c0       	rjmp	.+22     	; 0xf6 <I2C_Wait_Until_Flag_Set+0x1c>
		PORTD ^= 1 << num;
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <I2C_Wait_Until_Flag_Set+0xc>
  e4:	99 0f       	add	r25, r25
  e6:	8a 95       	dec	r24
  e8:	ea f7       	brpl	.-6      	; 0xe4 <I2C_Wait_Until_Flag_Set+0xa>
  ea:	82 b3       	in	r24, 0x12	; 18
  ec:	89 27       	eor	r24, r25
  ee:	82 bb       	out	0x12, r24	; 18
}


void I2C_Wait_Until_Flag_Set(uint8_t num)
{
	while(GET_BIT(TWCR, 7) == 0) {
  f0:	06 b6       	in	r0, 0x36	; 54
  f2:	07 fe       	sbrs	r0, 7
  f4:	fa cf       	rjmp	.-12     	; 0xea <I2C_Wait_Until_Flag_Set+0x10>
  f6:	08 95       	ret

000000f8 <main>:
#include <avr/io.h>
#include "i2c.h"

int main(void)
{
	DDRA = 0x00;
  f8:	1a ba       	out	0x1a, r1	; 26
	DDRD = 0x00;
  fa:	11 ba       	out	0x11, r1	; 17
	// enable
	SET_BIT(TWCR, 2);
  fc:	86 b7       	in	r24, 0x36	; 54
  fe:	84 60       	ori	r24, 0x04	; 4
 100:	86 bf       	out	0x36, r24	; 54
	// enable ACK
	SET_BIT(TWCR, 6);
 102:	86 b7       	in	r24, 0x36	; 54
 104:	80 64       	ori	r24, 0x40	; 64
 106:	86 bf       	out	0x36, r24	; 54
	// clear start bit
	CLR_BIT(TWCR, 5);
 108:	86 b7       	in	r24, 0x36	; 54
 10a:	8f 7d       	andi	r24, 0xDF	; 223
 10c:	86 bf       	out	0x36, r24	; 54
	// clr stop bit
	CLR_BIT(TWCR, 4);
 10e:	86 b7       	in	r24, 0x36	; 54
 110:	8f 7e       	andi	r24, 0xEF	; 239
 112:	86 bf       	out	0x36, r24	; 54
	// set slave address
	TWAR = 0b00110010;
 114:	82 e3       	ldi	r24, 0x32	; 50
 116:	82 b9       	out	0x02, r24	; 2
	// wait until the  slave is addressed by the transmitter
	I2C_Wait_Until_Flag_Set(0);
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	0e 94 6d 00 	call	0xda	; 0xda <I2C_Wait_Until_Flag_Set>
	I2C_Check_StatusCode(0xA8, 0);
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	88 ea       	ldi	r24, 0xA8	; 168
 122:	0e 94 49 00 	call	0x92	; 0x92 <I2C_Check_StatusCode>
	TWDR = 'a';
 126:	81 e6       	ldi	r24, 0x61	; 97
 128:	83 b9       	out	0x03, r24	; 3
	I2C_Clear_INT_AndEnable();
 12a:	0e 94 66 00 	call	0xcc	; 0xcc <I2C_Clear_INT_AndEnable>
	I2C_Wait_Until_Flag_Set(1);
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 6d 00 	call	0xda	; 0xda <I2C_Wait_Until_Flag_Set>
	I2C_Check_StatusCode(0xC0, 1);
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	80 ec       	ldi	r24, 0xC0	; 192
 138:	0e 94 49 00 	call	0x92	; 0x92 <I2C_Check_StatusCode>
 13c:	ff cf       	rjmp	.-2      	; 0x13c <main+0x44>

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
