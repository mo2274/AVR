
timer_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000001b8  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c2e  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000706  00000000  00000000  00000f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006b1  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00001d38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000054d  00000000  00000000  00001e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bba  00000000  00000000  0000235d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002f17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 38       	cpi	r26, 0x88	; 136
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  8a:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Dio_init>:
#include "Dio.h"

extern Dio_Config_t Dio_configuration;
	
/* initialization function */	
bool Dio_init(void) {	
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	e0 e6       	ldi	r30, 0x60	; 96
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	68 e8       	ldi	r22, 0x88	; 136
  9c:	70 e0       	ldi	r23, 0x00	; 0
			} else {
				status = ERROR;
				return status;
			}
		} else if (Dio_configuration.pins_config[i].direction == OUTPUT) {
			*(Dio_configuration.pins_config[i].ddr) |= (1 << Dio_configuration.pins_config[i].channel_num);
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	50 e0       	ldi	r21, 0x00	; 0
/* initialization function */	
bool Dio_init(void) {	
	bool status = SUCCESS;
	/* configuration of pins */
	for (int i = 0; i < NUM_OF_CHANNELS; i++) {
		if (Dio_configuration.pins_config[i].direction == INPUT) {
  a2:	80 81       	ld	r24, Z
  a4:	81 11       	cpse	r24, r1
  a6:	2f c0       	rjmp	.+94     	; 0x106 <Dio_init+0x74>
			*(Dio_configuration.pins_config[i].ddr) &= ~(1 << Dio_configuration.pins_config[i].channel_num); 
  a8:	c4 81       	ldd	r28, Z+4	; 0x04
  aa:	d5 81       	ldd	r29, Z+5	; 0x05
  ac:	98 81       	ld	r25, Y
  ae:	9a 01       	movw	r18, r20
  b0:	01 80       	ldd	r0, Z+1	; 0x01
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <Dio_init+0x26>
  b4:	22 0f       	add	r18, r18
  b6:	33 1f       	adc	r19, r19
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <Dio_init+0x22>
  bc:	82 2f       	mov	r24, r18
  be:	80 95       	com	r24
  c0:	89 23       	and	r24, r25
  c2:	88 83       	st	Y, r24
			if (Dio_configuration.pins_config[i].pull_up == PULL_UP) {
  c4:	82 81       	ldd	r24, Z+2	; 0x02
  c6:	81 11       	cpse	r24, r1
  c8:	0d c0       	rjmp	.+26     	; 0xe4 <Dio_init+0x52>
				*(Dio_configuration.pins_config[i].port) |= (1 << Dio_configuration.pins_config[i].channel_num); 
  ca:	c6 81       	ldd	r28, Z+6	; 0x06
  cc:	d7 81       	ldd	r29, Z+7	; 0x07
  ce:	28 81       	ld	r18, Y
  d0:	ca 01       	movw	r24, r20
  d2:	01 80       	ldd	r0, Z+1	; 0x01
  d4:	02 c0       	rjmp	.+4      	; 0xda <Dio_init+0x48>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	0a 94       	dec	r0
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <Dio_init+0x44>
  de:	82 2b       	or	r24, r18
  e0:	88 83       	st	Y, r24
  e2:	2d c0       	rjmp	.+90     	; 0x13e <Dio_init+0xac>
			} else if (Dio_configuration.pins_config[i].pull_up == NO_PULL_UP) {
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	91 f5       	brne	.+100    	; 0x14c <Dio_init+0xba>
				*(Dio_configuration.pins_config[i].port) &= ~(1 << Dio_configuration.pins_config[i].channel_num); 
  e8:	c6 81       	ldd	r28, Z+6	; 0x06
  ea:	d7 81       	ldd	r29, Z+7	; 0x07
  ec:	98 81       	ld	r25, Y
  ee:	9a 01       	movw	r18, r20
  f0:	01 80       	ldd	r0, Z+1	; 0x01
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <Dio_init+0x66>
  f4:	22 0f       	add	r18, r18
  f6:	33 1f       	adc	r19, r19
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <Dio_init+0x62>
  fc:	82 2f       	mov	r24, r18
  fe:	80 95       	com	r24
 100:	89 23       	and	r24, r25
 102:	88 83       	st	Y, r24
 104:	1c c0       	rjmp	.+56     	; 0x13e <Dio_init+0xac>
			} else {
				status = ERROR;
				return status;
			}
		} else if (Dio_configuration.pins_config[i].direction == OUTPUT) {
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	19 f5       	brne	.+70     	; 0x150 <Dio_init+0xbe>
			*(Dio_configuration.pins_config[i].ddr) |= (1 << Dio_configuration.pins_config[i].channel_num);
 10a:	c4 81       	ldd	r28, Z+4	; 0x04
 10c:	d5 81       	ldd	r29, Z+5	; 0x05
 10e:	28 81       	ld	r18, Y
 110:	ca 01       	movw	r24, r20
 112:	01 80       	ldd	r0, Z+1	; 0x01
 114:	02 c0       	rjmp	.+4      	; 0x11a <Dio_init+0x88>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <Dio_init+0x84>
 11e:	82 2b       	or	r24, r18
 120:	88 83       	st	Y, r24
			*(Dio_configuration.pins_config[i].port) |= (Dio_configuration.pins_config[i].init_value << Dio_configuration.pins_config[i].channel_num);			 
 122:	c6 81       	ldd	r28, Z+6	; 0x06
 124:	d7 81       	ldd	r29, Z+7	; 0x07
 126:	28 81       	ld	r18, Y
 128:	93 81       	ldd	r25, Z+3	; 0x03
 12a:	89 2f       	mov	r24, r25
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	01 80       	ldd	r0, Z+1	; 0x01
 130:	02 c0       	rjmp	.+4      	; 0x136 <Dio_init+0xa4>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	0a 94       	dec	r0
 138:	e2 f7       	brpl	.-8      	; 0x132 <Dio_init+0xa0>
 13a:	82 2b       	or	r24, r18
 13c:	88 83       	st	Y, r24
 13e:	3a 96       	adiw	r30, 0x0a	; 10
	
/* initialization function */	
bool Dio_init(void) {	
	bool status = SUCCESS;
	/* configuration of pins */
	for (int i = 0; i < NUM_OF_CHANNELS; i++) {
 140:	e6 17       	cp	r30, r22
 142:	f7 07       	cpc	r31, r23
 144:	09 f0       	breq	.+2      	; 0x148 <Dio_init+0xb6>
 146:	ad cf       	rjmp	.-166    	; 0xa2 <Dio_init+0x10>
			} else {
			status = ERROR;
			return status;
		}		
	}		
	return status;
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	03 c0       	rjmp	.+6      	; 0x152 <Dio_init+0xc0>
				*(Dio_configuration.pins_config[i].port) |= (1 << Dio_configuration.pins_config[i].channel_num); 
			} else if (Dio_configuration.pins_config[i].pull_up == NO_PULL_UP) {
				*(Dio_configuration.pins_config[i].port) &= ~(1 << Dio_configuration.pins_config[i].channel_num); 
			} else {
				status = ERROR;
				return status;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	01 c0       	rjmp	.+2      	; 0x152 <Dio_init+0xc0>
		} else if (Dio_configuration.pins_config[i].direction == OUTPUT) {
			*(Dio_configuration.pins_config[i].ddr) |= (1 << Dio_configuration.pins_config[i].channel_num);
			*(Dio_configuration.pins_config[i].port) |= (Dio_configuration.pins_config[i].init_value << Dio_configuration.pins_config[i].channel_num);			 
		} else {
			status = ERROR;
			return status;
 150:	81 e0       	ldi	r24, 0x01	; 1
			status = ERROR;
			return status;
		}		
	}		
	return status;
}
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <__vector_7>:
#include "Common.h"
#include <avr/interrupt.h>



ISR(TIMER1_COMPA_vect) {
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
	PORTD ^= 1;
 166:	92 b3       	in	r25, 0x12	; 18
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	89 27       	eor	r24, r25
 16c:	82 bb       	out	0x12, r24	; 18
}
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <main>:

int main(void) {
	
	Dio_init();
 17c:	0e 94 49 00 	call	0x92	; 0x92 <Dio_init>
	
	// CTC mode
	CLR_BIT(TCCR1A, 0);
 180:	8f b5       	in	r24, 0x2f	; 47
 182:	8e 7f       	andi	r24, 0xFE	; 254
 184:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A, 1);
 186:	8f b5       	in	r24, 0x2f	; 47
 188:	8d 7f       	andi	r24, 0xFD	; 253
 18a:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B, 3);
 18c:	8e b5       	in	r24, 0x2e	; 46
 18e:	88 60       	ori	r24, 0x08	; 8
 190:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B, 4);
 192:	8e b5       	in	r24, 0x2e	; 46
 194:	8f 7e       	andi	r24, 0xEF	; 239
 196:	8e bd       	out	0x2e, r24	; 46
	// Compare match value for OC1A
	OCR1AH = 0x03;
 198:	83 e0       	ldi	r24, 0x03	; 3
 19a:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0xE8;
 19c:	88 ee       	ldi	r24, 0xE8	; 232
 19e:	8a bd       	out	0x2a, r24	; 42
	// enable compare match interrupt for timer1
	SET_BIT(TIMSK, 4);
 1a0:	89 b7       	in	r24, 0x39	; 57
 1a2:	80 61       	ori	r24, 0x10	; 16
 1a4:	89 bf       	out	0x39, r24	; 57
	SET_BIT(SREG, 7);
 1a6:	8f b7       	in	r24, 0x3f	; 63
 1a8:	80 68       	ori	r24, 0x80	; 128
 1aa:	8f bf       	out	0x3f, r24	; 63
	// set 1 prescaler
	TCCR1B |= 0x1;
 1ac:	8e b5       	in	r24, 0x2e	; 46
 1ae:	81 60       	ori	r24, 0x01	; 1
 1b0:	8e bd       	out	0x2e, r24	; 46
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <main+0x36>

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
