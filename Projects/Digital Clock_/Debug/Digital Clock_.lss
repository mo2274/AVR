
Digital Clock_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b06  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a0  00800060  00000b06  00000b7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000c1a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c4c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019f4  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000099e  00000000  00000000  00002744  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b8d  00000000  00000000  000030e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000015c  00000000  00000000  00003c70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000520  00000000  00000000  00003dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012c4  00000000  00000000  000042ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  000055b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	f0 04       	cpc	r15, r0
  56:	f9 04       	cpc	r15, r9
  58:	02 05       	cpc	r16, r2
  5a:	0b 05       	cpc	r16, r11
  5c:	14 05       	cpc	r17, r4
  5e:	1d 05       	cpc	r17, r13
  60:	26 05       	cpc	r18, r6
  62:	2f 05       	cpc	r18, r15
  64:	38 05       	cpc	r19, r8
  66:	40 05       	cpc	r20, r0
  68:	48 05       	cpc	r20, r8
  6a:	50 05       	cpc	r21, r0
  6c:	58 05       	cpc	r21, r8
  6e:	60 05       	cpc	r22, r0
  70:	68 05       	cpc	r22, r8
  72:	70 05       	cpc	r23, r0

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e6 e0       	ldi	r30, 0x06	; 6
  88:	fb e0       	ldi	r31, 0x0B	; 11
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a0 30       	cpi	r26, 0x00	; 0
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>
  96:	0e 94 d6 04 	call	0x9ac	; 0x9ac <main>
  9a:	0c 94 81 05 	jmp	0xb02	; 0xb02 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <Dio_init>:
		break;
	default:
		return ERROR;					
	}
	return SUCCESS;
}
  a2:	ef 92       	push	r14
  a4:	ff 92       	push	r15
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	7c 01       	movw	r14, r24
  ae:	fc 01       	movw	r30, r24
  b0:	bc 01       	movw	r22, r24
  b2:	6a 56       	subi	r22, 0x6A	; 106
  b4:	7f 4f       	sbci	r23, 0xFF	; 255
  b6:	41 e0       	ldi	r20, 0x01	; 1
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	90 81       	ld	r25, Z
  bc:	91 11       	cpse	r25, r1
  be:	30 c0       	rjmp	.+96     	; 0x120 <Dio_init+0x7e>
  c0:	c4 81       	ldd	r28, Z+4	; 0x04
  c2:	d5 81       	ldd	r29, Z+5	; 0x05
  c4:	28 81       	ld	r18, Y
  c6:	ca 01       	movw	r24, r20
  c8:	01 80       	ldd	r0, Z+1	; 0x01
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <Dio_init+0x2e>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	0a 94       	dec	r0
  d2:	e2 f7       	brpl	.-8      	; 0xcc <Dio_init+0x2a>
  d4:	98 2f       	mov	r25, r24
  d6:	90 95       	com	r25
  d8:	92 23       	and	r25, r18
  da:	98 83       	st	Y, r25
  dc:	82 81       	ldd	r24, Z+2	; 0x02
  de:	81 11       	cpse	r24, r1
  e0:	0d c0       	rjmp	.+26     	; 0xfc <Dio_init+0x5a>
  e2:	c6 81       	ldd	r28, Z+6	; 0x06
  e4:	d7 81       	ldd	r29, Z+7	; 0x07
  e6:	18 81       	ld	r17, Y
  e8:	ca 01       	movw	r24, r20
  ea:	01 80       	ldd	r0, Z+1	; 0x01
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <Dio_init+0x50>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	0a 94       	dec	r0
  f4:	e2 f7       	brpl	.-8      	; 0xee <Dio_init+0x4c>
  f6:	81 2b       	or	r24, r17
  f8:	88 83       	st	Y, r24
  fa:	2f c0       	rjmp	.+94     	; 0x15a <Dio_init+0xb8>
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	09 f0       	breq	.+2      	; 0x102 <Dio_init+0x60>
 100:	6a c0       	rjmp	.+212    	; 0x1d6 <Dio_init+0x134>
 102:	c6 81       	ldd	r28, Z+6	; 0x06
 104:	d7 81       	ldd	r29, Z+7	; 0x07
 106:	98 81       	ld	r25, Y
 108:	9a 01       	movw	r18, r20
 10a:	01 80       	ldd	r0, Z+1	; 0x01
 10c:	02 c0       	rjmp	.+4      	; 0x112 <Dio_init+0x70>
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <Dio_init+0x6c>
 116:	82 2f       	mov	r24, r18
 118:	80 95       	com	r24
 11a:	89 23       	and	r24, r25
 11c:	88 83       	st	Y, r24
 11e:	1d c0       	rjmp	.+58     	; 0x15a <Dio_init+0xb8>
 120:	91 30       	cpi	r25, 0x01	; 1
 122:	09 f0       	breq	.+2      	; 0x126 <Dio_init+0x84>
 124:	5a c0       	rjmp	.+180    	; 0x1da <Dio_init+0x138>
 126:	c4 81       	ldd	r28, Z+4	; 0x04
 128:	d5 81       	ldd	r29, Z+5	; 0x05
 12a:	18 81       	ld	r17, Y
 12c:	ca 01       	movw	r24, r20
 12e:	01 80       	ldd	r0, Z+1	; 0x01
 130:	02 c0       	rjmp	.+4      	; 0x136 <Dio_init+0x94>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	0a 94       	dec	r0
 138:	e2 f7       	brpl	.-8      	; 0x132 <Dio_init+0x90>
 13a:	81 2b       	or	r24, r17
 13c:	88 83       	st	Y, r24
 13e:	c6 81       	ldd	r28, Z+6	; 0x06
 140:	d7 81       	ldd	r29, Z+7	; 0x07
 142:	88 81       	ld	r24, Y
 144:	93 81       	ldd	r25, Z+3	; 0x03
 146:	29 2f       	mov	r18, r25
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	01 80       	ldd	r0, Z+1	; 0x01
 14c:	02 c0       	rjmp	.+4      	; 0x152 <Dio_init+0xb0>
 14e:	22 0f       	add	r18, r18
 150:	33 1f       	adc	r19, r19
 152:	0a 94       	dec	r0
 154:	e2 f7       	brpl	.-8      	; 0x14e <Dio_init+0xac>
 156:	28 2b       	or	r18, r24
 158:	28 83       	st	Y, r18
 15a:	3a 96       	adiw	r30, 0x0a	; 10
 15c:	6e 17       	cp	r22, r30
 15e:	7f 07       	cpc	r23, r31
 160:	09 f0       	breq	.+2      	; 0x164 <Dio_init+0xc2>
 162:	ab cf       	rjmp	.-170    	; 0xba <Dio_init+0x18>
 164:	f7 01       	movw	r30, r14
 166:	ea 56       	subi	r30, 0x6A	; 106
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	80 81       	ld	r24, Z
 16c:	81 11       	cpse	r24, r1
 16e:	1c c0       	rjmp	.+56     	; 0x1a8 <Dio_init+0x106>
 170:	33 96       	adiw	r30, 0x03	; 3
 172:	01 90       	ld	r0, Z+
 174:	f0 81       	ld	r31, Z
 176:	e0 2d       	mov	r30, r0
 178:	10 82       	st	Z, r1
 17a:	f7 01       	movw	r30, r14
 17c:	e9 56       	subi	r30, 0x69	; 105
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	80 81       	ld	r24, Z
 182:	81 11       	cpse	r24, r1
 184:	08 c0       	rjmp	.+16     	; 0x196 <Dio_init+0xf4>
 186:	e7 01       	movw	r28, r14
 188:	c5 56       	subi	r28, 0x65	; 101
 18a:	df 4f       	sbci	r29, 0xFF	; 255
 18c:	e8 81       	ld	r30, Y
 18e:	f9 81       	ldd	r31, Y+1	; 0x01
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	80 83       	st	Z, r24
 194:	1e c0       	rjmp	.+60     	; 0x1d2 <Dio_init+0x130>
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	11 f5       	brne	.+68     	; 0x1de <Dio_init+0x13c>
 19a:	e7 01       	movw	r28, r14
 19c:	c5 56       	subi	r28, 0x65	; 101
 19e:	df 4f       	sbci	r29, 0xFF	; 255
 1a0:	e8 81       	ld	r30, Y
 1a2:	f9 81       	ldd	r31, Y+1	; 0x01
 1a4:	10 82       	st	Z, r1
 1a6:	15 c0       	rjmp	.+42     	; 0x1d2 <Dio_init+0x130>
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	d9 f4       	brne	.+54     	; 0x1e2 <Dio_init+0x140>
 1ac:	f7 01       	movw	r30, r14
 1ae:	e7 56       	subi	r30, 0x67	; 103
 1b0:	ff 4f       	sbci	r31, 0xFF	; 255
 1b2:	01 90       	ld	r0, Z+
 1b4:	f0 81       	ld	r31, Z
 1b6:	e0 2d       	mov	r30, r0
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	80 83       	st	Z, r24
 1bc:	f7 01       	movw	r30, r14
 1be:	e5 56       	subi	r30, 0x65	; 101
 1c0:	ff 4f       	sbci	r31, 0xFF	; 255
 1c2:	01 90       	ld	r0, Z+
 1c4:	f0 81       	ld	r31, Z
 1c6:	e0 2d       	mov	r30, r0
 1c8:	e7 01       	movw	r28, r14
 1ca:	c8 56       	subi	r28, 0x68	; 104
 1cc:	df 4f       	sbci	r29, 0xFF	; 255
 1ce:	88 81       	ld	r24, Y
 1d0:	80 83       	st	Z, r24
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	07 c0       	rjmp	.+14     	; 0x1e4 <Dio_init+0x142>
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	05 c0       	rjmp	.+10     	; 0x1e4 <Dio_init+0x142>
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <Dio_init+0x142>
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <Dio_init+0x142>
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	1f 91       	pop	r17
 1ea:	ff 90       	pop	r15
 1ec:	ef 90       	pop	r14
 1ee:	08 95       	ret

000001f0 <Dio_Write_pin>:
/* change the status of a specific pin */
bool Dio_Write_pin(Pin_type pin_num, Port_t port_name, Data_t value) {
	/* check for error input */
	if (pin_num < 0 || pin_num > 7) {
 1f0:	88 30       	cpi	r24, 0x08	; 8
 1f2:	08 f0       	brcs	.+2      	; 0x1f6 <Dio_Write_pin+0x6>
 1f4:	86 c0       	rjmp	.+268    	; 0x302 <Dio_Write_pin+0x112>
		return ERROR;
	}

	switch (port_name) {
 1f6:	61 30       	cpi	r22, 0x01	; 1
 1f8:	39 f1       	breq	.+78     	; 0x248 <Dio_Write_pin+0x58>
 1fa:	38 f0       	brcs	.+14     	; 0x20a <Dio_Write_pin+0x1a>
 1fc:	62 30       	cpi	r22, 0x02	; 2
 1fe:	09 f4       	brne	.+2      	; 0x202 <Dio_Write_pin+0x12>
 200:	42 c0       	rjmp	.+132    	; 0x286 <Dio_Write_pin+0x96>
 202:	63 30       	cpi	r22, 0x03	; 3
 204:	09 f4       	brne	.+2      	; 0x208 <Dio_Write_pin+0x18>
 206:	5e c0       	rjmp	.+188    	; 0x2c4 <Dio_Write_pin+0xd4>
 208:	7e c0       	rjmp	.+252    	; 0x306 <Dio_Write_pin+0x116>
	case PORT_A:
		if (value) {
 20a:	44 23       	and	r20, r20
 20c:	71 f0       	breq	.+28     	; 0x22a <Dio_Write_pin+0x3a>
			PORTA |= (1 << pin_num);
 20e:	4b b3       	in	r20, 0x1b	; 27
 210:	21 e0       	ldi	r18, 0x01	; 1
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	b9 01       	movw	r22, r18
 216:	02 c0       	rjmp	.+4      	; 0x21c <Dio_Write_pin+0x2c>
 218:	66 0f       	add	r22, r22
 21a:	77 1f       	adc	r23, r23
 21c:	8a 95       	dec	r24
 21e:	e2 f7       	brpl	.-8      	; 0x218 <Dio_Write_pin+0x28>
 220:	cb 01       	movw	r24, r22
 222:	84 2b       	or	r24, r20
 224:	8b bb       	out	0x1b, r24	; 27
		}
		break;
	default:
		return ERROR;					
	}
	return SUCCESS;
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	08 95       	ret
	switch (port_name) {
	case PORT_A:
		if (value) {
			PORTA |= (1 << pin_num);
		} else {
			PORTA &= ~(1 << pin_num);
 22a:	4b b3       	in	r20, 0x1b	; 27
 22c:	21 e0       	ldi	r18, 0x01	; 1
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	b9 01       	movw	r22, r18
 232:	02 c0       	rjmp	.+4      	; 0x238 <Dio_Write_pin+0x48>
 234:	66 0f       	add	r22, r22
 236:	77 1f       	adc	r23, r23
 238:	8a 95       	dec	r24
 23a:	e2 f7       	brpl	.-8      	; 0x234 <Dio_Write_pin+0x44>
 23c:	cb 01       	movw	r24, r22
 23e:	80 95       	com	r24
 240:	84 23       	and	r24, r20
 242:	8b bb       	out	0x1b, r24	; 27
		}
		break;
	default:
		return ERROR;					
	}
	return SUCCESS;
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	08 95       	ret
		} else {
			PORTA &= ~(1 << pin_num);
		}	
		break;
	case PORT_B:
		if (value) {
 248:	44 23       	and	r20, r20
 24a:	71 f0       	breq	.+28     	; 0x268 <Dio_Write_pin+0x78>
			PORTB |= (1 << pin_num);
 24c:	48 b3       	in	r20, 0x18	; 24
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	b9 01       	movw	r22, r18
 254:	02 c0       	rjmp	.+4      	; 0x25a <Dio_Write_pin+0x6a>
 256:	66 0f       	add	r22, r22
 258:	77 1f       	adc	r23, r23
 25a:	8a 95       	dec	r24
 25c:	e2 f7       	brpl	.-8      	; 0x256 <Dio_Write_pin+0x66>
 25e:	cb 01       	movw	r24, r22
 260:	84 2b       	or	r24, r20
 262:	88 bb       	out	0x18, r24	; 24
		}
		break;
	default:
		return ERROR;					
	}
	return SUCCESS;
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	08 95       	ret
		break;
	case PORT_B:
		if (value) {
			PORTB |= (1 << pin_num);
			} else {
			PORTB &= ~(1 << pin_num);
 268:	48 b3       	in	r20, 0x18	; 24
 26a:	21 e0       	ldi	r18, 0x01	; 1
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	b9 01       	movw	r22, r18
 270:	02 c0       	rjmp	.+4      	; 0x276 <Dio_Write_pin+0x86>
 272:	66 0f       	add	r22, r22
 274:	77 1f       	adc	r23, r23
 276:	8a 95       	dec	r24
 278:	e2 f7       	brpl	.-8      	; 0x272 <Dio_Write_pin+0x82>
 27a:	cb 01       	movw	r24, r22
 27c:	80 95       	com	r24
 27e:	84 23       	and	r24, r20
 280:	88 bb       	out	0x18, r24	; 24
		}
		break;
	default:
		return ERROR;					
	}
	return SUCCESS;
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	08 95       	ret
			} else {
			PORTB &= ~(1 << pin_num);
		}
		break;
	case PORT_C:
		if (value) {
 286:	44 23       	and	r20, r20
 288:	71 f0       	breq	.+28     	; 0x2a6 <Dio_Write_pin+0xb6>
			PORTC |= (1 << pin_num);
 28a:	45 b3       	in	r20, 0x15	; 21
 28c:	21 e0       	ldi	r18, 0x01	; 1
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	b9 01       	movw	r22, r18
 292:	02 c0       	rjmp	.+4      	; 0x298 <Dio_Write_pin+0xa8>
 294:	66 0f       	add	r22, r22
 296:	77 1f       	adc	r23, r23
 298:	8a 95       	dec	r24
 29a:	e2 f7       	brpl	.-8      	; 0x294 <Dio_Write_pin+0xa4>
 29c:	cb 01       	movw	r24, r22
 29e:	84 2b       	or	r24, r20
 2a0:	85 bb       	out	0x15, r24	; 21
		}
		break;
	default:
		return ERROR;					
	}
	return SUCCESS;
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	08 95       	ret
		break;
	case PORT_C:
		if (value) {
			PORTC |= (1 << pin_num);
			} else {
			PORTC &= ~(1 << pin_num);
 2a6:	45 b3       	in	r20, 0x15	; 21
 2a8:	21 e0       	ldi	r18, 0x01	; 1
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	b9 01       	movw	r22, r18
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <Dio_Write_pin+0xc4>
 2b0:	66 0f       	add	r22, r22
 2b2:	77 1f       	adc	r23, r23
 2b4:	8a 95       	dec	r24
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <Dio_Write_pin+0xc0>
 2b8:	cb 01       	movw	r24, r22
 2ba:	80 95       	com	r24
 2bc:	84 23       	and	r24, r20
 2be:	85 bb       	out	0x15, r24	; 21
		}
		break;
	default:
		return ERROR;					
	}
	return SUCCESS;
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	08 95       	ret
			} else {
			PORTC &= ~(1 << pin_num);
		}
		break;
	case PORT_D:
		if (value) {
 2c4:	44 23       	and	r20, r20
 2c6:	71 f0       	breq	.+28     	; 0x2e4 <Dio_Write_pin+0xf4>
			PORTD |= (1 << pin_num);
 2c8:	42 b3       	in	r20, 0x12	; 18
 2ca:	21 e0       	ldi	r18, 0x01	; 1
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	b9 01       	movw	r22, r18
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <Dio_Write_pin+0xe6>
 2d2:	66 0f       	add	r22, r22
 2d4:	77 1f       	adc	r23, r23
 2d6:	8a 95       	dec	r24
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <Dio_Write_pin+0xe2>
 2da:	cb 01       	movw	r24, r22
 2dc:	84 2b       	or	r24, r20
 2de:	82 bb       	out	0x12, r24	; 18
		}
		break;
	default:
		return ERROR;					
	}
	return SUCCESS;
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	08 95       	ret
		break;
	case PORT_D:
		if (value) {
			PORTD |= (1 << pin_num);
			} else {
			PORTD &= ~(1 << pin_num);
 2e4:	42 b3       	in	r20, 0x12	; 18
 2e6:	21 e0       	ldi	r18, 0x01	; 1
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	b9 01       	movw	r22, r18
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <Dio_Write_pin+0x102>
 2ee:	66 0f       	add	r22, r22
 2f0:	77 1f       	adc	r23, r23
 2f2:	8a 95       	dec	r24
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <Dio_Write_pin+0xfe>
 2f6:	cb 01       	movw	r24, r22
 2f8:	80 95       	com	r24
 2fa:	84 23       	and	r24, r20
 2fc:	82 bb       	out	0x12, r24	; 18
		}
		break;
	default:
		return ERROR;					
	}
	return SUCCESS;
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	08 95       	ret
}
/* change the status of a specific pin */
bool Dio_Write_pin(Pin_type pin_num, Port_t port_name, Data_t value) {
	/* check for error input */
	if (pin_num < 0 || pin_num > 7) {
		return ERROR;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	08 95       	ret
			} else {
			PORTD &= ~(1 << pin_num);
		}
		break;
	default:
		return ERROR;					
 306:	81 e0       	ldi	r24, 0x01	; 1
	}
	return SUCCESS;
}
 308:	08 95       	ret

0000030a <Dio_Read_port>:
/* read the data from a specific port */
bool Dio_Read_port(Port_t port_name, Data_t* location) {
	
	switch (port_name) {
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	59 f0       	breq	.+22     	; 0x324 <Dio_Read_port+0x1a>
 30e:	28 f0       	brcs	.+10     	; 0x31a <Dio_Read_port+0x10>
 310:	82 30       	cpi	r24, 0x02	; 2
 312:	69 f0       	breq	.+26     	; 0x32e <Dio_Read_port+0x24>
 314:	83 30       	cpi	r24, 0x03	; 3
 316:	81 f0       	breq	.+32     	; 0x338 <Dio_Read_port+0x2e>
 318:	14 c0       	rjmp	.+40     	; 0x342 <Dio_Read_port+0x38>
	case PORT_A:
		*location = PINA;
 31a:	89 b3       	in	r24, 0x19	; 25
 31c:	fb 01       	movw	r30, r22
 31e:	80 83       	st	Z, r24
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;	
 320:	80 e0       	ldi	r24, 0x00	; 0
bool Dio_Read_port(Port_t port_name, Data_t* location) {
	
	switch (port_name) {
	case PORT_A:
		*location = PINA;
		break;
 322:	08 95       	ret
	case PORT_B:
		*location = PINB;
 324:	86 b3       	in	r24, 0x16	; 22
 326:	fb 01       	movw	r30, r22
 328:	80 83       	st	Z, r24
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;	
 32a:	80 e0       	ldi	r24, 0x00	; 0
	case PORT_A:
		*location = PINA;
		break;
	case PORT_B:
		*location = PINB;
		break;
 32c:	08 95       	ret
	case PORT_C:
		*location = PINC;
 32e:	83 b3       	in	r24, 0x13	; 19
 330:	fb 01       	movw	r30, r22
 332:	80 83       	st	Z, r24
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;	
 334:	80 e0       	ldi	r24, 0x00	; 0
	case PORT_B:
		*location = PINB;
		break;
	case PORT_C:
		*location = PINC;
		break;
 336:	08 95       	ret
	case PORT_D:
		*location = PIND;
 338:	80 b3       	in	r24, 0x10	; 16
 33a:	fb 01       	movw	r30, r22
 33c:	80 83       	st	Z, r24
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;	
 33e:	80 e0       	ldi	r24, 0x00	; 0
	case PORT_C:
		*location = PINC;
		break;
	case PORT_D:
		*location = PIND;
		break;
 340:	08 95       	ret
	default:
		return ERROR;
 342:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return SUCCESS;	
}
 344:	08 95       	ret

00000346 <Dio_Write_port>:
/* change the value of a specific port */
bool Dio_Write_port(Port_t port_name, Data_t value) {
	if (value < 0 || value > 255) {
		return ERROR;
	}
	switch (port_name) {
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	49 f0       	breq	.+18     	; 0x35c <Dio_Write_port+0x16>
 34a:	28 f0       	brcs	.+10     	; 0x356 <Dio_Write_port+0x10>
 34c:	82 30       	cpi	r24, 0x02	; 2
 34e:	49 f0       	breq	.+18     	; 0x362 <Dio_Write_port+0x1c>
 350:	83 30       	cpi	r24, 0x03	; 3
 352:	51 f0       	breq	.+20     	; 0x368 <Dio_Write_port+0x22>
 354:	0c c0       	rjmp	.+24     	; 0x36e <Dio_Write_port+0x28>
	case PORT_A:
		PORTA = value;
 356:	6b bb       	out	0x1b, r22	; 27
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;	
 358:	80 e0       	ldi	r24, 0x00	; 0
		return ERROR;
	}
	switch (port_name) {
	case PORT_A:
		PORTA = value;
		break;
 35a:	08 95       	ret
	case PORT_B:
		PORTB = value;
 35c:	68 bb       	out	0x18, r22	; 24
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;	
 35e:	80 e0       	ldi	r24, 0x00	; 0
	case PORT_A:
		PORTA = value;
		break;
	case PORT_B:
		PORTB = value;
		break;
 360:	08 95       	ret
	case PORT_C:
		PORTC = value;
 362:	65 bb       	out	0x15, r22	; 21
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;	
 364:	80 e0       	ldi	r24, 0x00	; 0
	case PORT_B:
		PORTB = value;
		break;
	case PORT_C:
		PORTC = value;
		break;
 366:	08 95       	ret
	case PORT_D:
		PORTD = value;
 368:	62 bb       	out	0x12, r22	; 18
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;	
 36a:	80 e0       	ldi	r24, 0x00	; 0
	case PORT_C:
		PORTC = value;
		break;
	case PORT_D:
		PORTD = value;
		break;
 36c:	08 95       	ret
	default:
		return ERROR;
 36e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return SUCCESS;	
}
 370:	08 95       	ret

00000372 <keyPad_Read>:
 */ 

#include "StdTypes.h"
#include "Dio.h"

Data_t keyPad_Read(Port_t port_name) {
 372:	ff 92       	push	r15
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	1f 92       	push	r1
 37e:	cd b7       	in	r28, 0x3d	; 61
 380:	de b7       	in	r29, 0x3e	; 62
 382:	18 2f       	mov	r17, r24
	Data_t key = '\0';
	Data_t keypad_input;
	if (Dio_Write_port(port_name, 0xFF) == ERROR){
 384:	6f ef       	ldi	r22, 0xFF	; 255
 386:	0e 94 a3 01 	call	0x346	; 0x346 <Dio_Write_port>
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	09 f4       	brne	.+2      	; 0x390 <keyPad_Read+0x1e>
 38e:	7a c1       	rjmp	.+756    	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
		return '\0';
	} 
	if (Dio_Write_pin(0, port_name, 0) == ERROR) {
 390:	40 e0       	ldi	r20, 0x00	; 0
 392:	61 2f       	mov	r22, r17
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_Write_pin>
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	09 f4       	brne	.+2      	; 0x3a0 <keyPad_Read+0x2e>
 39e:	74 c1       	rjmp	.+744    	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
		return '\0';
	}
	if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
 3a0:	be 01       	movw	r22, r28
 3a2:	6f 5f       	subi	r22, 0xFF	; 255
 3a4:	7f 4f       	sbci	r23, 0xFF	; 255
 3a6:	81 2f       	mov	r24, r17
 3a8:	0e 94 85 01 	call	0x30a	; 0x30a <Dio_Read_port>
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	09 f4       	brne	.+2      	; 0x3b2 <keyPad_Read+0x40>
 3b0:	6d c1       	rjmp	.+730    	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
		return '\0';
	}
	switch (keypad_input & 0xF0) {
 3b2:	89 81       	ldd	r24, Y+1	; 0x01
 3b4:	80 7f       	andi	r24, 0xF0	; 240
 3b6:	80 3b       	cpi	r24, 0xB0	; 176
 3b8:	31 f1       	breq	.+76     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3ba:	18 f4       	brcc	.+6      	; 0x3c2 <keyPad_Read+0x50>
 3bc:	80 37       	cpi	r24, 0x70	; 112
 3be:	91 f1       	breq	.+100    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3c0:	40 c0       	rjmp	.+128    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 3c2:	80 3d       	cpi	r24, 0xD0	; 208
 3c4:	89 f0       	breq	.+34     	; 0x3e8 <keyPad_Read+0x76>
 3c6:	80 3e       	cpi	r24, 0xE0	; 224
 3c8:	e1 f5       	brne	.+120    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		case 0xE0:
			key = '7';
			while ((keypad_input & 0xF0) == 0xE0) {
				if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
 3ca:	be 01       	movw	r22, r28
 3cc:	6f 5f       	subi	r22, 0xFF	; 255
 3ce:	7f 4f       	sbci	r23, 0xFF	; 255
 3d0:	81 2f       	mov	r24, r17
 3d2:	0e 94 85 01 	call	0x30a	; 0x30a <Dio_Read_port>
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	09 f4       	brne	.+2      	; 0x3dc <keyPad_Read+0x6a>
 3da:	5a c1       	rjmp	.+692    	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
		return '\0';
	}
	switch (keypad_input & 0xF0) {
		case 0xE0:
			key = '7';
			while ((keypad_input & 0xF0) == 0xE0) {
 3dc:	89 81       	ldd	r24, Y+1	; 0x01
 3de:	80 7f       	andi	r24, 0xF0	; 240
 3e0:	80 3e       	cpi	r24, 0xE0	; 224
 3e2:	99 f3       	breq	.-26     	; 0x3ca <keyPad_Read+0x58>
	if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
		return '\0';
	}
	switch (keypad_input & 0xF0) {
		case 0xE0:
			key = '7';
 3e4:	07 e3       	ldi	r16, 0x37	; 55
 3e6:	79 c1       	rjmp	.+754    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
			};
			break;
		case 0xD0:
			key = '8';
			while ((keypad_input & 0xF0) == 0xD0) {
				if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
 3e8:	be 01       	movw	r22, r28
 3ea:	6f 5f       	subi	r22, 0xFF	; 255
 3ec:	7f 4f       	sbci	r23, 0xFF	; 255
 3ee:	81 2f       	mov	r24, r17
 3f0:	0e 94 85 01 	call	0x30a	; 0x30a <Dio_Read_port>
 3f4:	81 30       	cpi	r24, 0x01	; 1
 3f6:	09 f4       	brne	.+2      	; 0x3fa <keyPad_Read+0x88>
 3f8:	4d c1       	rjmp	.+666    	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
				}
			};
			break;
		case 0xD0:
			key = '8';
			while ((keypad_input & 0xF0) == 0xD0) {
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
 3fc:	80 7f       	andi	r24, 0xF0	; 240
 3fe:	80 3d       	cpi	r24, 0xD0	; 208
 400:	99 f3       	breq	.-26     	; 0x3e8 <keyPad_Read+0x76>
					return '\0';
				}
			};
			break;
		case 0xD0:
			key = '8';
 402:	08 e3       	ldi	r16, 0x38	; 56
 404:	6a c1       	rjmp	.+724    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
			};
			break;
		case 0xB0:
			key = '9';
			while ((keypad_input & 0xF0) == 0xB0) {
				if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
 406:	be 01       	movw	r22, r28
 408:	6f 5f       	subi	r22, 0xFF	; 255
 40a:	7f 4f       	sbci	r23, 0xFF	; 255
 40c:	81 2f       	mov	r24, r17
 40e:	0e 94 85 01 	call	0x30a	; 0x30a <Dio_Read_port>
 412:	81 30       	cpi	r24, 0x01	; 1
 414:	09 f4       	brne	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 416:	40 c1       	rjmp	.+640    	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
				}
			};
			break;
		case 0xB0:
			key = '9';
			while ((keypad_input & 0xF0) == 0xB0) {
 418:	89 81       	ldd	r24, Y+1	; 0x01
 41a:	80 7f       	andi	r24, 0xF0	; 240
 41c:	80 3b       	cpi	r24, 0xB0	; 176
 41e:	99 f3       	breq	.-26     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
					return '\0';
				}
			};
			break;
		case 0xB0:
			key = '9';
 420:	09 e3       	ldi	r16, 0x39	; 57
 422:	5b c1       	rjmp	.+694    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
			};
			break;
		case 0x70:
			key = '-';
			while ((keypad_input & 0xF0) == 0x70) {
				if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
 424:	be 01       	movw	r22, r28
 426:	6f 5f       	subi	r22, 0xFF	; 255
 428:	7f 4f       	sbci	r23, 0xFF	; 255
 42a:	81 2f       	mov	r24, r17
 42c:	0e 94 85 01 	call	0x30a	; 0x30a <Dio_Read_port>
 430:	81 30       	cpi	r24, 0x01	; 1
 432:	09 f4       	brne	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 434:	33 c1       	rjmp	.+614    	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
				}
			};
			break;
		case 0x70:
			key = '-';
			while ((keypad_input & 0xF0) == 0x70) {
 436:	89 81       	ldd	r24, Y+1	; 0x01
 438:	80 7f       	andi	r24, 0xF0	; 240
 43a:	80 37       	cpi	r24, 0x70	; 112
 43c:	99 f3       	breq	.-26     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
					return '\0';
				}
			};
			break;
		case 0x70:
			key = '-';
 43e:	0d e2       	ldi	r16, 0x2D	; 45
 440:	4c c1       	rjmp	.+664    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
					return '\0';
				}
			};
			break;
		default:
			if (Dio_Write_pin(0, port_name, 1) == ERROR) {
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	61 2f       	mov	r22, r17
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_Write_pin>
 44c:	81 30       	cpi	r24, 0x01	; 1
 44e:	09 f4       	brne	.+2      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 450:	27 c1       	rjmp	.+590    	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
				return '\0';
			}
			if (Dio_Write_pin(1, port_name, 0) == ERROR) {
 452:	40 e0       	ldi	r20, 0x00	; 0
 454:	61 2f       	mov	r22, r17
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_Write_pin>
 45c:	81 30       	cpi	r24, 0x01	; 1
 45e:	09 f4       	brne	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 460:	21 c1       	rjmp	.+578    	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
				return '\0';
			}
			if (Dio_Read_port(port_name, &keypad_input)) {
 462:	be 01       	movw	r22, r28
 464:	6f 5f       	subi	r22, 0xFF	; 255
 466:	7f 4f       	sbci	r23, 0xFF	; 255
 468:	81 2f       	mov	r24, r17
 46a:	0e 94 85 01 	call	0x30a	; 0x30a <Dio_Read_port>
 46e:	08 2f       	mov	r16, r24
 470:	81 11       	cpse	r24, r1
 472:	1a c1       	rjmp	.+564    	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
				return '\0';
			}
			switch (keypad_input & 0xF0) {
 474:	89 81       	ldd	r24, Y+1	; 0x01
 476:	80 7f       	andi	r24, 0xF0	; 240
 478:	80 3b       	cpi	r24, 0xB0	; 176
 47a:	31 f1       	breq	.+76     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 47c:	18 f4       	brcc	.+6      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 47e:	80 37       	cpi	r24, 0x70	; 112
 480:	91 f1       	breq	.+100    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 482:	40 c0       	rjmp	.+128    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 484:	80 3d       	cpi	r24, 0xD0	; 208
 486:	89 f0       	breq	.+34     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 488:	80 3e       	cpi	r24, 0xE0	; 224
 48a:	e1 f5       	brne	.+120    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
				case 0xE0:
					key = '4';
					while ((keypad_input & 0xF0) == 0xE0) {
						if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
 48c:	be 01       	movw	r22, r28
 48e:	6f 5f       	subi	r22, 0xFF	; 255
 490:	7f 4f       	sbci	r23, 0xFF	; 255
 492:	81 2f       	mov	r24, r17
 494:	0e 94 85 01 	call	0x30a	; 0x30a <Dio_Read_port>
 498:	81 30       	cpi	r24, 0x01	; 1
 49a:	09 f4       	brne	.+2      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 49c:	1e c1       	rjmp	.+572    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
				return '\0';
			}
			switch (keypad_input & 0xF0) {
				case 0xE0:
					key = '4';
					while ((keypad_input & 0xF0) == 0xE0) {
 49e:	89 81       	ldd	r24, Y+1	; 0x01
 4a0:	80 7f       	andi	r24, 0xF0	; 240
 4a2:	80 3e       	cpi	r24, 0xE0	; 224
 4a4:	99 f3       	breq	.-26     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
			if (Dio_Read_port(port_name, &keypad_input)) {
				return '\0';
			}
			switch (keypad_input & 0xF0) {
				case 0xE0:
					key = '4';
 4a6:	04 e3       	ldi	r16, 0x34	; 52
 4a8:	18 c1       	rjmp	.+560    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
					};
					break;
				case 0xD0:
					key = '5';
					while ((keypad_input & 0xF0) == 0xD0) {
						if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
 4aa:	be 01       	movw	r22, r28
 4ac:	6f 5f       	subi	r22, 0xFF	; 255
 4ae:	7f 4f       	sbci	r23, 0xFF	; 255
 4b0:	81 2f       	mov	r24, r17
 4b2:	0e 94 85 01 	call	0x30a	; 0x30a <Dio_Read_port>
 4b6:	81 30       	cpi	r24, 0x01	; 1
 4b8:	09 f4       	brne	.+2      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4ba:	0f c1       	rjmp	.+542    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
						}
					};
					break;
				case 0xD0:
					key = '5';
					while ((keypad_input & 0xF0) == 0xD0) {
 4bc:	89 81       	ldd	r24, Y+1	; 0x01
 4be:	80 7f       	andi	r24, 0xF0	; 240
 4c0:	80 3d       	cpi	r24, 0xD0	; 208
 4c2:	99 f3       	breq	.-26     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
							return '\0';
						}
					};
					break;
				case 0xD0:
					key = '5';
 4c4:	05 e3       	ldi	r16, 0x35	; 53
 4c6:	09 c1       	rjmp	.+530    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
					};
					break;
				case 0xB0:
					key = '6';
					while ((keypad_input & 0xF0) == 0xB0) {
						if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
 4c8:	be 01       	movw	r22, r28
 4ca:	6f 5f       	subi	r22, 0xFF	; 255
 4cc:	7f 4f       	sbci	r23, 0xFF	; 255
 4ce:	81 2f       	mov	r24, r17
 4d0:	0e 94 85 01 	call	0x30a	; 0x30a <Dio_Read_port>
 4d4:	81 30       	cpi	r24, 0x01	; 1
 4d6:	09 f4       	brne	.+2      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4d8:	00 c1       	rjmp	.+512    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
						}
					};
					break;
				case 0xB0:
					key = '6';
					while ((keypad_input & 0xF0) == 0xB0) {
 4da:	89 81       	ldd	r24, Y+1	; 0x01
 4dc:	80 7f       	andi	r24, 0xF0	; 240
 4de:	80 3b       	cpi	r24, 0xB0	; 176
 4e0:	99 f3       	breq	.-26     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
							return '\0';
						}
					};
					break;
				case 0xB0:
					key = '6';
 4e2:	06 e3       	ldi	r16, 0x36	; 54
 4e4:	fa c0       	rjmp	.+500    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
					};
					break;
				case 0x70:
					key = 'x';
					while ((keypad_input & 0xF0) == 0x70) {
						if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
 4e6:	be 01       	movw	r22, r28
 4e8:	6f 5f       	subi	r22, 0xFF	; 255
 4ea:	7f 4f       	sbci	r23, 0xFF	; 255
 4ec:	81 2f       	mov	r24, r17
 4ee:	0e 94 85 01 	call	0x30a	; 0x30a <Dio_Read_port>
 4f2:	81 30       	cpi	r24, 0x01	; 1
 4f4:	09 f4       	brne	.+2      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4f6:	f1 c0       	rjmp	.+482    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
						}
					};
					break;
				case 0x70:
					key = 'x';
					while ((keypad_input & 0xF0) == 0x70) {
 4f8:	89 81       	ldd	r24, Y+1	; 0x01
 4fa:	80 7f       	andi	r24, 0xF0	; 240
 4fc:	80 37       	cpi	r24, 0x70	; 112
 4fe:	99 f3       	breq	.-26     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
							return '\0';
						}
					};
					break;
				case 0x70:
					key = 'x';
 500:	08 e7       	ldi	r16, 0x78	; 120
 502:	eb c0       	rjmp	.+470    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
							return '\0';
						}
					};
					break;
				default:
				if (Dio_Write_pin(1, port_name, 1) == ERROR) {
 504:	41 e0       	ldi	r20, 0x01	; 1
 506:	61 2f       	mov	r22, r17
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_Write_pin>
 50e:	81 30       	cpi	r24, 0x01	; 1
 510:	09 f4       	brne	.+2      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 512:	e3 c0       	rjmp	.+454    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
					return '\0';
				}
				if (Dio_Write_pin(2, port_name, 0) == ERROR) {
 514:	40 e0       	ldi	r20, 0x00	; 0
 516:	61 2f       	mov	r22, r17
 518:	82 e0       	ldi	r24, 0x02	; 2
 51a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_Write_pin>
 51e:	81 30       	cpi	r24, 0x01	; 1
 520:	09 f4       	brne	.+2      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 522:	db c0       	rjmp	.+438    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
					return '\0';
				}
				if (Dio_Read_port(port_name, &keypad_input)) {
 524:	be 01       	movw	r22, r28
 526:	6f 5f       	subi	r22, 0xFF	; 255
 528:	7f 4f       	sbci	r23, 0xFF	; 255
 52a:	81 2f       	mov	r24, r17
 52c:	0e 94 85 01 	call	0x30a	; 0x30a <Dio_Read_port>
 530:	f8 2e       	mov	r15, r24
 532:	81 11       	cpse	r24, r1
 534:	d2 c0       	rjmp	.+420    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
					return '\0';
				}
					switch (keypad_input & 0xF0) {
 536:	89 81       	ldd	r24, Y+1	; 0x01
 538:	80 7f       	andi	r24, 0xF0	; 240
 53a:	80 3b       	cpi	r24, 0xB0	; 176
 53c:	31 f1       	breq	.+76     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 53e:	18 f4       	brcc	.+6      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 540:	80 37       	cpi	r24, 0x70	; 112
 542:	91 f1       	breq	.+100    	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
 544:	40 c0       	rjmp	.+128    	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
 546:	80 3d       	cpi	r24, 0xD0	; 208
 548:	89 f0       	breq	.+34     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 54a:	80 3e       	cpi	r24, 0xE0	; 224
 54c:	e1 f5       	brne	.+120    	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
						case 0xE0:
							key = '1';
							while ((keypad_input & 0xF0) == 0xE0) {
								if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
 54e:	be 01       	movw	r22, r28
 550:	6f 5f       	subi	r22, 0xFF	; 255
 552:	7f 4f       	sbci	r23, 0xFF	; 255
 554:	81 2f       	mov	r24, r17
 556:	0e 94 85 01 	call	0x30a	; 0x30a <Dio_Read_port>
 55a:	81 30       	cpi	r24, 0x01	; 1
 55c:	09 f4       	brne	.+2      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 55e:	a6 c0       	rjmp	.+332    	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
					return '\0';
				}
					switch (keypad_input & 0xF0) {
						case 0xE0:
							key = '1';
							while ((keypad_input & 0xF0) == 0xE0) {
 560:	89 81       	ldd	r24, Y+1	; 0x01
 562:	80 7f       	andi	r24, 0xF0	; 240
 564:	80 3e       	cpi	r24, 0xE0	; 224
 566:	99 f3       	breq	.-26     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
				if (Dio_Read_port(port_name, &keypad_input)) {
					return '\0';
				}
					switch (keypad_input & 0xF0) {
						case 0xE0:
							key = '1';
 568:	01 e3       	ldi	r16, 0x31	; 49
 56a:	b7 c0       	rjmp	.+366    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
							};
							break;
						case 0xD0:
							key = '2';
							while ((keypad_input & 0xF0) == 0xD0) {
								if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
 56c:	be 01       	movw	r22, r28
 56e:	6f 5f       	subi	r22, 0xFF	; 255
 570:	7f 4f       	sbci	r23, 0xFF	; 255
 572:	81 2f       	mov	r24, r17
 574:	0e 94 85 01 	call	0x30a	; 0x30a <Dio_Read_port>
 578:	81 30       	cpi	r24, 0x01	; 1
 57a:	09 f4       	brne	.+2      	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 57c:	99 c0       	rjmp	.+306    	; 0x6b0 <__LOCK_REGION_LENGTH__+0x2b0>
								}
							};
							break;
						case 0xD0:
							key = '2';
							while ((keypad_input & 0xF0) == 0xD0) {
 57e:	89 81       	ldd	r24, Y+1	; 0x01
 580:	80 7f       	andi	r24, 0xF0	; 240
 582:	80 3d       	cpi	r24, 0xD0	; 208
 584:	99 f3       	breq	.-26     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
									return '\0';
								}
							};
							break;
						case 0xD0:
							key = '2';
 586:	02 e3       	ldi	r16, 0x32	; 50
 588:	a8 c0       	rjmp	.+336    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
							};
							break;
						case 0xB0:
							key = '3';
							while ((keypad_input & 0xF0) == 0xB0) {
								if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
 58a:	be 01       	movw	r22, r28
 58c:	6f 5f       	subi	r22, 0xFF	; 255
 58e:	7f 4f       	sbci	r23, 0xFF	; 255
 590:	81 2f       	mov	r24, r17
 592:	0e 94 85 01 	call	0x30a	; 0x30a <Dio_Read_port>
 596:	81 30       	cpi	r24, 0x01	; 1
 598:	09 f4       	brne	.+2      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 59a:	8c c0       	rjmp	.+280    	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
								}
							};
							break;
						case 0xB0:
							key = '3';
							while ((keypad_input & 0xF0) == 0xB0) {
 59c:	89 81       	ldd	r24, Y+1	; 0x01
 59e:	80 7f       	andi	r24, 0xF0	; 240
 5a0:	80 3b       	cpi	r24, 0xB0	; 176
 5a2:	99 f3       	breq	.-26     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
									return '\0';
								}
							};
							break;
						case 0xB0:
							key = '3';
 5a4:	03 e3       	ldi	r16, 0x33	; 51
 5a6:	99 c0       	rjmp	.+306    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
							};
							break;
						case 0x70:
							key = '-';
							while ((keypad_input & 0xF0) == 0x70) {
								if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
 5a8:	be 01       	movw	r22, r28
 5aa:	6f 5f       	subi	r22, 0xFF	; 255
 5ac:	7f 4f       	sbci	r23, 0xFF	; 255
 5ae:	81 2f       	mov	r24, r17
 5b0:	0e 94 85 01 	call	0x30a	; 0x30a <Dio_Read_port>
 5b4:	81 30       	cpi	r24, 0x01	; 1
 5b6:	09 f4       	brne	.+2      	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 5b8:	7f c0       	rjmp	.+254    	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
								}
							};
							break;
						case 0x70:
							key = '-';
							while ((keypad_input & 0xF0) == 0x70) {
 5ba:	89 81       	ldd	r24, Y+1	; 0x01
 5bc:	80 7f       	andi	r24, 0xF0	; 240
 5be:	80 37       	cpi	r24, 0x70	; 112
 5c0:	99 f3       	breq	.-26     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
									return '\0';
								}
							};
							break;
						case 0x70:
							key = '-';
 5c2:	0d e2       	ldi	r16, 0x2D	; 45
 5c4:	8a c0       	rjmp	.+276    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
									return '\0';
								}
							};
							break;
						default:
						if (Dio_Write_pin(2, port_name, 1) == ERROR) {
 5c6:	41 e0       	ldi	r20, 0x01	; 1
 5c8:	61 2f       	mov	r22, r17
 5ca:	82 e0       	ldi	r24, 0x02	; 2
 5cc:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_Write_pin>
 5d0:	81 30       	cpi	r24, 0x01	; 1
 5d2:	09 f4       	brne	.+2      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5d4:	73 c0       	rjmp	.+230    	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
							return '\0';
						}
						if (Dio_Write_pin(3, port_name, 0) == ERROR) {
 5d6:	40 e0       	ldi	r20, 0x00	; 0
 5d8:	61 2f       	mov	r22, r17
 5da:	83 e0       	ldi	r24, 0x03	; 3
 5dc:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_Write_pin>
 5e0:	81 30       	cpi	r24, 0x01	; 1
 5e2:	09 f4       	brne	.+2      	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 5e4:	6d c0       	rjmp	.+218    	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
							return '\0';
						}
						if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
 5e6:	be 01       	movw	r22, r28
 5e8:	6f 5f       	subi	r22, 0xFF	; 255
 5ea:	7f 4f       	sbci	r23, 0xFF	; 255
 5ec:	81 2f       	mov	r24, r17
 5ee:	0e 94 85 01 	call	0x30a	; 0x30a <Dio_Read_port>
 5f2:	81 30       	cpi	r24, 0x01	; 1
 5f4:	09 f4       	brne	.+2      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
 5f6:	66 c0       	rjmp	.+204    	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
							return '\0';
						}
							switch (keypad_input & 0xF0){
 5f8:	89 81       	ldd	r24, Y+1	; 0x01
 5fa:	80 7f       	andi	r24, 0xF0	; 240
 5fc:	80 3b       	cpi	r24, 0xB0	; 176
 5fe:	31 f1       	breq	.+76     	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
 600:	18 f4       	brcc	.+6      	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
 602:	80 37       	cpi	r24, 0x70	; 112
 604:	89 f1       	breq	.+98     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 606:	60 c0       	rjmp	.+192    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
 608:	80 3d       	cpi	r24, 0xD0	; 208
 60a:	91 f0       	breq	.+36     	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
 60c:	80 3e       	cpi	r24, 0xE0	; 224
 60e:	09 f0       	breq	.+2      	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 610:	5b c0       	rjmp	.+182    	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
								case 0xE0:
									key = 'C';
									while ((keypad_input & 0xF0) == 0xE0) {
										if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
 612:	be 01       	movw	r22, r28
 614:	6f 5f       	subi	r22, 0xFF	; 255
 616:	7f 4f       	sbci	r23, 0xFF	; 255
 618:	81 2f       	mov	r24, r17
 61a:	0e 94 85 01 	call	0x30a	; 0x30a <Dio_Read_port>
 61e:	81 30       	cpi	r24, 0x01	; 1
 620:	09 f4       	brne	.+2      	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
 622:	54 c0       	rjmp	.+168    	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
							return '\0';
						}
							switch (keypad_input & 0xF0){
								case 0xE0:
									key = 'C';
									while ((keypad_input & 0xF0) == 0xE0) {
 624:	89 81       	ldd	r24, Y+1	; 0x01
 626:	80 7f       	andi	r24, 0xF0	; 240
 628:	80 3e       	cpi	r24, 0xE0	; 224
 62a:	99 f3       	breq	.-26     	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
						if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
							return '\0';
						}
							switch (keypad_input & 0xF0){
								case 0xE0:
									key = 'C';
 62c:	03 e4       	ldi	r16, 0x43	; 67
 62e:	55 c0       	rjmp	.+170    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
									};
									break;
								case 0xD0:
									key = '0';
									while ((keypad_input & 0xF0) == 0xD0) {
										if (Dio_Read_port(port_name, &keypad_input)) {
 630:	be 01       	movw	r22, r28
 632:	6f 5f       	subi	r22, 0xFF	; 255
 634:	7f 4f       	sbci	r23, 0xFF	; 255
 636:	81 2f       	mov	r24, r17
 638:	0e 94 85 01 	call	0x30a	; 0x30a <Dio_Read_port>
 63c:	81 11       	cpse	r24, r1
 63e:	48 c0       	rjmp	.+144    	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
										}
									};
									break;
								case 0xD0:
									key = '0';
									while ((keypad_input & 0xF0) == 0xD0) {
 640:	89 81       	ldd	r24, Y+1	; 0x01
 642:	80 7f       	andi	r24, 0xF0	; 240
 644:	80 3d       	cpi	r24, 0xD0	; 208
 646:	a1 f3       	breq	.-24     	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
											return '\0';
										}
									};
									break;
								case 0xD0:
									key = '0';
 648:	00 e3       	ldi	r16, 0x30	; 48
 64a:	47 c0       	rjmp	.+142    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
									};
									break;
								case 0xB0:
									key = '=';
									while ((keypad_input & 0xF0) == 0xB0) {
										if (Dio_Read_port(port_name, &keypad_input)) {
 64c:	be 01       	movw	r22, r28
 64e:	6f 5f       	subi	r22, 0xFF	; 255
 650:	7f 4f       	sbci	r23, 0xFF	; 255
 652:	81 2f       	mov	r24, r17
 654:	0e 94 85 01 	call	0x30a	; 0x30a <Dio_Read_port>
 658:	81 11       	cpse	r24, r1
 65a:	3c c0       	rjmp	.+120    	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
										}
									};
									break;
								case 0xB0:
									key = '=';
									while ((keypad_input & 0xF0) == 0xB0) {
 65c:	89 81       	ldd	r24, Y+1	; 0x01
 65e:	80 7f       	andi	r24, 0xF0	; 240
 660:	80 3b       	cpi	r24, 0xB0	; 176
 662:	a1 f3       	breq	.-24     	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
											return '\0';
										}
									};
									break;
								case 0xB0:
									key = '=';
 664:	0d e3       	ldi	r16, 0x3D	; 61
 666:	39 c0       	rjmp	.+114    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
									};
									break;
								case 0x70:
									key = '+';
									while ((keypad_input & 0xF0) == 0x70) {
										if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
 668:	be 01       	movw	r22, r28
 66a:	6f 5f       	subi	r22, 0xFF	; 255
 66c:	7f 4f       	sbci	r23, 0xFF	; 255
 66e:	81 2f       	mov	r24, r17
 670:	0e 94 85 01 	call	0x30a	; 0x30a <Dio_Read_port>
 674:	81 30       	cpi	r24, 0x01	; 1
 676:	81 f1       	breq	.+96     	; 0x6d8 <__LOCK_REGION_LENGTH__+0x2d8>
										}
									};
									break;
								case 0x70:
									key = '+';
									while ((keypad_input & 0xF0) == 0x70) {
 678:	89 81       	ldd	r24, Y+1	; 0x01
 67a:	80 7f       	andi	r24, 0xF0	; 240
 67c:	80 37       	cpi	r24, 0x70	; 112
 67e:	a1 f3       	breq	.-24     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
											return '\0';
										}
									};
									break;
								case 0x70:
									key = '+';
 680:	0b e2       	ldi	r16, 0x2B	; 43
 682:	2b c0       	rjmp	.+86     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>

Data_t keyPad_Read(Port_t port_name) {
	Data_t key = '\0';
	Data_t keypad_input;
	if (Dio_Write_port(port_name, 0xFF) == ERROR){
		return '\0';
 684:	00 e0       	ldi	r16, 0x00	; 0
 686:	29 c0       	rjmp	.+82     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
	} 
	if (Dio_Write_pin(0, port_name, 0) == ERROR) {
		return '\0';
 688:	00 e0       	ldi	r16, 0x00	; 0
 68a:	27 c0       	rjmp	.+78     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
	}
	if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
		return '\0';
 68c:	00 e0       	ldi	r16, 0x00	; 0
 68e:	25 c0       	rjmp	.+74     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
	switch (keypad_input & 0xF0) {
		case 0xE0:
			key = '7';
			while ((keypad_input & 0xF0) == 0xE0) {
				if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
					return '\0';
 690:	00 e0       	ldi	r16, 0x00	; 0
 692:	23 c0       	rjmp	.+70     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
			break;
		case 0xD0:
			key = '8';
			while ((keypad_input & 0xF0) == 0xD0) {
				if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
					return '\0';
 694:	00 e0       	ldi	r16, 0x00	; 0
 696:	21 c0       	rjmp	.+66     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
			break;
		case 0xB0:
			key = '9';
			while ((keypad_input & 0xF0) == 0xB0) {
				if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
					return '\0';
 698:	00 e0       	ldi	r16, 0x00	; 0
 69a:	1f c0       	rjmp	.+62     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
			break;
		case 0x70:
			key = '-';
			while ((keypad_input & 0xF0) == 0x70) {
				if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
					return '\0';
 69c:	00 e0       	ldi	r16, 0x00	; 0
 69e:	1d c0       	rjmp	.+58     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
				}
			};
			break;
		default:
			if (Dio_Write_pin(0, port_name, 1) == ERROR) {
				return '\0';
 6a0:	00 e0       	ldi	r16, 0x00	; 0
 6a2:	1b c0       	rjmp	.+54     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
			}
			if (Dio_Write_pin(1, port_name, 0) == ERROR) {
				return '\0';
 6a4:	00 e0       	ldi	r16, 0x00	; 0
 6a6:	19 c0       	rjmp	.+50     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
			}
			if (Dio_Read_port(port_name, &keypad_input)) {
				return '\0';
 6a8:	00 e0       	ldi	r16, 0x00	; 0
 6aa:	17 c0       	rjmp	.+46     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
					switch (keypad_input & 0xF0) {
						case 0xE0:
							key = '1';
							while ((keypad_input & 0xF0) == 0xE0) {
								if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
									return '\0';
 6ac:	0f 2d       	mov	r16, r15
 6ae:	15 c0       	rjmp	.+42     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
							break;
						case 0xD0:
							key = '2';
							while ((keypad_input & 0xF0) == 0xD0) {
								if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
									return '\0';
 6b0:	0f 2d       	mov	r16, r15
 6b2:	13 c0       	rjmp	.+38     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
							break;
						case 0xB0:
							key = '3';
							while ((keypad_input & 0xF0) == 0xB0) {
								if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
									return '\0';
 6b4:	0f 2d       	mov	r16, r15
 6b6:	11 c0       	rjmp	.+34     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
							break;
						case 0x70:
							key = '-';
							while ((keypad_input & 0xF0) == 0x70) {
								if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
									return '\0';
 6b8:	0f 2d       	mov	r16, r15
 6ba:	0f c0       	rjmp	.+30     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
								}
							};
							break;
						default:
						if (Dio_Write_pin(2, port_name, 1) == ERROR) {
							return '\0';
 6bc:	0f 2d       	mov	r16, r15
 6be:	0d c0       	rjmp	.+26     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
						}
						if (Dio_Write_pin(3, port_name, 0) == ERROR) {
							return '\0';
 6c0:	0f 2d       	mov	r16, r15
 6c2:	0b c0       	rjmp	.+22     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
						}
						if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
							return '\0';
 6c4:	0f 2d       	mov	r16, r15
 6c6:	09 c0       	rjmp	.+18     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
											return '\0';
										}
									};
									break;
								default:
									key = '\0';
 6c8:	0f 2d       	mov	r16, r15
 6ca:	07 c0       	rjmp	.+14     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
							switch (keypad_input & 0xF0){
								case 0xE0:
									key = 'C';
									while ((keypad_input & 0xF0) == 0xE0) {
										if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
											return '\0';
 6cc:	0f 2d       	mov	r16, r15
 6ce:	05 c0       	rjmp	.+10     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
									break;
								case 0xD0:
									key = '0';
									while ((keypad_input & 0xF0) == 0xD0) {
										if (Dio_Read_port(port_name, &keypad_input)) {
											return '\0';
 6d0:	0f 2d       	mov	r16, r15
 6d2:	03 c0       	rjmp	.+6      	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
									break;
								case 0xB0:
									key = '=';
									while ((keypad_input & 0xF0) == 0xB0) {
										if (Dio_Read_port(port_name, &keypad_input)) {
											return '\0';
 6d4:	0f 2d       	mov	r16, r15
 6d6:	01 c0       	rjmp	.+2      	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
									break;
								case 0x70:
									key = '+';
									while ((keypad_input & 0xF0) == 0x70) {
										if (Dio_Read_port(port_name, &keypad_input) == ERROR) {
											return '\0';
 6d8:	0f 2d       	mov	r16, r15
					break;
			}
			break;
	}	
	return key;
}
 6da:	80 2f       	mov	r24, r16
 6dc:	0f 90       	pop	r0
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	1f 91       	pop	r17
 6e4:	0f 91       	pop	r16
 6e6:	ff 90       	pop	r15
 6e8:	08 95       	ret

000006ea <Digital_Clock>:
	return SUCCESS;
}



bool Digital_Clock(void) {
 6ea:	bf 92       	push	r11
 6ec:	cf 92       	push	r12
 6ee:	df 92       	push	r13
 6f0:	ef 92       	push	r14
 6f2:	ff 92       	push	r15
 6f4:	0f 93       	push	r16
 6f6:	1f 93       	push	r17
 6f8:	cf 93       	push	r28
 6fa:	df 93       	push	r29
	int8 num1 = -1, num2 = -1;
	for (uint8 hours = 0; hours <= 12; hours++) {
 6fc:	c1 2c       	mov	r12, r1
						return ERROR;
					}
					if (Dio_Write_pin(0, PORT_D, 0) == ERROR) {
						return ERROR;
					}
					if(SevenSeg_Display(sec / 10, PORT_C) == ERROR) {
 6fe:	0f 2e       	mov	r0, r31
 700:	fd ec       	ldi	r31, 0xCD	; 205
 702:	ef 2e       	mov	r14, r31
 704:	f0 2d       	mov	r31, r0
 706:	dd 24       	eor	r13, r13
 708:	da 94       	dec	r13
 70a:	41 c1       	rjmp	.+642    	; 0x98e <__stack+0x12f>
		for (uint8 min = 0; min < 60; min++) {
			for (uint8 sec = 0; sec < 60; sec++) {
				for (int i = 0; i < 58; i++) {
					/* adjust the digital clock */
					
					if (keyPad_Read(PORT_A) == 'C') {
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	0e 94 b9 01 	call	0x372	; 0x372 <keyPad_Read>
 712:	83 34       	cpi	r24, 0x43	; 67
 714:	09 f0       	breq	.+2      	; 0x718 <Digital_Clock+0x2e>
 716:	47 c0       	rjmp	.+142    	; 0x7a6 <Digital_Clock+0xbc>
 718:	cd 2d       	mov	r28, r13
						/* read the hours */
						while (num1 < 0) {
							num1  = keyPad_Read(PORT_A) - 48;
 71a:	80 e0       	ldi	r24, 0x00	; 0
 71c:	0e 94 b9 01 	call	0x372	; 0x372 <keyPad_Read>
 720:	d0 ed       	ldi	r29, 0xD0	; 208
 722:	d8 0f       	add	r29, r24
 724:	fd 2e       	mov	r15, r29
							while ( num2 < 0) {
 726:	cc 23       	and	r28, r28
 728:	34 f4       	brge	.+12     	; 0x736 <Digital_Clock+0x4c>
								num2  = keyPad_Read(PORT_A) - 48;
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	0e 94 b9 01 	call	0x372	; 0x372 <keyPad_Read>
 730:	c0 ed       	ldi	r28, 0xD0	; 208
 732:	c8 0f       	add	r28, r24
					
					if (keyPad_Read(PORT_A) == 'C') {
						/* read the hours */
						while (num1 < 0) {
							num1  = keyPad_Read(PORT_A) - 48;
							while ( num2 < 0) {
 734:	d2 f3       	brmi	.-12     	; 0x72a <Digital_Clock+0x40>
				for (int i = 0; i < 58; i++) {
					/* adjust the digital clock */
					
					if (keyPad_Read(PORT_A) == 'C') {
						/* read the hours */
						while (num1 < 0) {
 736:	ff 20       	and	r15, r15
 738:	84 f3       	brlt	.-32     	; 0x71a <Digital_Clock+0x30>
							num1  = keyPad_Read(PORT_A) - 48;
							while ( num2 < 0) {
								num2  = keyPad_Read(PORT_A) - 48;
							}
						}
						hours = num2 * 10 + num1;
 73a:	cc 0f       	add	r28, r28
 73c:	cc 2e       	mov	r12, r28
 73e:	cc 0c       	add	r12, r12
 740:	cc 0c       	add	r12, r12
 742:	cc 0d       	add	r28, r12
 744:	cc 2e       	mov	r12, r28
 746:	cd 0e       	add	r12, r29
						num1 = -1;
						num2 = -1;
 748:	cd 2d       	mov	r28, r13
						/* read the minutes */
						while (num1 < 0) {
							num1  = keyPad_Read(PORT_A) - 48;
 74a:	80 e0       	ldi	r24, 0x00	; 0
 74c:	0e 94 b9 01 	call	0x372	; 0x372 <keyPad_Read>
 750:	d0 ed       	ldi	r29, 0xD0	; 208
 752:	d8 0f       	add	r29, r24
 754:	fd 2e       	mov	r15, r29
							while ( num2 < 0) {
 756:	cc 23       	and	r28, r28
 758:	34 f4       	brge	.+12     	; 0x766 <Digital_Clock+0x7c>
								num2  = keyPad_Read(PORT_A) - 48;
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	0e 94 b9 01 	call	0x372	; 0x372 <keyPad_Read>
 760:	c0 ed       	ldi	r28, 0xD0	; 208
 762:	c8 0f       	add	r28, r24
						num1 = -1;
						num2 = -1;
						/* read the minutes */
						while (num1 < 0) {
							num1  = keyPad_Read(PORT_A) - 48;
							while ( num2 < 0) {
 764:	d2 f3       	brmi	.-12     	; 0x75a <Digital_Clock+0x70>
						}
						hours = num2 * 10 + num1;
						num1 = -1;
						num2 = -1;
						/* read the minutes */
						while (num1 < 0) {
 766:	ff 20       	and	r15, r15
 768:	84 f3       	brlt	.-32     	; 0x74a <Digital_Clock+0x60>
							num1  = keyPad_Read(PORT_A) - 48;
							while ( num2 < 0) {
								num2  = keyPad_Read(PORT_A) - 48;
							}
						}
						min = num2 * 10 + num1;
 76a:	cc 0f       	add	r28, r28
 76c:	fc 2e       	mov	r15, r28
 76e:	ff 0c       	add	r15, r15
 770:	ff 0c       	add	r15, r15
 772:	cf 0d       	add	r28, r15
 774:	fc 2e       	mov	r15, r28
 776:	fd 0e       	add	r15, r29
						num1 = -1;
						num2 = -1;
 778:	cd 2d       	mov	r28, r13
						/* read the seconds */
						while (num1 < 0) {
							num1  = keyPad_Read(PORT_A) - 48;
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	0e 94 b9 01 	call	0x372	; 0x372 <keyPad_Read>
 780:	d0 ed       	ldi	r29, 0xD0	; 208
 782:	d8 0f       	add	r29, r24
 784:	bd 2e       	mov	r11, r29
							while ( num2 < 0) {
 786:	cc 23       	and	r28, r28
 788:	34 f4       	brge	.+12     	; 0x796 <Digital_Clock+0xac>
								num2  = keyPad_Read(PORT_A) - 48;
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	0e 94 b9 01 	call	0x372	; 0x372 <keyPad_Read>
 790:	c0 ed       	ldi	r28, 0xD0	; 208
 792:	c8 0f       	add	r28, r24
						num1 = -1;
						num2 = -1;
						/* read the seconds */
						while (num1 < 0) {
							num1  = keyPad_Read(PORT_A) - 48;
							while ( num2 < 0) {
 794:	d2 f3       	brmi	.-12     	; 0x78a <Digital_Clock+0xa0>
						}
						min = num2 * 10 + num1;
						num1 = -1;
						num2 = -1;
						/* read the seconds */
						while (num1 < 0) {
 796:	bb 20       	and	r11, r11
 798:	84 f3       	brlt	.-32     	; 0x77a <Digital_Clock+0x90>
							num1  = keyPad_Read(PORT_A) - 48;
							while ( num2 < 0) {
								num2  = keyPad_Read(PORT_A) - 48;
							}
						}
						sec = num2 * 10 + num1;
 79a:	cc 0f       	add	r28, r28
 79c:	8c 2f       	mov	r24, r28
 79e:	88 0f       	add	r24, r24
 7a0:	88 0f       	add	r24, r24
 7a2:	c8 0f       	add	r28, r24
 7a4:	dc 0f       	add	r29, r28
						num1 = -1;
						num2 = -1;
					}
					if (Dio_Write_pin(5, PORT_D, 1) == ERROR) {
 7a6:	41 e0       	ldi	r20, 0x01	; 1
 7a8:	63 e0       	ldi	r22, 0x03	; 3
 7aa:	85 e0       	ldi	r24, 0x05	; 5
 7ac:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_Write_pin>
 7b0:	81 30       	cpi	r24, 0x01	; 1
 7b2:	09 f4       	brne	.+2      	; 0x7b6 <Digital_Clock+0xcc>
 7b4:	f1 c0       	rjmp	.+482    	; 0x998 <__stack+0x139>
						return ERROR;
					}
					if (Dio_Write_pin(0, PORT_D, 0) == ERROR) {
 7b6:	40 e0       	ldi	r20, 0x00	; 0
 7b8:	63 e0       	ldi	r22, 0x03	; 3
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_Write_pin>
 7c0:	81 30       	cpi	r24, 0x01	; 1
 7c2:	09 f4       	brne	.+2      	; 0x7c6 <Digital_Clock+0xdc>
 7c4:	e9 c0       	rjmp	.+466    	; 0x998 <__stack+0x139>
						return ERROR;
					}
					if(SevenSeg_Display(sec / 10, PORT_C) == ERROR) {
 7c6:	de 9d       	mul	r29, r14
 7c8:	81 2d       	mov	r24, r1
 7ca:	11 24       	eor	r1, r1
 7cc:	62 e0       	ldi	r22, 0x02	; 2
 7ce:	86 95       	lsr	r24
 7d0:	86 95       	lsr	r24
 7d2:	86 95       	lsr	r24
 7d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <SevenSeg_Display>
 7d8:	81 30       	cpi	r24, 0x01	; 1
 7da:	09 f4       	brne	.+2      	; 0x7de <Digital_Clock+0xf4>
 7dc:	dd c0       	rjmp	.+442    	; 0x998 <__stack+0x139>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7de:	89 e8       	ldi	r24, 0x89	; 137
 7e0:	92 e0       	ldi	r25, 0x02	; 2
 7e2:	01 97       	sbiw	r24, 0x01	; 1
 7e4:	f1 f7       	brne	.-4      	; 0x7e2 <Digital_Clock+0xf8>
 7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <Digital_Clock+0xfe>
 7e8:	00 00       	nop
						return ERROR;
					} 
					_delay_us(2600);
					if (Dio_Write_pin(0, PORT_D, 1) == ERROR) {
 7ea:	41 e0       	ldi	r20, 0x01	; 1
 7ec:	63 e0       	ldi	r22, 0x03	; 3
 7ee:	80 e0       	ldi	r24, 0x00	; 0
 7f0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_Write_pin>
 7f4:	81 30       	cpi	r24, 0x01	; 1
 7f6:	09 f4       	brne	.+2      	; 0x7fa <Digital_Clock+0x110>
 7f8:	cf c0       	rjmp	.+414    	; 0x998 <__stack+0x139>
						return ERROR;
					}
					if (Dio_Write_pin(1, PORT_D, 0) == ERROR) {
 7fa:	40 e0       	ldi	r20, 0x00	; 0
 7fc:	63 e0       	ldi	r22, 0x03	; 3
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_Write_pin>
 804:	81 30       	cpi	r24, 0x01	; 1
 806:	09 f4       	brne	.+2      	; 0x80a <Digital_Clock+0x120>
 808:	c7 c0       	rjmp	.+398    	; 0x998 <__stack+0x139>
						return ERROR;
					}
					if (SevenSeg_Display(sec % 10, PORT_C) == ERROR) {
 80a:	de 9d       	mul	r29, r14
 80c:	91 2d       	mov	r25, r1
 80e:	11 24       	eor	r1, r1
 810:	96 95       	lsr	r25
 812:	96 95       	lsr	r25
 814:	96 95       	lsr	r25
 816:	99 0f       	add	r25, r25
 818:	89 2f       	mov	r24, r25
 81a:	88 0f       	add	r24, r24
 81c:	88 0f       	add	r24, r24
 81e:	98 0f       	add	r25, r24
 820:	62 e0       	ldi	r22, 0x02	; 2
 822:	8d 2f       	mov	r24, r29
 824:	89 1b       	sub	r24, r25
 826:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <SevenSeg_Display>
 82a:	81 30       	cpi	r24, 0x01	; 1
 82c:	09 f4       	brne	.+2      	; 0x830 <Digital_Clock+0x146>
 82e:	b4 c0       	rjmp	.+360    	; 0x998 <__stack+0x139>
 830:	89 e8       	ldi	r24, 0x89	; 137
 832:	92 e0       	ldi	r25, 0x02	; 2
 834:	01 97       	sbiw	r24, 0x01	; 1
 836:	f1 f7       	brne	.-4      	; 0x834 <Digital_Clock+0x14a>
 838:	00 c0       	rjmp	.+0      	; 0x83a <Digital_Clock+0x150>
 83a:	00 00       	nop
						return ERROR;
					}
					_delay_us(2600);
					if (Dio_Write_pin(1, PORT_D, 1) == ERROR) {
 83c:	41 e0       	ldi	r20, 0x01	; 1
 83e:	63 e0       	ldi	r22, 0x03	; 3
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_Write_pin>
 846:	81 30       	cpi	r24, 0x01	; 1
 848:	09 f4       	brne	.+2      	; 0x84c <Digital_Clock+0x162>
 84a:	a6 c0       	rjmp	.+332    	; 0x998 <__stack+0x139>
						return ERROR;
					}
					if (Dio_Write_pin(2, PORT_D, 0) == ERROR) {
 84c:	40 e0       	ldi	r20, 0x00	; 0
 84e:	63 e0       	ldi	r22, 0x03	; 3
 850:	82 e0       	ldi	r24, 0x02	; 2
 852:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_Write_pin>
 856:	81 30       	cpi	r24, 0x01	; 1
 858:	09 f4       	brne	.+2      	; 0x85c <Digital_Clock+0x172>
 85a:	9e c0       	rjmp	.+316    	; 0x998 <__stack+0x139>
						return ERROR;
					}
					if (SevenSeg_Display(min / 10, PORT_C) == ERROR) {
 85c:	fe 9c       	mul	r15, r14
 85e:	81 2d       	mov	r24, r1
 860:	11 24       	eor	r1, r1
 862:	62 e0       	ldi	r22, 0x02	; 2
 864:	86 95       	lsr	r24
 866:	86 95       	lsr	r24
 868:	86 95       	lsr	r24
 86a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <SevenSeg_Display>
 86e:	81 30       	cpi	r24, 0x01	; 1
 870:	09 f4       	brne	.+2      	; 0x874 <__stack+0x15>
 872:	92 c0       	rjmp	.+292    	; 0x998 <__stack+0x139>
 874:	89 e8       	ldi	r24, 0x89	; 137
 876:	92 e0       	ldi	r25, 0x02	; 2
 878:	01 97       	sbiw	r24, 0x01	; 1
 87a:	f1 f7       	brne	.-4      	; 0x878 <__stack+0x19>
 87c:	00 c0       	rjmp	.+0      	; 0x87e <__stack+0x1f>
 87e:	00 00       	nop
						return ERROR;
					}
					_delay_us(2600);
					if (Dio_Write_pin(2, PORT_D, 1) == ERROR) {
 880:	41 e0       	ldi	r20, 0x01	; 1
 882:	63 e0       	ldi	r22, 0x03	; 3
 884:	82 e0       	ldi	r24, 0x02	; 2
 886:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_Write_pin>
 88a:	81 30       	cpi	r24, 0x01	; 1
 88c:	09 f4       	brne	.+2      	; 0x890 <__stack+0x31>
 88e:	84 c0       	rjmp	.+264    	; 0x998 <__stack+0x139>
						return ERROR;
					}
					if (Dio_Write_pin(3, PORT_D, 0) == ERROR) {
 890:	40 e0       	ldi	r20, 0x00	; 0
 892:	63 e0       	ldi	r22, 0x03	; 3
 894:	83 e0       	ldi	r24, 0x03	; 3
 896:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_Write_pin>
 89a:	81 30       	cpi	r24, 0x01	; 1
 89c:	09 f4       	brne	.+2      	; 0x8a0 <__stack+0x41>
 89e:	7c c0       	rjmp	.+248    	; 0x998 <__stack+0x139>
						return ERROR;
					} 
					if (SevenSeg_Display(min % 10, PORT_C) == ERROR) {
 8a0:	fe 9c       	mul	r15, r14
 8a2:	81 2d       	mov	r24, r1
 8a4:	11 24       	eor	r1, r1
 8a6:	86 95       	lsr	r24
 8a8:	86 95       	lsr	r24
 8aa:	86 95       	lsr	r24
 8ac:	88 0f       	add	r24, r24
 8ae:	98 2f       	mov	r25, r24
 8b0:	99 0f       	add	r25, r25
 8b2:	99 0f       	add	r25, r25
 8b4:	89 0f       	add	r24, r25
 8b6:	62 e0       	ldi	r22, 0x02	; 2
 8b8:	9f 2d       	mov	r25, r15
 8ba:	98 1b       	sub	r25, r24
 8bc:	89 2f       	mov	r24, r25
 8be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <SevenSeg_Display>
 8c2:	81 30       	cpi	r24, 0x01	; 1
 8c4:	09 f4       	brne	.+2      	; 0x8c8 <__stack+0x69>
 8c6:	68 c0       	rjmp	.+208    	; 0x998 <__stack+0x139>
 8c8:	89 e8       	ldi	r24, 0x89	; 137
 8ca:	92 e0       	ldi	r25, 0x02	; 2
 8cc:	01 97       	sbiw	r24, 0x01	; 1
 8ce:	f1 f7       	brne	.-4      	; 0x8cc <__stack+0x6d>
 8d0:	00 c0       	rjmp	.+0      	; 0x8d2 <__stack+0x73>
 8d2:	00 00       	nop
						return ERROR;
					}
					_delay_us(2600);
					if (Dio_Write_pin(3, PORT_D, 1)) {
 8d4:	41 e0       	ldi	r20, 0x01	; 1
 8d6:	63 e0       	ldi	r22, 0x03	; 3
 8d8:	83 e0       	ldi	r24, 0x03	; 3
 8da:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_Write_pin>
 8de:	c8 2f       	mov	r28, r24
 8e0:	81 11       	cpse	r24, r1
 8e2:	57 c0       	rjmp	.+174    	; 0x992 <__stack+0x133>
						return ERROR;
					}
					if (Dio_Write_pin(4, PORT_D, 0) == ERROR) {
 8e4:	40 e0       	ldi	r20, 0x00	; 0
 8e6:	63 e0       	ldi	r22, 0x03	; 3
 8e8:	84 e0       	ldi	r24, 0x04	; 4
 8ea:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_Write_pin>
 8ee:	81 30       	cpi	r24, 0x01	; 1
 8f0:	09 f4       	brne	.+2      	; 0x8f4 <__stack+0x95>
 8f2:	52 c0       	rjmp	.+164    	; 0x998 <__stack+0x139>
						return ERROR;
					}
					if (SevenSeg_Display(hours / 10, PORT_C) == ERROR) {
 8f4:	ce 9c       	mul	r12, r14
 8f6:	81 2d       	mov	r24, r1
 8f8:	11 24       	eor	r1, r1
 8fa:	62 e0       	ldi	r22, 0x02	; 2
 8fc:	86 95       	lsr	r24
 8fe:	86 95       	lsr	r24
 900:	86 95       	lsr	r24
 902:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <SevenSeg_Display>
 906:	81 30       	cpi	r24, 0x01	; 1
 908:	09 f4       	brne	.+2      	; 0x90c <__stack+0xad>
 90a:	46 c0       	rjmp	.+140    	; 0x998 <__stack+0x139>
 90c:	89 e8       	ldi	r24, 0x89	; 137
 90e:	92 e0       	ldi	r25, 0x02	; 2
 910:	01 97       	sbiw	r24, 0x01	; 1
 912:	f1 f7       	brne	.-4      	; 0x910 <__stack+0xb1>
 914:	00 c0       	rjmp	.+0      	; 0x916 <__stack+0xb7>
 916:	00 00       	nop
						return ERROR;
					}
					_delay_us(2600);
					if (Dio_Write_pin(4, PORT_D, 1) == ERROR) {
 918:	41 e0       	ldi	r20, 0x01	; 1
 91a:	63 e0       	ldi	r22, 0x03	; 3
 91c:	84 e0       	ldi	r24, 0x04	; 4
 91e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_Write_pin>
 922:	81 30       	cpi	r24, 0x01	; 1
 924:	c9 f1       	breq	.+114    	; 0x998 <__stack+0x139>
						return ERROR;
					}
					if (Dio_Write_pin(5, PORT_D, 0) == ERROR) {
 926:	40 e0       	ldi	r20, 0x00	; 0
 928:	63 e0       	ldi	r22, 0x03	; 3
 92a:	85 e0       	ldi	r24, 0x05	; 5
 92c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Dio_Write_pin>
 930:	81 30       	cpi	r24, 0x01	; 1
 932:	91 f1       	breq	.+100    	; 0x998 <__stack+0x139>
						return ERROR;
					}
					if (SevenSeg_Display(hours % 10, PORT_C) == ERROR) {
 934:	ce 9c       	mul	r12, r14
 936:	81 2d       	mov	r24, r1
 938:	11 24       	eor	r1, r1
 93a:	86 95       	lsr	r24
 93c:	86 95       	lsr	r24
 93e:	86 95       	lsr	r24
 940:	88 0f       	add	r24, r24
 942:	98 2f       	mov	r25, r24
 944:	99 0f       	add	r25, r25
 946:	99 0f       	add	r25, r25
 948:	89 0f       	add	r24, r25
 94a:	62 e0       	ldi	r22, 0x02	; 2
 94c:	9c 2d       	mov	r25, r12
 94e:	98 1b       	sub	r25, r24
 950:	89 2f       	mov	r24, r25
 952:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <SevenSeg_Display>
 956:	81 30       	cpi	r24, 0x01	; 1
 958:	f9 f0       	breq	.+62     	; 0x998 <__stack+0x139>
 95a:	89 e8       	ldi	r24, 0x89	; 137
 95c:	92 e0       	ldi	r25, 0x02	; 2
 95e:	01 97       	sbiw	r24, 0x01	; 1
 960:	f1 f7       	brne	.-4      	; 0x95e <__stack+0xff>
 962:	00 c0       	rjmp	.+0      	; 0x964 <__stack+0x105>
 964:	00 00       	nop
 966:	01 50       	subi	r16, 0x01	; 1
 968:	11 09       	sbc	r17, r1
bool Digital_Clock(void) {
	int8 num1 = -1, num2 = -1;
	for (uint8 hours = 0; hours <= 12; hours++) {
		for (uint8 min = 0; min < 60; min++) {
			for (uint8 sec = 0; sec < 60; sec++) {
				for (int i = 0; i < 58; i++) {
 96a:	09 f0       	breq	.+2      	; 0x96e <__stack+0x10f>
 96c:	cf ce       	rjmp	.-610    	; 0x70c <Digital_Clock+0x22>

bool Digital_Clock(void) {
	int8 num1 = -1, num2 = -1;
	for (uint8 hours = 0; hours <= 12; hours++) {
		for (uint8 min = 0; min < 60; min++) {
			for (uint8 sec = 0; sec < 60; sec++) {
 96e:	df 5f       	subi	r29, 0xFF	; 255
 970:	dc 33       	cpi	r29, 0x3C	; 60
 972:	18 f4       	brcc	.+6      	; 0x97a <__stack+0x11b>
	return SUCCESS;
}



bool Digital_Clock(void) {
 974:	0a e3       	ldi	r16, 0x3A	; 58
 976:	10 e0       	ldi	r17, 0x00	; 0
 978:	c9 ce       	rjmp	.-622    	; 0x70c <Digital_Clock+0x22>
	int8 num1 = -1, num2 = -1;
	for (uint8 hours = 0; hours <= 12; hours++) {
		for (uint8 min = 0; min < 60; min++) {
 97a:	f3 94       	inc	r15
 97c:	9b e3       	ldi	r25, 0x3B	; 59
 97e:	9f 15       	cp	r25, r15
 980:	10 f0       	brcs	.+4      	; 0x986 <__stack+0x127>
								num2  = keyPad_Read(PORT_A) - 48;
							}
						}
						min = num2 * 10 + num1;
						num1 = -1;
						num2 = -1;
 982:	d0 e0       	ldi	r29, 0x00	; 0
 984:	f7 cf       	rjmp	.-18     	; 0x974 <__stack+0x115>



bool Digital_Clock(void) {
	int8 num1 = -1, num2 = -1;
	for (uint8 hours = 0; hours <= 12; hours++) {
 986:	c3 94       	inc	r12
 988:	8c e0       	ldi	r24, 0x0C	; 12
 98a:	8c 15       	cp	r24, r12
 98c:	20 f0       	brcs	.+8      	; 0x996 <__stack+0x137>
								num2  = keyPad_Read(PORT_A) - 48;
							}
						}
						min = num2 * 10 + num1;
						num1 = -1;
						num2 = -1;
 98e:	f1 2c       	mov	r15, r1
 990:	f8 cf       	rjmp	.-16     	; 0x982 <__stack+0x123>
					if (SevenSeg_Display(min % 10, PORT_C) == ERROR) {
						return ERROR;
					}
					_delay_us(2600);
					if (Dio_Write_pin(3, PORT_D, 1)) {
						return ERROR;
 992:	81 e0       	ldi	r24, 0x01	; 1
 994:	01 c0       	rjmp	.+2      	; 0x998 <__stack+0x139>
					_delay_us(2600);
				}
			}
		}
	}
	return SUCCESS;	
 996:	8c 2f       	mov	r24, r28
 998:	df 91       	pop	r29
 99a:	cf 91       	pop	r28
 99c:	1f 91       	pop	r17
 99e:	0f 91       	pop	r16
 9a0:	ff 90       	pop	r15
 9a2:	ef 90       	pop	r14
 9a4:	df 90       	pop	r13
 9a6:	cf 90       	pop	r12
 9a8:	bf 90       	pop	r11
 9aa:	08 95       	ret

000009ac <main>:
extern Dio_Config_t default_configuration; 
bool Digital_Clock(void);

int main(void)
{	
	if (Dio_init(&default_configuration) == ERROR) {
 9ac:	80 e6       	ldi	r24, 0x60	; 96
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	0e 94 51 00 	call	0xa2	; 0xa2 <Dio_init>
 9b4:	81 30       	cpi	r24, 0x01	; 1
 9b6:	21 f0       	breq	.+8      	; 0x9c0 <main+0x14>
		return ERROR;
	}
    while (1) {
		if (Digital_Clock() == ERROR) {
 9b8:	0e 94 75 03 	call	0x6ea	; 0x6ea <Digital_Clock>
 9bc:	81 30       	cpi	r24, 0x01	; 1
 9be:	e1 f7       	brne	.-8      	; 0x9b8 <main+0xc>
			return ERROR;
		}
	}
	return SUCCESS;
}
 9c0:	81 e0       	ldi	r24, 0x01	; 1
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	08 95       	ret

000009c6 <SevenSeg_Display>:
#include "SevenSegment.h"
#include "Dio_Registers.h"
#include "Dio.h"

/* function to display the number on the seven segment */
bool SevenSeg_Display(Data_t number, Port_t port_name) {	
 9c6:	96 2f       	mov	r25, r22
	switch (number) {
 9c8:	48 2f       	mov	r20, r24
 9ca:	50 e0       	ldi	r21, 0x00	; 0
 9cc:	40 31       	cpi	r20, 0x10	; 16
 9ce:	51 05       	cpc	r21, r1
 9d0:	08 f0       	brcs	.+2      	; 0x9d4 <SevenSeg_Display+0xe>
 9d2:	8e c0       	rjmp	.+284    	; 0xaf0 <SevenSeg_Display+0x12a>
 9d4:	89 2f       	mov	r24, r25
 9d6:	fa 01       	movw	r30, r20
 9d8:	e6 5d       	subi	r30, 0xD6	; 214
 9da:	ff 4f       	sbci	r31, 0xFF	; 255
 9dc:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__tablejump2__>
	case 0x0:	
		if (Dio_Write_port(port_name, 0b00111111) == ERROR) {
 9e0:	6f e3       	ldi	r22, 0x3F	; 63
 9e2:	0e 94 a3 01 	call	0x346	; 0x346 <Dio_Write_port>
			return ERROR;
 9e6:	91 e0       	ldi	r25, 0x01	; 1
 9e8:	81 30       	cpi	r24, 0x01	; 1
 9ea:	09 f4       	brne	.+2      	; 0x9ee <SevenSeg_Display+0x28>
 9ec:	82 c0       	rjmp	.+260    	; 0xaf2 <SevenSeg_Display+0x12c>
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	80 c0       	rjmp	.+256    	; 0xaf2 <SevenSeg_Display+0x12c>
		}
		break;	
	case 0x1:
		if (Dio_Write_port(port_name, 0b00110000) == ERROR) {
 9f2:	60 e3       	ldi	r22, 0x30	; 48
 9f4:	0e 94 a3 01 	call	0x346	; 0x346 <Dio_Write_port>
/* function to display the number on the seven segment */
bool SevenSeg_Display(Data_t number, Port_t port_name) {	
	switch (number) {
	case 0x0:	
		if (Dio_Write_port(port_name, 0b00111111) == ERROR) {
			return ERROR;
 9f8:	91 e0       	ldi	r25, 0x01	; 1
 9fa:	81 30       	cpi	r24, 0x01	; 1
 9fc:	09 f4       	brne	.+2      	; 0xa00 <SevenSeg_Display+0x3a>
 9fe:	79 c0       	rjmp	.+242    	; 0xaf2 <SevenSeg_Display+0x12c>
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	77 c0       	rjmp	.+238    	; 0xaf2 <SevenSeg_Display+0x12c>
		if (Dio_Write_port(port_name, 0b00110000) == ERROR) {
			return ERROR;
		}	
		break;	
	case 0x2:
		if (Dio_Write_port(port_name, 0b01011011) == ERROR) {
 a04:	6b e5       	ldi	r22, 0x5B	; 91
 a06:	0e 94 a3 01 	call	0x346	; 0x346 <Dio_Write_port>
/* function to display the number on the seven segment */
bool SevenSeg_Display(Data_t number, Port_t port_name) {	
	switch (number) {
	case 0x0:	
		if (Dio_Write_port(port_name, 0b00111111) == ERROR) {
			return ERROR;
 a0a:	91 e0       	ldi	r25, 0x01	; 1
 a0c:	81 30       	cpi	r24, 0x01	; 1
 a0e:	09 f4       	brne	.+2      	; 0xa12 <SevenSeg_Display+0x4c>
 a10:	70 c0       	rjmp	.+224    	; 0xaf2 <SevenSeg_Display+0x12c>
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	6e c0       	rjmp	.+220    	; 0xaf2 <SevenSeg_Display+0x12c>
		if (Dio_Write_port(port_name, 0b01011011) == ERROR) {
			return ERROR;
		}
		break;
	case 0x3:
		if (Dio_Write_port(port_name, 0b01001111) == ERROR) {
 a16:	6f e4       	ldi	r22, 0x4F	; 79
 a18:	0e 94 a3 01 	call	0x346	; 0x346 <Dio_Write_port>
/* function to display the number on the seven segment */
bool SevenSeg_Display(Data_t number, Port_t port_name) {	
	switch (number) {
	case 0x0:	
		if (Dio_Write_port(port_name, 0b00111111) == ERROR) {
			return ERROR;
 a1c:	91 e0       	ldi	r25, 0x01	; 1
 a1e:	81 30       	cpi	r24, 0x01	; 1
 a20:	09 f4       	brne	.+2      	; 0xa24 <SevenSeg_Display+0x5e>
 a22:	67 c0       	rjmp	.+206    	; 0xaf2 <SevenSeg_Display+0x12c>
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	65 c0       	rjmp	.+202    	; 0xaf2 <SevenSeg_Display+0x12c>
		if (Dio_Write_port(port_name, 0b01001111) == ERROR) {
			return ERROR;
		}
		break;
	case 0x4:
		if (Dio_Write_port(port_name, 0b01100110) == ERROR) {
 a28:	66 e6       	ldi	r22, 0x66	; 102
 a2a:	0e 94 a3 01 	call	0x346	; 0x346 <Dio_Write_port>
/* function to display the number on the seven segment */
bool SevenSeg_Display(Data_t number, Port_t port_name) {	
	switch (number) {
	case 0x0:	
		if (Dio_Write_port(port_name, 0b00111111) == ERROR) {
			return ERROR;
 a2e:	91 e0       	ldi	r25, 0x01	; 1
 a30:	81 30       	cpi	r24, 0x01	; 1
 a32:	09 f4       	brne	.+2      	; 0xa36 <SevenSeg_Display+0x70>
 a34:	5e c0       	rjmp	.+188    	; 0xaf2 <SevenSeg_Display+0x12c>
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	5c c0       	rjmp	.+184    	; 0xaf2 <SevenSeg_Display+0x12c>
		if (Dio_Write_port(port_name, 0b01100110) == ERROR) {
			return ERROR;
		}
		break;
	case 0x5:
		if (Dio_Write_port(port_name, 0b01101101) == ERROR) {
 a3a:	6d e6       	ldi	r22, 0x6D	; 109
 a3c:	0e 94 a3 01 	call	0x346	; 0x346 <Dio_Write_port>
/* function to display the number on the seven segment */
bool SevenSeg_Display(Data_t number, Port_t port_name) {	
	switch (number) {
	case 0x0:	
		if (Dio_Write_port(port_name, 0b00111111) == ERROR) {
			return ERROR;
 a40:	91 e0       	ldi	r25, 0x01	; 1
 a42:	81 30       	cpi	r24, 0x01	; 1
 a44:	09 f4       	brne	.+2      	; 0xa48 <SevenSeg_Display+0x82>
 a46:	55 c0       	rjmp	.+170    	; 0xaf2 <SevenSeg_Display+0x12c>
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	53 c0       	rjmp	.+166    	; 0xaf2 <SevenSeg_Display+0x12c>
		if (Dio_Write_port(port_name, 0b01101101) == ERROR) {
			return ERROR;
		}
		break;
	case 0x6:
	    if (Dio_Write_port(port_name, 0b01111101) == ERROR) {
 a4c:	6d e7       	ldi	r22, 0x7D	; 125
 a4e:	0e 94 a3 01 	call	0x346	; 0x346 <Dio_Write_port>
/* function to display the number on the seven segment */
bool SevenSeg_Display(Data_t number, Port_t port_name) {	
	switch (number) {
	case 0x0:	
		if (Dio_Write_port(port_name, 0b00111111) == ERROR) {
			return ERROR;
 a52:	91 e0       	ldi	r25, 0x01	; 1
 a54:	81 30       	cpi	r24, 0x01	; 1
 a56:	09 f4       	brne	.+2      	; 0xa5a <SevenSeg_Display+0x94>
 a58:	4c c0       	rjmp	.+152    	; 0xaf2 <SevenSeg_Display+0x12c>
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	4a c0       	rjmp	.+148    	; 0xaf2 <SevenSeg_Display+0x12c>
	    if (Dio_Write_port(port_name, 0b01111101) == ERROR) {
			return ERROR;
		}
		break;
	case 0x7:
		 if (Dio_Write_port(port_name, 0b00000111) == ERROR) {
 a5e:	67 e0       	ldi	r22, 0x07	; 7
 a60:	0e 94 a3 01 	call	0x346	; 0x346 <Dio_Write_port>
/* function to display the number on the seven segment */
bool SevenSeg_Display(Data_t number, Port_t port_name) {	
	switch (number) {
	case 0x0:	
		if (Dio_Write_port(port_name, 0b00111111) == ERROR) {
			return ERROR;
 a64:	91 e0       	ldi	r25, 0x01	; 1
 a66:	81 30       	cpi	r24, 0x01	; 1
 a68:	09 f4       	brne	.+2      	; 0xa6c <SevenSeg_Display+0xa6>
 a6a:	43 c0       	rjmp	.+134    	; 0xaf2 <SevenSeg_Display+0x12c>
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	41 c0       	rjmp	.+130    	; 0xaf2 <SevenSeg_Display+0x12c>
		 if (Dio_Write_port(port_name, 0b00000111) == ERROR) {
			 return ERROR;
		 }
		break;
	case 0x8:
		if (Dio_Write_port(port_name, 0b01111111) == ERROR) {
 a70:	6f e7       	ldi	r22, 0x7F	; 127
 a72:	0e 94 a3 01 	call	0x346	; 0x346 <Dio_Write_port>
/* function to display the number on the seven segment */
bool SevenSeg_Display(Data_t number, Port_t port_name) {	
	switch (number) {
	case 0x0:	
		if (Dio_Write_port(port_name, 0b00111111) == ERROR) {
			return ERROR;
 a76:	91 e0       	ldi	r25, 0x01	; 1
 a78:	81 30       	cpi	r24, 0x01	; 1
 a7a:	d9 f1       	breq	.+118    	; 0xaf2 <SevenSeg_Display+0x12c>
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	39 c0       	rjmp	.+114    	; 0xaf2 <SevenSeg_Display+0x12c>
		if (Dio_Write_port(port_name, 0b01111111) == ERROR) {
			return ERROR;
		}
		break;
	case 0x9:
		if (Dio_Write_port(port_name, 0b01101111) == ERROR) {
 a80:	6f e6       	ldi	r22, 0x6F	; 111
 a82:	0e 94 a3 01 	call	0x346	; 0x346 <Dio_Write_port>
/* function to display the number on the seven segment */
bool SevenSeg_Display(Data_t number, Port_t port_name) {	
	switch (number) {
	case 0x0:	
		if (Dio_Write_port(port_name, 0b00111111) == ERROR) {
			return ERROR;
 a86:	91 e0       	ldi	r25, 0x01	; 1
 a88:	81 30       	cpi	r24, 0x01	; 1
 a8a:	99 f1       	breq	.+102    	; 0xaf2 <SevenSeg_Display+0x12c>
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	31 c0       	rjmp	.+98     	; 0xaf2 <SevenSeg_Display+0x12c>
		if (Dio_Write_port(port_name, 0b01101111) == ERROR) {
			return ERROR;
		}
		break;
	case 0xA:
		if (Dio_Write_port(port_name, 0b01110111) == ERROR) {
 a90:	67 e7       	ldi	r22, 0x77	; 119
 a92:	0e 94 a3 01 	call	0x346	; 0x346 <Dio_Write_port>
/* function to display the number on the seven segment */
bool SevenSeg_Display(Data_t number, Port_t port_name) {	
	switch (number) {
	case 0x0:	
		if (Dio_Write_port(port_name, 0b00111111) == ERROR) {
			return ERROR;
 a96:	91 e0       	ldi	r25, 0x01	; 1
 a98:	81 30       	cpi	r24, 0x01	; 1
 a9a:	59 f1       	breq	.+86     	; 0xaf2 <SevenSeg_Display+0x12c>
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	29 c0       	rjmp	.+82     	; 0xaf2 <SevenSeg_Display+0x12c>
		if (Dio_Write_port(port_name, 0b01110111) == ERROR) {
			return ERROR;
		}
		break;
	case 0xB:
		if (Dio_Write_port(port_name, 0b01111100) == ERROR) {
 aa0:	6c e7       	ldi	r22, 0x7C	; 124
 aa2:	0e 94 a3 01 	call	0x346	; 0x346 <Dio_Write_port>
/* function to display the number on the seven segment */
bool SevenSeg_Display(Data_t number, Port_t port_name) {	
	switch (number) {
	case 0x0:	
		if (Dio_Write_port(port_name, 0b00111111) == ERROR) {
			return ERROR;
 aa6:	91 e0       	ldi	r25, 0x01	; 1
 aa8:	81 30       	cpi	r24, 0x01	; 1
 aaa:	19 f1       	breq	.+70     	; 0xaf2 <SevenSeg_Display+0x12c>
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	21 c0       	rjmp	.+66     	; 0xaf2 <SevenSeg_Display+0x12c>
		if (Dio_Write_port(port_name, 0b01111100) == ERROR) {
			return ERROR;
		}
		break;
	case 0xC:
		if (Dio_Write_port(port_name, 0b00111001) == ERROR) {
 ab0:	69 e3       	ldi	r22, 0x39	; 57
 ab2:	0e 94 a3 01 	call	0x346	; 0x346 <Dio_Write_port>
/* function to display the number on the seven segment */
bool SevenSeg_Display(Data_t number, Port_t port_name) {	
	switch (number) {
	case 0x0:	
		if (Dio_Write_port(port_name, 0b00111111) == ERROR) {
			return ERROR;
 ab6:	91 e0       	ldi	r25, 0x01	; 1
 ab8:	81 30       	cpi	r24, 0x01	; 1
 aba:	d9 f0       	breq	.+54     	; 0xaf2 <SevenSeg_Display+0x12c>
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	19 c0       	rjmp	.+50     	; 0xaf2 <SevenSeg_Display+0x12c>
		if (Dio_Write_port(port_name, 0b00111001) == ERROR) {
			return ERROR;
		}
		break;
	case 0xD:
		if (Dio_Write_port(port_name, 0b01011110) == ERROR) {
 ac0:	6e e5       	ldi	r22, 0x5E	; 94
 ac2:	0e 94 a3 01 	call	0x346	; 0x346 <Dio_Write_port>
/* function to display the number on the seven segment */
bool SevenSeg_Display(Data_t number, Port_t port_name) {	
	switch (number) {
	case 0x0:	
		if (Dio_Write_port(port_name, 0b00111111) == ERROR) {
			return ERROR;
 ac6:	91 e0       	ldi	r25, 0x01	; 1
 ac8:	81 30       	cpi	r24, 0x01	; 1
 aca:	99 f0       	breq	.+38     	; 0xaf2 <SevenSeg_Display+0x12c>
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	11 c0       	rjmp	.+34     	; 0xaf2 <SevenSeg_Display+0x12c>
		if (Dio_Write_port(port_name, 0b01011110) == ERROR) {
			return ERROR;
		} 
		break;				
	case 0xE:
		if (Dio_Write_port(port_name, 0b01111001) == ERROR) {
 ad0:	69 e7       	ldi	r22, 0x79	; 121
 ad2:	0e 94 a3 01 	call	0x346	; 0x346 <Dio_Write_port>
/* function to display the number on the seven segment */
bool SevenSeg_Display(Data_t number, Port_t port_name) {	
	switch (number) {
	case 0x0:	
		if (Dio_Write_port(port_name, 0b00111111) == ERROR) {
			return ERROR;
 ad6:	91 e0       	ldi	r25, 0x01	; 1
 ad8:	81 30       	cpi	r24, 0x01	; 1
 ada:	59 f0       	breq	.+22     	; 0xaf2 <SevenSeg_Display+0x12c>
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	09 c0       	rjmp	.+18     	; 0xaf2 <SevenSeg_Display+0x12c>
		if (Dio_Write_port(port_name, 0b01111001) == ERROR) {
			return ERROR;
		}
		break;
	case 0xF:
		if (Dio_Write_port(port_name, 0b01110001) == ERROR) {
 ae0:	61 e7       	ldi	r22, 0x71	; 113
 ae2:	0e 94 a3 01 	call	0x346	; 0x346 <Dio_Write_port>
/* function to display the number on the seven segment */
bool SevenSeg_Display(Data_t number, Port_t port_name) {	
	switch (number) {
	case 0x0:	
		if (Dio_Write_port(port_name, 0b00111111) == ERROR) {
			return ERROR;
 ae6:	91 e0       	ldi	r25, 0x01	; 1
 ae8:	81 30       	cpi	r24, 0x01	; 1
 aea:	19 f0       	breq	.+6      	; 0xaf2 <SevenSeg_Display+0x12c>
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	01 c0       	rjmp	.+2      	; 0xaf2 <SevenSeg_Display+0x12c>
		if (Dio_Write_port(port_name, 0b01110001) == ERROR) {
			return ERROR;
		}
		break;
	default:
		return ERROR;
 af0:	91 e0       	ldi	r25, 0x01	; 1
		break;							
	}
	
	/* success */
	return SUCCESS;
}
 af2:	89 2f       	mov	r24, r25
 af4:	08 95       	ret

00000af6 <__tablejump2__>:
 af6:	ee 0f       	add	r30, r30
 af8:	ff 1f       	adc	r31, r31
 afa:	05 90       	lpm	r0, Z+
 afc:	f4 91       	lpm	r31, Z
 afe:	e0 2d       	mov	r30, r0
 b00:	09 94       	ijmp

00000b02 <_exit>:
 b02:	f8 94       	cli

00000b04 <__stop_program>:
 b04:	ff cf       	rjmp	.-2      	; 0xb04 <__stop_program>
