
Timer_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000800  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c4  00800060  00000800  00000894  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800124  00800124  00000958  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000988  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016e2  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4a  00000000  00000000  000021e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f92  00000000  00000000  00002d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  00003cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007305  00000000  00000000  00003f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011dc  00000000  00000000  0000b255  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  0000c431  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000026ac  00000000  00000000  0000c519  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 22 03 	jmp	0x644	; 0x644 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 32       	cpi	r26, 0x24	; 36
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 e2       	ldi	r26, 0x24	; 36
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 32       	cpi	r26, 0x2F	; 47
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 99 03 	call	0x732	; 0x732 <main>
  8a:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Dio_init>:
		break;
	default:
		return ERROR;
	}
	return SUCCESS;
}
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	e0 e6       	ldi	r30, 0x60	; 96
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	64 e1       	ldi	r22, 0x14	; 20
  9c:	71 e0       	ldi	r23, 0x01	; 1
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	50 e0       	ldi	r21, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	81 11       	cpse	r24, r1
  a6:	2f c0       	rjmp	.+94     	; 0x106 <Dio_init+0x74>
  a8:	c4 81       	ldd	r28, Z+4	; 0x04
  aa:	d5 81       	ldd	r29, Z+5	; 0x05
  ac:	98 81       	ld	r25, Y
  ae:	9a 01       	movw	r18, r20
  b0:	01 80       	ldd	r0, Z+1	; 0x01
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <Dio_init+0x26>
  b4:	22 0f       	add	r18, r18
  b6:	33 1f       	adc	r19, r19
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <Dio_init+0x22>
  bc:	82 2f       	mov	r24, r18
  be:	80 95       	com	r24
  c0:	89 23       	and	r24, r25
  c2:	88 83       	st	Y, r24
  c4:	82 81       	ldd	r24, Z+2	; 0x02
  c6:	81 11       	cpse	r24, r1
  c8:	0d c0       	rjmp	.+26     	; 0xe4 <Dio_init+0x52>
  ca:	c6 81       	ldd	r28, Z+6	; 0x06
  cc:	d7 81       	ldd	r29, Z+7	; 0x07
  ce:	28 81       	ld	r18, Y
  d0:	ca 01       	movw	r24, r20
  d2:	01 80       	ldd	r0, Z+1	; 0x01
  d4:	02 c0       	rjmp	.+4      	; 0xda <Dio_init+0x48>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	0a 94       	dec	r0
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <Dio_init+0x44>
  de:	82 2b       	or	r24, r18
  e0:	88 83       	st	Y, r24
  e2:	2d c0       	rjmp	.+90     	; 0x13e <Dio_init+0xac>
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	91 f5       	brne	.+100    	; 0x14c <Dio_init+0xba>
  e8:	c6 81       	ldd	r28, Z+6	; 0x06
  ea:	d7 81       	ldd	r29, Z+7	; 0x07
  ec:	98 81       	ld	r25, Y
  ee:	9a 01       	movw	r18, r20
  f0:	01 80       	ldd	r0, Z+1	; 0x01
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <Dio_init+0x66>
  f4:	22 0f       	add	r18, r18
  f6:	33 1f       	adc	r19, r19
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <Dio_init+0x62>
  fc:	82 2f       	mov	r24, r18
  fe:	80 95       	com	r24
 100:	89 23       	and	r24, r25
 102:	88 83       	st	Y, r24
 104:	1c c0       	rjmp	.+56     	; 0x13e <Dio_init+0xac>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	19 f5       	brne	.+70     	; 0x150 <Dio_init+0xbe>
 10a:	c4 81       	ldd	r28, Z+4	; 0x04
 10c:	d5 81       	ldd	r29, Z+5	; 0x05
 10e:	28 81       	ld	r18, Y
 110:	ca 01       	movw	r24, r20
 112:	01 80       	ldd	r0, Z+1	; 0x01
 114:	02 c0       	rjmp	.+4      	; 0x11a <Dio_init+0x88>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <Dio_init+0x84>
 11e:	82 2b       	or	r24, r18
 120:	88 83       	st	Y, r24
 122:	c6 81       	ldd	r28, Z+6	; 0x06
 124:	d7 81       	ldd	r29, Z+7	; 0x07
 126:	28 81       	ld	r18, Y
 128:	93 81       	ldd	r25, Z+3	; 0x03
 12a:	89 2f       	mov	r24, r25
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	01 80       	ldd	r0, Z+1	; 0x01
 130:	02 c0       	rjmp	.+4      	; 0x136 <Dio_init+0xa4>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	0a 94       	dec	r0
 138:	e2 f7       	brpl	.-8      	; 0x132 <Dio_init+0xa0>
 13a:	82 2b       	or	r24, r18
 13c:	88 83       	st	Y, r24
 13e:	3a 96       	adiw	r30, 0x0a	; 10
 140:	e6 17       	cp	r30, r22
 142:	f7 07       	cpc	r31, r23
 144:	09 f0       	breq	.+2      	; 0x148 <Dio_init+0xb6>
 146:	ad cf       	rjmp	.-166    	; 0xa2 <Dio_init+0x10>
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	03 c0       	rjmp	.+6      	; 0x152 <Dio_init+0xc0>
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	01 c0       	rjmp	.+2      	; 0x152 <Dio_init+0xc0>
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <Dio_Write_pin>:
 158:	88 30       	cpi	r24, 0x08	; 8
 15a:	08 f0       	brcs	.+2      	; 0x15e <Dio_Write_pin+0x6>
 15c:	86 c0       	rjmp	.+268    	; 0x26a <Dio_Write_pin+0x112>
 15e:	61 30       	cpi	r22, 0x01	; 1
 160:	39 f1       	breq	.+78     	; 0x1b0 <Dio_Write_pin+0x58>
 162:	38 f0       	brcs	.+14     	; 0x172 <Dio_Write_pin+0x1a>
 164:	62 30       	cpi	r22, 0x02	; 2
 166:	09 f4       	brne	.+2      	; 0x16a <Dio_Write_pin+0x12>
 168:	42 c0       	rjmp	.+132    	; 0x1ee <Dio_Write_pin+0x96>
 16a:	63 30       	cpi	r22, 0x03	; 3
 16c:	09 f4       	brne	.+2      	; 0x170 <Dio_Write_pin+0x18>
 16e:	5e c0       	rjmp	.+188    	; 0x22c <Dio_Write_pin+0xd4>
 170:	7e c0       	rjmp	.+252    	; 0x26e <Dio_Write_pin+0x116>
 172:	44 23       	and	r20, r20
 174:	71 f0       	breq	.+28     	; 0x192 <Dio_Write_pin+0x3a>
 176:	4b b3       	in	r20, 0x1b	; 27
 178:	21 e0       	ldi	r18, 0x01	; 1
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	b9 01       	movw	r22, r18
 17e:	02 c0       	rjmp	.+4      	; 0x184 <Dio_Write_pin+0x2c>
 180:	66 0f       	add	r22, r22
 182:	77 1f       	adc	r23, r23
 184:	8a 95       	dec	r24
 186:	e2 f7       	brpl	.-8      	; 0x180 <Dio_Write_pin+0x28>
 188:	cb 01       	movw	r24, r22
 18a:	84 2b       	or	r24, r20
 18c:	8b bb       	out	0x1b, r24	; 27
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	08 95       	ret
 192:	4b b3       	in	r20, 0x1b	; 27
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	b9 01       	movw	r22, r18
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <Dio_Write_pin+0x48>
 19c:	66 0f       	add	r22, r22
 19e:	77 1f       	adc	r23, r23
 1a0:	8a 95       	dec	r24
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <Dio_Write_pin+0x44>
 1a4:	cb 01       	movw	r24, r22
 1a6:	80 95       	com	r24
 1a8:	84 23       	and	r24, r20
 1aa:	8b bb       	out	0x1b, r24	; 27
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	08 95       	ret
 1b0:	44 23       	and	r20, r20
 1b2:	71 f0       	breq	.+28     	; 0x1d0 <Dio_Write_pin+0x78>
 1b4:	48 b3       	in	r20, 0x18	; 24
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	b9 01       	movw	r22, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <Dio_Write_pin+0x6a>
 1be:	66 0f       	add	r22, r22
 1c0:	77 1f       	adc	r23, r23
 1c2:	8a 95       	dec	r24
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <Dio_Write_pin+0x66>
 1c6:	cb 01       	movw	r24, r22
 1c8:	84 2b       	or	r24, r20
 1ca:	88 bb       	out	0x18, r24	; 24
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	08 95       	ret
 1d0:	48 b3       	in	r20, 0x18	; 24
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	b9 01       	movw	r22, r18
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <Dio_Write_pin+0x86>
 1da:	66 0f       	add	r22, r22
 1dc:	77 1f       	adc	r23, r23
 1de:	8a 95       	dec	r24
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <Dio_Write_pin+0x82>
 1e2:	cb 01       	movw	r24, r22
 1e4:	80 95       	com	r24
 1e6:	84 23       	and	r24, r20
 1e8:	88 bb       	out	0x18, r24	; 24
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	08 95       	ret
 1ee:	44 23       	and	r20, r20
 1f0:	71 f0       	breq	.+28     	; 0x20e <Dio_Write_pin+0xb6>
 1f2:	45 b3       	in	r20, 0x15	; 21
 1f4:	21 e0       	ldi	r18, 0x01	; 1
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	b9 01       	movw	r22, r18
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <Dio_Write_pin+0xa8>
 1fc:	66 0f       	add	r22, r22
 1fe:	77 1f       	adc	r23, r23
 200:	8a 95       	dec	r24
 202:	e2 f7       	brpl	.-8      	; 0x1fc <Dio_Write_pin+0xa4>
 204:	cb 01       	movw	r24, r22
 206:	84 2b       	or	r24, r20
 208:	85 bb       	out	0x15, r24	; 21
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	08 95       	ret
 20e:	45 b3       	in	r20, 0x15	; 21
 210:	21 e0       	ldi	r18, 0x01	; 1
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	b9 01       	movw	r22, r18
 216:	02 c0       	rjmp	.+4      	; 0x21c <Dio_Write_pin+0xc4>
 218:	66 0f       	add	r22, r22
 21a:	77 1f       	adc	r23, r23
 21c:	8a 95       	dec	r24
 21e:	e2 f7       	brpl	.-8      	; 0x218 <Dio_Write_pin+0xc0>
 220:	cb 01       	movw	r24, r22
 222:	80 95       	com	r24
 224:	84 23       	and	r24, r20
 226:	85 bb       	out	0x15, r24	; 21
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	08 95       	ret
 22c:	44 23       	and	r20, r20
 22e:	71 f0       	breq	.+28     	; 0x24c <Dio_Write_pin+0xf4>
 230:	42 b3       	in	r20, 0x12	; 18
 232:	21 e0       	ldi	r18, 0x01	; 1
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	b9 01       	movw	r22, r18
 238:	02 c0       	rjmp	.+4      	; 0x23e <Dio_Write_pin+0xe6>
 23a:	66 0f       	add	r22, r22
 23c:	77 1f       	adc	r23, r23
 23e:	8a 95       	dec	r24
 240:	e2 f7       	brpl	.-8      	; 0x23a <Dio_Write_pin+0xe2>
 242:	cb 01       	movw	r24, r22
 244:	84 2b       	or	r24, r20
 246:	82 bb       	out	0x12, r24	; 18
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	08 95       	ret
 24c:	42 b3       	in	r20, 0x12	; 18
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	b9 01       	movw	r22, r18
 254:	02 c0       	rjmp	.+4      	; 0x25a <Dio_Write_pin+0x102>
 256:	66 0f       	add	r22, r22
 258:	77 1f       	adc	r23, r23
 25a:	8a 95       	dec	r24
 25c:	e2 f7       	brpl	.-8      	; 0x256 <Dio_Write_pin+0xfe>
 25e:	cb 01       	movw	r24, r22
 260:	80 95       	com	r24
 262:	84 23       	and	r24, r20
 264:	82 bb       	out	0x12, r24	; 18
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	08 95       	ret
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	08 95       	ret
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	08 95       	ret

00000272 <Dio_Write_numOfBits>:
/* change the value of number of bits in a specific port according to a mask (put ones on the desired pins)*/
bool Dio_Write_numOfBits(Port_t port_name, Data_t value, uint8 mask) {
	if (value < 0 || value > 255) {
		return ERROR;
	}
	switch (port_name) {
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	e1 f0       	breq	.+56     	; 0x2ae <Dio_Write_numOfBits+0x3c>
 276:	30 f0       	brcs	.+12     	; 0x284 <Dio_Write_numOfBits+0x12>
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	71 f1       	breq	.+92     	; 0x2d8 <Dio_Write_numOfBits+0x66>
 27c:	83 30       	cpi	r24, 0x03	; 3
 27e:	09 f4       	brne	.+2      	; 0x282 <Dio_Write_numOfBits+0x10>
 280:	40 c0       	rjmp	.+128    	; 0x302 <Dio_Write_numOfBits+0x90>
 282:	54 c0       	rjmp	.+168    	; 0x32c <Dio_Write_numOfBits+0xba>
	case PORT_A:
		if (value == 1) {
 284:	61 30       	cpi	r22, 0x01	; 1
 286:	29 f4       	brne	.+10     	; 0x292 <Dio_Write_numOfBits+0x20>
			PORTA |= mask ;
 288:	6b b3       	in	r22, 0x1b	; 27
 28a:	46 2b       	or	r20, r22
 28c:	4b bb       	out	0x1b, r20	; 27
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	08 95       	ret
	}
	switch (port_name) {
	case PORT_A:
		if (value == 1) {
			PORTA |= mask ;
		} else if(value == 0) {
 292:	61 11       	cpse	r22, r1
 294:	06 c0       	rjmp	.+12     	; 0x2a2 <Dio_Write_numOfBits+0x30>
			PORTA &= ~mask;			
 296:	8b b3       	in	r24, 0x1b	; 27
 298:	40 95       	com	r20
 29a:	48 23       	and	r20, r24
 29c:	4b bb       	out	0x1b, r20	; 27
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	08 95       	ret
		if (value == 1) {
			PORTA |= mask ;
		} else if(value == 0) {
			PORTA &= ~mask;			
		} else {
			PORTA |= value & mask;
 2a2:	8b b3       	in	r24, 0x1b	; 27
 2a4:	46 23       	and	r20, r22
 2a6:	48 2b       	or	r20, r24
 2a8:	4b bb       	out	0x1b, r20	; 27
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	08 95       	ret
		} else {
			PORTA |= value & mask;
		}		
		break;
	case PORT_B:
		if (value == 1) {
 2ae:	61 30       	cpi	r22, 0x01	; 1
 2b0:	29 f4       	brne	.+10     	; 0x2bc <Dio_Write_numOfBits+0x4a>
			PORTB |= mask ;
 2b2:	68 b3       	in	r22, 0x18	; 24
 2b4:	46 2b       	or	r20, r22
 2b6:	48 bb       	out	0x18, r20	; 24
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	08 95       	ret
		}		
		break;
	case PORT_B:
		if (value == 1) {
			PORTB |= mask ;
			} else if(value == 0) {
 2bc:	61 11       	cpse	r22, r1
 2be:	06 c0       	rjmp	.+12     	; 0x2cc <Dio_Write_numOfBits+0x5a>
			PORTB &= ~mask;
 2c0:	88 b3       	in	r24, 0x18	; 24
 2c2:	40 95       	com	r20
 2c4:	48 23       	and	r20, r24
 2c6:	48 bb       	out	0x18, r20	; 24
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	08 95       	ret
		if (value == 1) {
			PORTB |= mask ;
			} else if(value == 0) {
			PORTB &= ~mask;
			} else {
			PORTB |= value & mask;
 2cc:	88 b3       	in	r24, 0x18	; 24
 2ce:	46 23       	and	r20, r22
 2d0:	48 2b       	or	r20, r24
 2d2:	48 bb       	out	0x18, r20	; 24
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	08 95       	ret
			} else {
			PORTB |= value & mask;
		}
		break;
	case PORT_C:
		if (value == 1) {
 2d8:	61 30       	cpi	r22, 0x01	; 1
 2da:	29 f4       	brne	.+10     	; 0x2e6 <Dio_Write_numOfBits+0x74>
			PORTC |= mask ;
 2dc:	65 b3       	in	r22, 0x15	; 21
 2de:	46 2b       	or	r20, r22
 2e0:	45 bb       	out	0x15, r20	; 21
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	08 95       	ret
		}
		break;
	case PORT_C:
		if (value == 1) {
			PORTC |= mask ;
			} else if(value == 0) {
 2e6:	61 11       	cpse	r22, r1
 2e8:	06 c0       	rjmp	.+12     	; 0x2f6 <Dio_Write_numOfBits+0x84>
			PORTC &= ~mask;
 2ea:	85 b3       	in	r24, 0x15	; 21
 2ec:	40 95       	com	r20
 2ee:	48 23       	and	r20, r24
 2f0:	45 bb       	out	0x15, r20	; 21
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	08 95       	ret
		if (value == 1) {
			PORTC |= mask ;
			} else if(value == 0) {
			PORTC &= ~mask;
			} else {
			PORTC |= value & mask;
 2f6:	85 b3       	in	r24, 0x15	; 21
 2f8:	46 23       	and	r20, r22
 2fa:	48 2b       	or	r20, r24
 2fc:	45 bb       	out	0x15, r20	; 21
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	08 95       	ret
			} else {
			PORTC |= value & mask;
		}
		break;
	case PORT_D:
		if (value == 1) {
 302:	61 30       	cpi	r22, 0x01	; 1
 304:	29 f4       	brne	.+10     	; 0x310 <Dio_Write_numOfBits+0x9e>
			PORTD |= mask ;
 306:	62 b3       	in	r22, 0x12	; 18
 308:	46 2b       	or	r20, r22
 30a:	42 bb       	out	0x12, r20	; 18
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	08 95       	ret
		}
		break;
	case PORT_D:
		if (value == 1) {
			PORTD |= mask ;
			} else if(value == 0) {
 310:	61 11       	cpse	r22, r1
 312:	06 c0       	rjmp	.+12     	; 0x320 <Dio_Write_numOfBits+0xae>
			PORTD &= ~mask;
 314:	82 b3       	in	r24, 0x12	; 18
 316:	40 95       	com	r20
 318:	48 23       	and	r20, r24
 31a:	42 bb       	out	0x12, r20	; 18
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	08 95       	ret
		if (value == 1) {
			PORTD |= mask ;
			} else if(value == 0) {
			PORTD &= ~mask;
			} else {
			PORTD |= value & mask;
 320:	82 b3       	in	r24, 0x12	; 18
 322:	46 23       	and	r20, r22
 324:	48 2b       	or	r20, r24
 326:	42 bb       	out	0x12, r20	; 18
		break;
	default:
		return ERROR;
	}
	
	return SUCCESS;
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	08 95       	ret
			} else {
			PORTD |= value & mask;
		}
		break;
	default:
		return ERROR;
 32c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return SUCCESS;
 32e:	08 95       	ret

00000330 <Enable_Global_Interrupt>:
extern Interrupt_config_t Interrupt_configuration;


/* enable global interrupt */
void Enable_Global_Interrupt(void) {
	SREG |= 0b10000000;
 330:	8f b7       	in	r24, 0x3f	; 63
 332:	80 68       	ori	r24, 0x80	; 128
 334:	8f bf       	out	0x3f, r24	; 63
 336:	08 95       	ret

00000338 <Disable_Global_Interrupt>:
}

/* disable global interrupt */
void Disable_Global_Interrupt(void) {
	SREG &= ~0b10000000;
 338:	8f b7       	in	r24, 0x3f	; 63
 33a:	8f 77       	andi	r24, 0x7F	; 127
 33c:	8f bf       	out	0x3f, r24	; 63
 33e:	08 95       	ret

00000340 <Ext_interrupt_init>:
}

bool Ext_interrupt_init(void) {
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	00 d0       	rcall	.+0      	; 0x346 <Ext_interrupt_init+0x6>
 346:	cd b7       	in	r28, 0x3d	; 61
 348:	de b7       	in	r29, 0x3e	; 62
	volatile int i;
	for (i = 0; i < EXT_INTERRUPT_NUM; i++) {
 34a:	1a 82       	std	Y+2, r1	; 0x02
 34c:	19 82       	std	Y+1, r1	; 0x01
 34e:	89 81       	ldd	r24, Y+1	; 0x01
 350:	9a 81       	ldd	r25, Y+2	; 0x02
 352:	18 16       	cp	r1, r24
 354:	19 06       	cpc	r1, r25
 356:	0c f4       	brge	.+2      	; 0x35a <Ext_interrupt_init+0x1a>
 358:	7e c0       	rjmp	.+252    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		switch (Interrupt_configuration.interrupts[i].interrupt) {
 35a:	e9 81       	ldd	r30, Y+1	; 0x01
 35c:	fa 81       	ldd	r31, Y+2	; 0x02
 35e:	ee 0f       	add	r30, r30
 360:	ff 1f       	adc	r31, r31
 362:	ec 5e       	subi	r30, 0xEC	; 236
 364:	fe 4f       	sbci	r31, 0xFE	; 254
 366:	80 81       	ld	r24, Z
 368:	81 30       	cpi	r24, 0x01	; 1
 36a:	69 f1       	breq	.+90     	; 0x3c6 <Ext_interrupt_init+0x86>
 36c:	20 f0       	brcs	.+8      	; 0x376 <Ext_interrupt_init+0x36>
 36e:	82 30       	cpi	r24, 0x02	; 2
 370:	09 f4       	brne	.+2      	; 0x374 <Ext_interrupt_init+0x34>
 372:	51 c0       	rjmp	.+162    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 374:	74 c0       	rjmp	.+232    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			case INT_0:
				switch (Interrupt_configuration.interrupts[i].trigger) {
 376:	e9 81       	ldd	r30, Y+1	; 0x01
 378:	fa 81       	ldd	r31, Y+2	; 0x02
 37a:	ee 0f       	add	r30, r30
 37c:	ff 1f       	adc	r31, r31
 37e:	ec 5e       	subi	r30, 0xEC	; 236
 380:	fe 4f       	sbci	r31, 0xFE	; 254
 382:	81 81       	ldd	r24, Z+1	; 0x01
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	89 f0       	breq	.+34     	; 0x3aa <Ext_interrupt_init+0x6a>
 388:	28 f0       	brcs	.+10     	; 0x394 <Ext_interrupt_init+0x54>
 38a:	82 30       	cpi	r24, 0x02	; 2
 38c:	39 f0       	breq	.+14     	; 0x39c <Ext_interrupt_init+0x5c>
 38e:	83 30       	cpi	r24, 0x03	; 3
 390:	81 f0       	breq	.+32     	; 0x3b2 <Ext_interrupt_init+0x72>
 392:	67 c0       	rjmp	.+206    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
					case LOW:
						MCUCR &= ~0b00000011;
 394:	85 b7       	in	r24, 0x35	; 53
 396:	8c 7f       	andi	r24, 0xFC	; 252
 398:	85 bf       	out	0x35, r24	; 53
						break;
 39a:	11 c0       	rjmp	.+34     	; 0x3be <Ext_interrupt_init+0x7e>
					case FALLING:
						MCUCR &= ~0b00000001;
 39c:	85 b7       	in	r24, 0x35	; 53
 39e:	8e 7f       	andi	r24, 0xFE	; 254
 3a0:	85 bf       	out	0x35, r24	; 53
						MCUCR |= 0b00000010;
 3a2:	85 b7       	in	r24, 0x35	; 53
 3a4:	82 60       	ori	r24, 0x02	; 2
 3a6:	85 bf       	out	0x35, r24	; 53
						break;
 3a8:	0a c0       	rjmp	.+20     	; 0x3be <Ext_interrupt_init+0x7e>
					case RIASING:
						MCUCR |= 0b00000011;
 3aa:	85 b7       	in	r24, 0x35	; 53
 3ac:	83 60       	ori	r24, 0x03	; 3
 3ae:	85 bf       	out	0x35, r24	; 53
						break;
 3b0:	06 c0       	rjmp	.+12     	; 0x3be <Ext_interrupt_init+0x7e>
					case ANY_CHANGE:
						MCUCR &= ~0b00000010;
 3b2:	85 b7       	in	r24, 0x35	; 53
 3b4:	8d 7f       	andi	r24, 0xFD	; 253
 3b6:	85 bf       	out	0x35, r24	; 53
						MCUCR |= 0b00000001;
 3b8:	85 b7       	in	r24, 0x35	; 53
 3ba:	81 60       	ori	r24, 0x01	; 1
 3bc:	85 bf       	out	0x35, r24	; 53
					default:
						return ERROR;
						break;					
				}
				/* enable INT0 */
				GICR |= 0b01000000;	
 3be:	8b b7       	in	r24, 0x3b	; 59
 3c0:	80 64       	ori	r24, 0x40	; 64
 3c2:	8b bf       	out	0x3b, r24	; 59
				break;
 3c4:	3d c0       	rjmp	.+122    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			case INT_1:
				switch (Interrupt_configuration.interrupts[i].trigger) {
 3c6:	e9 81       	ldd	r30, Y+1	; 0x01
 3c8:	fa 81       	ldd	r31, Y+2	; 0x02
 3ca:	ee 0f       	add	r30, r30
 3cc:	ff 1f       	adc	r31, r31
 3ce:	ec 5e       	subi	r30, 0xEC	; 236
 3d0:	fe 4f       	sbci	r31, 0xFE	; 254
 3d2:	81 81       	ldd	r24, Z+1	; 0x01
 3d4:	81 30       	cpi	r24, 0x01	; 1
 3d6:	89 f0       	breq	.+34     	; 0x3fa <Ext_interrupt_init+0xba>
 3d8:	28 f0       	brcs	.+10     	; 0x3e4 <Ext_interrupt_init+0xa4>
 3da:	82 30       	cpi	r24, 0x02	; 2
 3dc:	39 f0       	breq	.+14     	; 0x3ec <Ext_interrupt_init+0xac>
 3de:	83 30       	cpi	r24, 0x03	; 3
 3e0:	81 f0       	breq	.+32     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3e2:	41 c0       	rjmp	.+130    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
					case LOW:
						MCUCR &= ~0b00001100;
 3e4:	85 b7       	in	r24, 0x35	; 53
 3e6:	83 7f       	andi	r24, 0xF3	; 243
 3e8:	85 bf       	out	0x35, r24	; 53
						break;
 3ea:	11 c0       	rjmp	.+34     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
					case FALLING:
						MCUCR |= 0b00001000;
 3ec:	85 b7       	in	r24, 0x35	; 53
 3ee:	88 60       	ori	r24, 0x08	; 8
 3f0:	85 bf       	out	0x35, r24	; 53
						MCUCR &= ~0b00000100;
 3f2:	85 b7       	in	r24, 0x35	; 53
 3f4:	8b 7f       	andi	r24, 0xFB	; 251
 3f6:	85 bf       	out	0x35, r24	; 53
						break;
 3f8:	0a c0       	rjmp	.+20     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
					case RIASING:
						MCUCR |= 0b00001100;
 3fa:	85 b7       	in	r24, 0x35	; 53
 3fc:	8c 60       	ori	r24, 0x0C	; 12
 3fe:	85 bf       	out	0x35, r24	; 53
						break;
 400:	06 c0       	rjmp	.+12     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
					case ANY_CHANGE:
						MCUCR |= 0b00000100;
 402:	85 b7       	in	r24, 0x35	; 53
 404:	84 60       	ori	r24, 0x04	; 4
 406:	85 bf       	out	0x35, r24	; 53
						MCUCR &= ~0b00001000;
 408:	85 b7       	in	r24, 0x35	; 53
 40a:	87 7f       	andi	r24, 0xF7	; 247
 40c:	85 bf       	out	0x35, r24	; 53
					default:
						return ERROR;
						break;
				}
				/* enable INT1 */
				GICR |= 0b10000000;		
 40e:	8b b7       	in	r24, 0x3b	; 59
 410:	80 68       	ori	r24, 0x80	; 128
 412:	8b bf       	out	0x3b, r24	; 59
				break;
 414:	15 c0       	rjmp	.+42     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
			case INT_2:
				switch (Interrupt_configuration.interrupts[i].trigger) {
 416:	e9 81       	ldd	r30, Y+1	; 0x01
 418:	fa 81       	ldd	r31, Y+2	; 0x02
 41a:	ee 0f       	add	r30, r30
 41c:	ff 1f       	adc	r31, r31
 41e:	ec 5e       	subi	r30, 0xEC	; 236
 420:	fe 4f       	sbci	r31, 0xFE	; 254
 422:	81 81       	ldd	r24, Z+1	; 0x01
 424:	81 30       	cpi	r24, 0x01	; 1
 426:	31 f0       	breq	.+12     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 428:	82 30       	cpi	r24, 0x02	; 2
 42a:	f9 f4       	brne	.+62     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
					case FALLING:
						MCUCSR &= ~0b01000000;
 42c:	84 b7       	in	r24, 0x34	; 52
 42e:	8f 7b       	andi	r24, 0xBF	; 191
 430:	84 bf       	out	0x34, r24	; 52
						break;
 432:	03 c0       	rjmp	.+6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
					case RIASING:
						MCUCSR |= 0b01000000;
 434:	84 b7       	in	r24, 0x34	; 52
 436:	80 64       	ori	r24, 0x40	; 64
 438:	84 bf       	out	0x34, r24	; 52
					default:
						return ERROR;
						break;
				}
				/* enable INT2 */
				GICR |= 0b00100000;	
 43a:	8b b7       	in	r24, 0x3b	; 59
 43c:	80 62       	ori	r24, 0x20	; 32
 43e:	8b bf       	out	0x3b, r24	; 59
	SREG &= ~0b10000000;
}

bool Ext_interrupt_init(void) {
	volatile int i;
	for (i = 0; i < EXT_INTERRUPT_NUM; i++) {
 440:	89 81       	ldd	r24, Y+1	; 0x01
 442:	9a 81       	ldd	r25, Y+2	; 0x02
 444:	01 96       	adiw	r24, 0x01	; 1
 446:	9a 83       	std	Y+2, r25	; 0x02
 448:	89 83       	std	Y+1, r24	; 0x01
 44a:	89 81       	ldd	r24, Y+1	; 0x01
 44c:	9a 81       	ldd	r25, Y+2	; 0x02
 44e:	18 16       	cp	r1, r24
 450:	19 06       	cpc	r1, r25
 452:	0c f0       	brlt	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 454:	82 cf       	rjmp	.-252    	; 0x35a <Ext_interrupt_init+0x1a>
				return ERROR;
				break;				
		}
	}
	/* enable global interrupt */
	Enable_Global_Interrupt();
 456:	0e 94 98 01 	call	0x330	; 0x330 <Enable_Global_Interrupt>
	
	return SUCCESS;
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	07 c0       	rjmp	.+14     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
				}
				/* enable INT2 */
				GICR |= 0b00100000;	
				break;			
			default:
				return ERROR;
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	05 c0       	rjmp	.+10     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
					case ANY_CHANGE:
						MCUCR &= ~0b00000010;
						MCUCR |= 0b00000001;
						break;
					default:
						return ERROR;
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	03 c0       	rjmp	.+6      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
					case ANY_CHANGE:
						MCUCR |= 0b00000100;
						MCUCR &= ~0b00001000;
						break;
					default:
						return ERROR;
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	01 c0       	rjmp	.+2      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
						break;
					case RIASING:
						MCUCSR |= 0b01000000;
						break;
					default:
						return ERROR;
 46a:	81 e0       	ldi	r24, 0x01	; 1
	}
	/* enable global interrupt */
	Enable_Global_Interrupt();
	
	return SUCCESS;
}
 46c:	0f 90       	pop	r0
 46e:	0f 90       	pop	r0
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	08 95       	ret

00000476 <EnPulse>:
	default:
		return ERROR;
		break;					
	}
	return SUCCESS;
}
 476:	41 e0       	ldi	r20, 0x01	; 1
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	0e 94 ac 00 	call	0x158	; 0x158 <Dio_Write_pin>
 480:	98 2f       	mov	r25, r24
 482:	81 30       	cpi	r24, 0x01	; 1
 484:	51 f0       	breq	.+20     	; 0x49a <EnPulse+0x24>
 486:	00 00       	nop
 488:	40 e0       	ldi	r20, 0x00	; 0
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	0e 94 ac 00 	call	0x158	; 0x158 <Dio_Write_pin>
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	81 30       	cpi	r24, 0x01	; 1
 496:	09 f0       	breq	.+2      	; 0x49a <EnPulse+0x24>
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	89 2f       	mov	r24, r25
 49c:	08 95       	ret

0000049e <Lcd_Write_4>:
 49e:	cf 93       	push	r28
 4a0:	c8 2f       	mov	r28, r24
 4a2:	40 ef       	ldi	r20, 0xF0	; 240
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	0e 94 39 01 	call	0x272	; 0x272 <Dio_Write_numOfBits>
 4ac:	81 30       	cpi	r24, 0x01	; 1
 4ae:	41 f1       	breq	.+80     	; 0x500 <Lcd_Write_4+0x62>
 4b0:	40 ef       	ldi	r20, 0xF0	; 240
 4b2:	6c 2f       	mov	r22, r28
 4b4:	60 7f       	andi	r22, 0xF0	; 240
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	0e 94 39 01 	call	0x272	; 0x272 <Dio_Write_numOfBits>
 4bc:	81 30       	cpi	r24, 0x01	; 1
 4be:	01 f1       	breq	.+64     	; 0x500 <Lcd_Write_4+0x62>
 4c0:	0e 94 3b 02 	call	0x476	; 0x476 <EnPulse>
 4c4:	81 30       	cpi	r24, 0x01	; 1
 4c6:	e1 f0       	breq	.+56     	; 0x500 <Lcd_Write_4+0x62>
 4c8:	40 ef       	ldi	r20, 0xF0	; 240
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	0e 94 39 01 	call	0x272	; 0x272 <Dio_Write_numOfBits>
 4d2:	81 30       	cpi	r24, 0x01	; 1
 4d4:	a9 f0       	breq	.+42     	; 0x500 <Lcd_Write_4+0x62>
 4d6:	80 e1       	ldi	r24, 0x10	; 16
 4d8:	c8 9f       	mul	r28, r24
 4da:	b0 01       	movw	r22, r0
 4dc:	11 24       	eor	r1, r1
 4de:	40 ef       	ldi	r20, 0xF0	; 240
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	0e 94 39 01 	call	0x272	; 0x272 <Dio_Write_numOfBits>
 4e6:	81 30       	cpi	r24, 0x01	; 1
 4e8:	59 f0       	breq	.+22     	; 0x500 <Lcd_Write_4+0x62>
 4ea:	0e 94 3b 02 	call	0x476	; 0x476 <EnPulse>
 4ee:	81 30       	cpi	r24, 0x01	; 1
 4f0:	39 f0       	breq	.+14     	; 0x500 <Lcd_Write_4+0x62>
 4f2:	83 ef       	ldi	r24, 0xF3	; 243
 4f4:	91 e0       	ldi	r25, 0x01	; 1
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	f1 f7       	brne	.-4      	; 0x4f6 <Lcd_Write_4+0x58>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <Lcd_Write_4+0x5e>
 4fc:	00 00       	nop
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <Lcd_Cmd>:
 504:	cf 93       	push	r28
 506:	c8 2f       	mov	r28, r24
 508:	40 e0       	ldi	r20, 0x00	; 0
 50a:	60 e0       	ldi	r22, 0x00	; 0
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	0e 94 ac 00 	call	0x158	; 0x158 <Dio_Write_pin>
 512:	98 2f       	mov	r25, r24
 514:	81 30       	cpi	r24, 0x01	; 1
 516:	39 f0       	breq	.+14     	; 0x526 <Lcd_Cmd+0x22>
 518:	8c 2f       	mov	r24, r28
 51a:	0e 94 4f 02 	call	0x49e	; 0x49e <Lcd_Write_4>
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	81 30       	cpi	r24, 0x01	; 1
 522:	09 f0       	breq	.+2      	; 0x526 <Lcd_Cmd+0x22>
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	89 2f       	mov	r24, r25
 528:	cf 91       	pop	r28
 52a:	08 95       	ret

0000052c <Lcd_Init>:
 52c:	85 ea       	ldi	r24, 0xA5	; 165
 52e:	9e e0       	ldi	r25, 0x0E	; 14
 530:	01 97       	sbiw	r24, 0x01	; 1
 532:	f1 f7       	brne	.-4      	; 0x530 <Lcd_Init+0x4>
 534:	00 c0       	rjmp	.+0      	; 0x536 <Lcd_Init+0xa>
 536:	00 00       	nop
 538:	80 e3       	ldi	r24, 0x30	; 48
 53a:	0e 94 82 02 	call	0x504	; 0x504 <Lcd_Cmd>
 53e:	98 2f       	mov	r25, r24
 540:	81 30       	cpi	r24, 0x01	; 1
 542:	21 f1       	breq	.+72     	; 0x58c <Lcd_Init+0x60>
 544:	80 e2       	ldi	r24, 0x20	; 32
 546:	0e 94 82 02 	call	0x504	; 0x504 <Lcd_Cmd>
 54a:	98 2f       	mov	r25, r24
 54c:	81 30       	cpi	r24, 0x01	; 1
 54e:	f1 f0       	breq	.+60     	; 0x58c <Lcd_Init+0x60>
 550:	0e 94 3b 02 	call	0x476	; 0x476 <EnPulse>
 554:	98 2f       	mov	r25, r24
 556:	81 30       	cpi	r24, 0x01	; 1
 558:	c9 f0       	breq	.+50     	; 0x58c <Lcd_Init+0x60>
 55a:	88 e2       	ldi	r24, 0x28	; 40
 55c:	0e 94 82 02 	call	0x504	; 0x504 <Lcd_Cmd>
 560:	98 2f       	mov	r25, r24
 562:	81 30       	cpi	r24, 0x01	; 1
 564:	99 f0       	breq	.+38     	; 0x58c <Lcd_Init+0x60>
 566:	8f e0       	ldi	r24, 0x0F	; 15
 568:	0e 94 82 02 	call	0x504	; 0x504 <Lcd_Cmd>
 56c:	98 2f       	mov	r25, r24
 56e:	81 30       	cpi	r24, 0x01	; 1
 570:	69 f0       	breq	.+26     	; 0x58c <Lcd_Init+0x60>
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	0e 94 82 02 	call	0x504	; 0x504 <Lcd_Cmd>
 578:	98 2f       	mov	r25, r24
 57a:	81 30       	cpi	r24, 0x01	; 1
 57c:	39 f0       	breq	.+14     	; 0x58c <Lcd_Init+0x60>
 57e:	86 e0       	ldi	r24, 0x06	; 6
 580:	0e 94 82 02 	call	0x504	; 0x504 <Lcd_Cmd>
 584:	91 e0       	ldi	r25, 0x01	; 1
 586:	81 30       	cpi	r24, 0x01	; 1
 588:	09 f0       	breq	.+2      	; 0x58c <Lcd_Init+0x60>
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	89 2f       	mov	r24, r25
 58e:	08 95       	ret

00000590 <Lcd_Out>:


extern bool Lcd_Out(uint8 *str) {
 590:	0f 93       	push	r16
 592:	1f 93       	push	r17
 594:	cf 93       	push	r28
	while (*str != '\0') {
 596:	fc 01       	movw	r30, r24
 598:	c0 81       	ld	r28, Z
 59a:	cc 23       	and	r28, r28
 59c:	b1 f0       	breq	.+44     	; 0x5ca <Lcd_Out+0x3a>
 59e:	8c 01       	movw	r16, r24
 5a0:	0f 5f       	subi	r16, 0xFF	; 255
 5a2:	1f 4f       	sbci	r17, 0xFF	; 255
	return SUCCESS;
}

static bool Lcd_Data(uint8 data) {
	// Set RS pin
	if (Dio_Write_pin(RS, LCD_CtrPort, 1) == ERROR) {
 5a4:	41 e0       	ldi	r20, 0x01	; 1
 5a6:	60 e0       	ldi	r22, 0x00	; 0
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	0e 94 ac 00 	call	0x158	; 0x158 <Dio_Write_pin>
 5ae:	81 30       	cpi	r24, 0x01	; 1
 5b0:	69 f0       	breq	.+26     	; 0x5cc <Lcd_Out+0x3c>
		return ERROR;
	}
	#ifdef LCD_MODE_FOUR_BIT
	if (Lcd_Write_4(data) == ERROR) {
 5b2:	8c 2f       	mov	r24, r28
 5b4:	0e 94 4f 02 	call	0x49e	; 0x49e <Lcd_Write_4>
}


extern bool Lcd_Out(uint8 *str) {
	while (*str != '\0') {
		if (Lcd_Data(*str) == ERROR) {
 5b8:	81 30       	cpi	r24, 0x01	; 1
 5ba:	41 f0       	breq	.+16     	; 0x5cc <Lcd_Out+0x3c>
	return SUCCESS;
}


extern bool Lcd_Out(uint8 *str) {
	while (*str != '\0') {
 5bc:	f8 01       	movw	r30, r16
 5be:	c1 91       	ld	r28, Z+
 5c0:	8f 01       	movw	r16, r30
 5c2:	c1 11       	cpse	r28, r1
 5c4:	ef cf       	rjmp	.-34     	; 0x5a4 <Lcd_Out+0x14>
		if (Lcd_Data(*str) == ERROR) {
			return ERROR;
		}
		str++;
	}
	return SUCCESS;	
 5c6:	8c 2f       	mov	r24, r28
 5c8:	01 c0       	rjmp	.+2      	; 0x5cc <Lcd_Out+0x3c>
 5ca:	8c 2f       	mov	r24, r28
}
 5cc:	cf 91       	pop	r28
 5ce:	1f 91       	pop	r17
 5d0:	0f 91       	pop	r16
 5d2:	08 95       	ret

000005d4 <__vector_1>:

volatile uint16 arr[3];
volatile uint8 counter = 0;
volatile uint32 counter1 = 0;

ISR(INT0_vect) {
 5d4:	1f 92       	push	r1
 5d6:	0f 92       	push	r0
 5d8:	0f b6       	in	r0, 0x3f	; 63
 5da:	0f 92       	push	r0
 5dc:	11 24       	eor	r1, r1
 5de:	2f 93       	push	r18
 5e0:	3f 93       	push	r19
 5e2:	8f 93       	push	r24
 5e4:	9f 93       	push	r25
 5e6:	af 93       	push	r26
 5e8:	bf 93       	push	r27
 5ea:	ef 93       	push	r30
 5ec:	ff 93       	push	r31
	arr[counter] = TCNT0 + counter1;
 5ee:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <counter>
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	22 b7       	in	r18, 0x32	; 50
 5f6:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 5fa:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__data_end+0x1>
 5fe:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <__data_end+0x2>
 602:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <__data_end+0x3>
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	82 0f       	add	r24, r18
 60a:	93 1f       	adc	r25, r19
 60c:	ee 0f       	add	r30, r30
 60e:	ff 1f       	adc	r31, r31
 610:	e7 5d       	subi	r30, 0xD7	; 215
 612:	fe 4f       	sbci	r31, 0xFE	; 254
 614:	91 83       	std	Z+1, r25	; 0x01
 616:	80 83       	st	Z, r24
	MCUCR ^= 1;
 618:	95 b7       	in	r25, 0x35	; 53
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	89 27       	eor	r24, r25
 61e:	85 bf       	out	0x35, r24	; 53
	counter++;
 620:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <counter>
 624:	8f 5f       	subi	r24, 0xFF	; 255
 626:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <counter>
	
}
 62a:	ff 91       	pop	r31
 62c:	ef 91       	pop	r30
 62e:	bf 91       	pop	r27
 630:	af 91       	pop	r26
 632:	9f 91       	pop	r25
 634:	8f 91       	pop	r24
 636:	3f 91       	pop	r19
 638:	2f 91       	pop	r18
 63a:	0f 90       	pop	r0
 63c:	0f be       	out	0x3f, r0	; 63
 63e:	0f 90       	pop	r0
 640:	1f 90       	pop	r1
 642:	18 95       	reti

00000644 <__vector_11>:

ISR(TIMER0_OVF_vect) {
 644:	1f 92       	push	r1
 646:	0f 92       	push	r0
 648:	0f b6       	in	r0, 0x3f	; 63
 64a:	0f 92       	push	r0
 64c:	11 24       	eor	r1, r1
 64e:	8f 93       	push	r24
 650:	9f 93       	push	r25
 652:	af 93       	push	r26
 654:	bf 93       	push	r27
	counter1 += 256;
 656:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 65a:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__data_end+0x1>
 65e:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <__data_end+0x2>
 662:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <__data_end+0x3>
 666:	9f 5f       	subi	r25, 0xFF	; 255
 668:	af 4f       	sbci	r26, 0xFF	; 255
 66a:	bf 4f       	sbci	r27, 0xFF	; 255
 66c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
 670:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__data_end+0x1>
 674:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <__data_end+0x2>
 678:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <__data_end+0x3>
}
 67c:	bf 91       	pop	r27
 67e:	af 91       	pop	r26
 680:	9f 91       	pop	r25
 682:	8f 91       	pop	r24
 684:	0f 90       	pop	r0
 686:	0f be       	out	0x3f, r0	; 63
 688:	0f 90       	pop	r0
 68a:	1f 90       	pop	r1
 68c:	18 95       	reti

0000068e <str_reverse>:

	
	return 0;
}

void str_reverse(uint8 *str) {
 68e:	cf 93       	push	r28
 690:	df 93       	push	r29
 692:	9c 01       	movw	r18, r24
	uint8 start = 0;
	uint8 end = strlen((char*)str) - 1;
 694:	fc 01       	movw	r30, r24
 696:	01 90       	ld	r0, Z+
 698:	00 20       	and	r0, r0
 69a:	e9 f7       	brne	.-6      	; 0x696 <str_reverse+0x8>
 69c:	e8 1b       	sub	r30, r24
 69e:	e2 50       	subi	r30, 0x02	; 2
	uint8 temp;

	while (end > start) {
 6a0:	79 f0       	breq	.+30     	; 0x6c0 <str_reverse+0x32>
 6a2:	90 e0       	ldi	r25, 0x00	; 0
		temp = str[end];
 6a4:	e9 01       	movw	r28, r18
 6a6:	ce 0f       	add	r28, r30
 6a8:	d1 1d       	adc	r29, r1
 6aa:	88 81       	ld	r24, Y
		str[end] = str[start];
 6ac:	d9 01       	movw	r26, r18
 6ae:	a9 0f       	add	r26, r25
 6b0:	b1 1d       	adc	r27, r1
 6b2:	4c 91       	ld	r20, X
 6b4:	48 83       	st	Y, r20
		str[start] = temp;
 6b6:	8c 93       	st	X, r24
		end--;
 6b8:	e1 50       	subi	r30, 0x01	; 1
		start++;
 6ba:	9f 5f       	subi	r25, 0xFF	; 255
void str_reverse(uint8 *str) {
	uint8 start = 0;
	uint8 end = strlen((char*)str) - 1;
	uint8 temp;

	while (end > start) {
 6bc:	9e 17       	cp	r25, r30
 6be:	90 f3       	brcs	.-28     	; 0x6a4 <str_reverse+0x16>
		str[end] = str[start];
		str[start] = temp;
		end--;
		start++;
	}
}
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
 6c4:	08 95       	ret

000006c6 <int_Tostring>:

void int_Tostring(uint8 output[], uint32 integer) {
 6c6:	8f 92       	push	r8
 6c8:	9f 92       	push	r9
 6ca:	af 92       	push	r10
 6cc:	bf 92       	push	r11
 6ce:	ff 92       	push	r15
 6d0:	0f 93       	push	r16
 6d2:	1f 93       	push	r17
 6d4:	cf 93       	push	r28
 6d6:	df 93       	push	r29
 6d8:	8c 01       	movw	r16, r24
 6da:	cb 01       	movw	r24, r22
 6dc:	ba 01       	movw	r22, r20
	uint8 index = 0;
	while (integer > 0) {
 6de:	61 15       	cp	r22, r1
 6e0:	71 05       	cpc	r23, r1
 6e2:	81 05       	cpc	r24, r1
 6e4:	91 05       	cpc	r25, r1
 6e6:	d9 f0       	breq	.+54     	; 0x71e <int_Tostring+0x58>
 6e8:	f1 2c       	mov	r15, r1
		output[index] = integer % 10 + 48;
 6ea:	0f 2e       	mov	r0, r31
 6ec:	fa e0       	ldi	r31, 0x0A	; 10
 6ee:	8f 2e       	mov	r8, r31
 6f0:	91 2c       	mov	r9, r1
 6f2:	a1 2c       	mov	r10, r1
 6f4:	b1 2c       	mov	r11, r1
 6f6:	f0 2d       	mov	r31, r0
 6f8:	e8 01       	movw	r28, r16
 6fa:	cf 0d       	add	r28, r15
 6fc:	d1 1d       	adc	r29, r1
 6fe:	a5 01       	movw	r20, r10
 700:	94 01       	movw	r18, r8
 702:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__udivmodsi4>
 706:	60 5d       	subi	r22, 0xD0	; 208
 708:	68 83       	st	Y, r22
		integer /= 10;
 70a:	62 2f       	mov	r22, r18
 70c:	73 2f       	mov	r23, r19
 70e:	84 2f       	mov	r24, r20
 710:	95 2f       	mov	r25, r21
		index++;
 712:	f3 94       	inc	r15
	}
}

void int_Tostring(uint8 output[], uint32 integer) {
	uint8 index = 0;
	while (integer > 0) {
 714:	61 15       	cp	r22, r1
 716:	71 05       	cpc	r23, r1
 718:	81 05       	cpc	r24, r1
 71a:	91 05       	cpc	r25, r1
 71c:	69 f7       	brne	.-38     	; 0x6f8 <int_Tostring+0x32>
		output[index] = integer % 10 + 48;
		integer /= 10;
		index++;
	}	
 71e:	df 91       	pop	r29
 720:	cf 91       	pop	r28
 722:	1f 91       	pop	r17
 724:	0f 91       	pop	r16
 726:	ff 90       	pop	r15
 728:	bf 90       	pop	r11
 72a:	af 90       	pop	r10
 72c:	9f 90       	pop	r9
 72e:	8f 90       	pop	r8
 730:	08 95       	ret

00000732 <main>:

ISR(TIMER0_OVF_vect) {
	counter1 += 256;
}

int main(void) {
 732:	cf 93       	push	r28
 734:	df 93       	push	r29
 736:	cd b7       	in	r28, 0x3d	; 61
 738:	de b7       	in	r29, 0x3e	; 62
 73a:	64 97       	sbiw	r28, 0x14	; 20
 73c:	0f b6       	in	r0, 0x3f	; 63
 73e:	f8 94       	cli
 740:	de bf       	out	0x3e, r29	; 62
 742:	0f be       	out	0x3f, r0	; 63
 744:	cd bf       	out	0x3d, r28	; 61
	
	Dio_init();
 746:	0e 94 49 00 	call	0x92	; 0x92 <Dio_init>
	Lcd_Init();
 74a:	0e 94 96 02 	call	0x52c	; 0x52c <Lcd_Init>
	Ext_interrupt_init();
 74e:	0e 94 a0 01 	call	0x340	; 0x340 <Ext_interrupt_init>
	uint32 result;
	uint8 output[20] = {'\0'};
 752:	fe 01       	movw	r30, r28
 754:	31 96       	adiw	r30, 0x01	; 1
 756:	84 e1       	ldi	r24, 0x14	; 20
 758:	df 01       	movw	r26, r30
 75a:	1d 92       	st	X+, r1
 75c:	8a 95       	dec	r24
 75e:	e9 f7       	brne	.-6      	; 0x75a <main+0x28>
	// configure normal mode
	CLR_BIT(TCCR0, 3);
 760:	83 b7       	in	r24, 0x33	; 51
 762:	87 7f       	andi	r24, 0xF7	; 247
 764:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, 6);
 766:	83 b7       	in	r24, 0x33	; 51
 768:	8f 7b       	andi	r24, 0xBF	; 191
 76a:	83 bf       	out	0x33, r24	; 51
	// no prescaler
	SET_BIT(TCCR0, 0);
 76c:	83 b7       	in	r24, 0x33	; 51
 76e:	81 60       	ori	r24, 0x01	; 1
 770:	83 bf       	out	0x33, r24	; 51
	// enable interrupt
	SET_BIT(TIMSK, 0);
 772:	89 b7       	in	r24, 0x39	; 57
 774:	81 60       	ori	r24, 0x01	; 1
 776:	89 bf       	out	0x39, r24	; 57
	SET_BIT(SREG, 7);
 778:	8f b7       	in	r24, 0x3f	; 63
 77a:	80 68       	ori	r24, 0x80	; 128
 77c:	8f bf       	out	0x3f, r24	; 63
			
	while (1) {
		
		if (counter >= 3) {
 77e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <counter>
 782:	83 30       	cpi	r24, 0x03	; 3
 784:	e0 f3       	brcs	.-8      	; 0x77e <main+0x4c>
			Disable_Global_Interrupt();
 786:	0e 94 9c 01 	call	0x338	; 0x338 <Disable_Global_Interrupt>
			result = arr[0];
 78a:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <arr>
 78e:	50 91 2a 01 	lds	r21, 0x012A	; 0x80012a <arr+0x1>
			int_Tostring(output, result);
 792:	60 e0       	ldi	r22, 0x00	; 0
 794:	70 e0       	ldi	r23, 0x00	; 0
 796:	ce 01       	movw	r24, r28
 798:	01 96       	adiw	r24, 0x01	; 1
 79a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <int_Tostring>
			str_reverse(output);
 79e:	ce 01       	movw	r24, r28
 7a0:	01 96       	adiw	r24, 0x01	; 1
 7a2:	0e 94 47 03 	call	0x68e	; 0x68e <str_reverse>
			Lcd_Out(output);
 7a6:	ce 01       	movw	r24, r28
 7a8:	01 96       	adiw	r24, 0x01	; 1
 7aa:	0e 94 c8 02 	call	0x590	; 0x590 <Lcd_Out>
			Lcd_Out((uint8*)"% duty cycle");
 7ae:	86 e1       	ldi	r24, 0x16	; 22
 7b0:	91 e0       	ldi	r25, 0x01	; 1
 7b2:	0e 94 c8 02 	call	0x590	; 0x590 <Lcd_Out>
 7b6:	ff cf       	rjmp	.-2      	; 0x7b6 <main+0x84>

000007b8 <__udivmodsi4>:
 7b8:	a1 e2       	ldi	r26, 0x21	; 33
 7ba:	1a 2e       	mov	r1, r26
 7bc:	aa 1b       	sub	r26, r26
 7be:	bb 1b       	sub	r27, r27
 7c0:	fd 01       	movw	r30, r26
 7c2:	0d c0       	rjmp	.+26     	; 0x7de <__udivmodsi4_ep>

000007c4 <__udivmodsi4_loop>:
 7c4:	aa 1f       	adc	r26, r26
 7c6:	bb 1f       	adc	r27, r27
 7c8:	ee 1f       	adc	r30, r30
 7ca:	ff 1f       	adc	r31, r31
 7cc:	a2 17       	cp	r26, r18
 7ce:	b3 07       	cpc	r27, r19
 7d0:	e4 07       	cpc	r30, r20
 7d2:	f5 07       	cpc	r31, r21
 7d4:	20 f0       	brcs	.+8      	; 0x7de <__udivmodsi4_ep>
 7d6:	a2 1b       	sub	r26, r18
 7d8:	b3 0b       	sbc	r27, r19
 7da:	e4 0b       	sbc	r30, r20
 7dc:	f5 0b       	sbc	r31, r21

000007de <__udivmodsi4_ep>:
 7de:	66 1f       	adc	r22, r22
 7e0:	77 1f       	adc	r23, r23
 7e2:	88 1f       	adc	r24, r24
 7e4:	99 1f       	adc	r25, r25
 7e6:	1a 94       	dec	r1
 7e8:	69 f7       	brne	.-38     	; 0x7c4 <__udivmodsi4_loop>
 7ea:	60 95       	com	r22
 7ec:	70 95       	com	r23
 7ee:	80 95       	com	r24
 7f0:	90 95       	com	r25
 7f2:	9b 01       	movw	r18, r22
 7f4:	ac 01       	movw	r20, r24
 7f6:	bd 01       	movw	r22, r26
 7f8:	cf 01       	movw	r24, r30
 7fa:	08 95       	ret

000007fc <_exit>:
 7fc:	f8 94       	cli

000007fe <__stop_program>:
 7fe:	ff cf       	rjmp	.-2      	; 0x7fe <__stop_program>
