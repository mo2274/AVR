
I2C_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00800060  000006bc  00000750  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000066  008000ea  008000ea  000007da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000080c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016e0  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4a  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d79  00000000  00000000  00002ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  0000391c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000674  00000000  00000000  00003b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000118a  00000000  00000000  0000417c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00005306  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 0b 02 	jmp	0x416	; 0x416 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec eb       	ldi	r30, 0xBC	; 188
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3e       	cpi	r26, 0xEA	; 234
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	aa ee       	ldi	r26, 0xEA	; 234
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 35       	cpi	r26, 0x50	; 80
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 26 03 	call	0x64c	; 0x64c <main>
  8a:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Dio_init>:
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	e0 e6       	ldi	r30, 0x60	; 96
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	2b e7       	ldi	r18, 0x7B	; 123
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	9f ef       	ldi	r25, 0xFF	; 255
  a0:	80 81       	ld	r24, Z
  a2:	81 11       	cpse	r24, r1
  a4:	10 c0       	rjmp	.+32     	; 0xc6 <Dio_init+0x34>
  a6:	c3 81       	ldd	r28, Z+3	; 0x03
  a8:	d4 81       	ldd	r29, Z+4	; 0x04
  aa:	18 82       	st	Y, r1
  ac:	81 81       	ldd	r24, Z+1	; 0x01
  ae:	81 11       	cpse	r24, r1
  b0:	04 c0       	rjmp	.+8      	; 0xba <Dio_init+0x28>
  b2:	a5 81       	ldd	r26, Z+5	; 0x05
  b4:	b6 81       	ldd	r27, Z+6	; 0x06
  b6:	9c 93       	st	X, r25
  b8:	0f c0       	rjmp	.+30     	; 0xd8 <Dio_init+0x46>
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	99 f4       	brne	.+38     	; 0xe4 <Dio_init+0x52>
  be:	a5 81       	ldd	r26, Z+5	; 0x05
  c0:	b6 81       	ldd	r27, Z+6	; 0x06
  c2:	1c 92       	st	X, r1
  c4:	09 c0       	rjmp	.+18     	; 0xd8 <Dio_init+0x46>
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	79 f4       	brne	.+30     	; 0xe8 <Dio_init+0x56>
  ca:	c3 81       	ldd	r28, Z+3	; 0x03
  cc:	d4 81       	ldd	r29, Z+4	; 0x04
  ce:	98 83       	st	Y, r25
  d0:	c5 81       	ldd	r28, Z+5	; 0x05
  d2:	d6 81       	ldd	r29, Z+6	; 0x06
  d4:	82 81       	ldd	r24, Z+2	; 0x02
  d6:	88 83       	st	Y, r24
  d8:	39 96       	adiw	r30, 0x09	; 9
  da:	e2 17       	cp	r30, r18
  dc:	f3 07       	cpc	r31, r19
  de:	01 f7       	brne	.-64     	; 0xa0 <Dio_init+0xe>
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	03 c0       	rjmp	.+6      	; 0xea <Dio_init+0x58>
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	01 c0       	rjmp	.+2      	; 0xea <Dio_init+0x58>
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <Dio_Write_pin>:
  f0:	88 30       	cpi	r24, 0x08	; 8
  f2:	08 f0       	brcs	.+2      	; 0xf6 <Dio_Write_pin+0x6>
  f4:	86 c0       	rjmp	.+268    	; 0x202 <Dio_Write_pin+0x112>
  f6:	61 30       	cpi	r22, 0x01	; 1
  f8:	39 f1       	breq	.+78     	; 0x148 <Dio_Write_pin+0x58>
  fa:	38 f0       	brcs	.+14     	; 0x10a <Dio_Write_pin+0x1a>
  fc:	62 30       	cpi	r22, 0x02	; 2
  fe:	09 f4       	brne	.+2      	; 0x102 <Dio_Write_pin+0x12>
 100:	42 c0       	rjmp	.+132    	; 0x186 <Dio_Write_pin+0x96>
 102:	63 30       	cpi	r22, 0x03	; 3
 104:	09 f4       	brne	.+2      	; 0x108 <Dio_Write_pin+0x18>
 106:	5e c0       	rjmp	.+188    	; 0x1c4 <Dio_Write_pin+0xd4>
 108:	7e c0       	rjmp	.+252    	; 0x206 <Dio_Write_pin+0x116>
 10a:	44 23       	and	r20, r20
 10c:	71 f0       	breq	.+28     	; 0x12a <Dio_Write_pin+0x3a>
 10e:	4b b3       	in	r20, 0x1b	; 27
 110:	21 e0       	ldi	r18, 0x01	; 1
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	b9 01       	movw	r22, r18
 116:	02 c0       	rjmp	.+4      	; 0x11c <Dio_Write_pin+0x2c>
 118:	66 0f       	add	r22, r22
 11a:	77 1f       	adc	r23, r23
 11c:	8a 95       	dec	r24
 11e:	e2 f7       	brpl	.-8      	; 0x118 <Dio_Write_pin+0x28>
 120:	cb 01       	movw	r24, r22
 122:	84 2b       	or	r24, r20
 124:	8b bb       	out	0x1b, r24	; 27
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	08 95       	ret
 12a:	4b b3       	in	r20, 0x1b	; 27
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	b9 01       	movw	r22, r18
 132:	02 c0       	rjmp	.+4      	; 0x138 <Dio_Write_pin+0x48>
 134:	66 0f       	add	r22, r22
 136:	77 1f       	adc	r23, r23
 138:	8a 95       	dec	r24
 13a:	e2 f7       	brpl	.-8      	; 0x134 <Dio_Write_pin+0x44>
 13c:	cb 01       	movw	r24, r22
 13e:	80 95       	com	r24
 140:	84 23       	and	r24, r20
 142:	8b bb       	out	0x1b, r24	; 27
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	08 95       	ret
 148:	44 23       	and	r20, r20
 14a:	71 f0       	breq	.+28     	; 0x168 <Dio_Write_pin+0x78>
 14c:	48 b3       	in	r20, 0x18	; 24
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	b9 01       	movw	r22, r18
 154:	02 c0       	rjmp	.+4      	; 0x15a <Dio_Write_pin+0x6a>
 156:	66 0f       	add	r22, r22
 158:	77 1f       	adc	r23, r23
 15a:	8a 95       	dec	r24
 15c:	e2 f7       	brpl	.-8      	; 0x156 <Dio_Write_pin+0x66>
 15e:	cb 01       	movw	r24, r22
 160:	84 2b       	or	r24, r20
 162:	88 bb       	out	0x18, r24	; 24
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	08 95       	ret
 168:	48 b3       	in	r20, 0x18	; 24
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	b9 01       	movw	r22, r18
 170:	02 c0       	rjmp	.+4      	; 0x176 <Dio_Write_pin+0x86>
 172:	66 0f       	add	r22, r22
 174:	77 1f       	adc	r23, r23
 176:	8a 95       	dec	r24
 178:	e2 f7       	brpl	.-8      	; 0x172 <Dio_Write_pin+0x82>
 17a:	cb 01       	movw	r24, r22
 17c:	80 95       	com	r24
 17e:	84 23       	and	r24, r20
 180:	88 bb       	out	0x18, r24	; 24
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	08 95       	ret
 186:	44 23       	and	r20, r20
 188:	71 f0       	breq	.+28     	; 0x1a6 <Dio_Write_pin+0xb6>
 18a:	45 b3       	in	r20, 0x15	; 21
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	b9 01       	movw	r22, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <Dio_Write_pin+0xa8>
 194:	66 0f       	add	r22, r22
 196:	77 1f       	adc	r23, r23
 198:	8a 95       	dec	r24
 19a:	e2 f7       	brpl	.-8      	; 0x194 <Dio_Write_pin+0xa4>
 19c:	cb 01       	movw	r24, r22
 19e:	84 2b       	or	r24, r20
 1a0:	85 bb       	out	0x15, r24	; 21
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	08 95       	ret
 1a6:	45 b3       	in	r20, 0x15	; 21
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	b9 01       	movw	r22, r18
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <Dio_Write_pin+0xc4>
 1b0:	66 0f       	add	r22, r22
 1b2:	77 1f       	adc	r23, r23
 1b4:	8a 95       	dec	r24
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <Dio_Write_pin+0xc0>
 1b8:	cb 01       	movw	r24, r22
 1ba:	80 95       	com	r24
 1bc:	84 23       	and	r24, r20
 1be:	85 bb       	out	0x15, r24	; 21
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	08 95       	ret
 1c4:	44 23       	and	r20, r20
 1c6:	71 f0       	breq	.+28     	; 0x1e4 <Dio_Write_pin+0xf4>
 1c8:	42 b3       	in	r20, 0x12	; 18
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	b9 01       	movw	r22, r18
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <Dio_Write_pin+0xe6>
 1d2:	66 0f       	add	r22, r22
 1d4:	77 1f       	adc	r23, r23
 1d6:	8a 95       	dec	r24
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <Dio_Write_pin+0xe2>
 1da:	cb 01       	movw	r24, r22
 1dc:	84 2b       	or	r24, r20
 1de:	82 bb       	out	0x12, r24	; 18
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	08 95       	ret
 1e4:	42 b3       	in	r20, 0x12	; 18
 1e6:	21 e0       	ldi	r18, 0x01	; 1
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	b9 01       	movw	r22, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <Dio_Write_pin+0x102>
 1ee:	66 0f       	add	r22, r22
 1f0:	77 1f       	adc	r23, r23
 1f2:	8a 95       	dec	r24
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <Dio_Write_pin+0xfe>
 1f6:	cb 01       	movw	r24, r22
 1f8:	80 95       	com	r24
 1fa:	84 23       	and	r24, r20
 1fc:	82 bb       	out	0x12, r24	; 18
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	08 95       	ret
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	08 95       	ret
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	08 95       	ret

0000020a <Dio_Write_numOfBits>:
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	e1 f0       	breq	.+56     	; 0x246 <Dio_Write_numOfBits+0x3c>
 20e:	30 f0       	brcs	.+12     	; 0x21c <Dio_Write_numOfBits+0x12>
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	71 f1       	breq	.+92     	; 0x270 <Dio_Write_numOfBits+0x66>
 214:	83 30       	cpi	r24, 0x03	; 3
 216:	09 f4       	brne	.+2      	; 0x21a <Dio_Write_numOfBits+0x10>
 218:	40 c0       	rjmp	.+128    	; 0x29a <Dio_Write_numOfBits+0x90>
 21a:	54 c0       	rjmp	.+168    	; 0x2c4 <Dio_Write_numOfBits+0xba>
 21c:	61 30       	cpi	r22, 0x01	; 1
 21e:	29 f4       	brne	.+10     	; 0x22a <Dio_Write_numOfBits+0x20>
 220:	6b b3       	in	r22, 0x1b	; 27
 222:	46 2b       	or	r20, r22
 224:	4b bb       	out	0x1b, r20	; 27
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	08 95       	ret
 22a:	61 11       	cpse	r22, r1
 22c:	06 c0       	rjmp	.+12     	; 0x23a <Dio_Write_numOfBits+0x30>
 22e:	8b b3       	in	r24, 0x1b	; 27
 230:	40 95       	com	r20
 232:	48 23       	and	r20, r24
 234:	4b bb       	out	0x1b, r20	; 27
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	08 95       	ret
 23a:	8b b3       	in	r24, 0x1b	; 27
 23c:	46 23       	and	r20, r22
 23e:	48 2b       	or	r20, r24
 240:	4b bb       	out	0x1b, r20	; 27
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	08 95       	ret
 246:	61 30       	cpi	r22, 0x01	; 1
 248:	29 f4       	brne	.+10     	; 0x254 <Dio_Write_numOfBits+0x4a>
 24a:	68 b3       	in	r22, 0x18	; 24
 24c:	46 2b       	or	r20, r22
 24e:	48 bb       	out	0x18, r20	; 24
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	08 95       	ret
 254:	61 11       	cpse	r22, r1
 256:	06 c0       	rjmp	.+12     	; 0x264 <Dio_Write_numOfBits+0x5a>
 258:	88 b3       	in	r24, 0x18	; 24
 25a:	40 95       	com	r20
 25c:	48 23       	and	r20, r24
 25e:	48 bb       	out	0x18, r20	; 24
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	08 95       	ret
 264:	88 b3       	in	r24, 0x18	; 24
 266:	46 23       	and	r20, r22
 268:	48 2b       	or	r20, r24
 26a:	48 bb       	out	0x18, r20	; 24
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	08 95       	ret
 270:	61 30       	cpi	r22, 0x01	; 1
 272:	29 f4       	brne	.+10     	; 0x27e <Dio_Write_numOfBits+0x74>
 274:	65 b3       	in	r22, 0x15	; 21
 276:	46 2b       	or	r20, r22
 278:	45 bb       	out	0x15, r20	; 21
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	08 95       	ret
 27e:	61 11       	cpse	r22, r1
 280:	06 c0       	rjmp	.+12     	; 0x28e <Dio_Write_numOfBits+0x84>
 282:	85 b3       	in	r24, 0x15	; 21
 284:	40 95       	com	r20
 286:	48 23       	and	r20, r24
 288:	45 bb       	out	0x15, r20	; 21
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	08 95       	ret
 28e:	85 b3       	in	r24, 0x15	; 21
 290:	46 23       	and	r20, r22
 292:	48 2b       	or	r20, r24
 294:	45 bb       	out	0x15, r20	; 21
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	08 95       	ret
 29a:	61 30       	cpi	r22, 0x01	; 1
 29c:	29 f4       	brne	.+10     	; 0x2a8 <Dio_Write_numOfBits+0x9e>
 29e:	62 b3       	in	r22, 0x12	; 18
 2a0:	46 2b       	or	r20, r22
 2a2:	42 bb       	out	0x12, r20	; 18
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	08 95       	ret
 2a8:	61 11       	cpse	r22, r1
 2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <Dio_Write_numOfBits+0xae>
 2ac:	82 b3       	in	r24, 0x12	; 18
 2ae:	40 95       	com	r20
 2b0:	48 23       	and	r20, r24
 2b2:	42 bb       	out	0x12, r20	; 18
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	08 95       	ret
 2b8:	82 b3       	in	r24, 0x12	; 18
 2ba:	46 23       	and	r20, r22
 2bc:	48 2b       	or	r20, r24
 2be:	42 bb       	out	0x12, r20	; 18
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	08 95       	ret
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	08 95       	ret

000002c8 <I2C_init>:
	return SUCCESS;
}

void I2C_SendData(uint8 data)
{
	TWDR = data;
 2c8:	cf 92       	push	r12
 2ca:	df 92       	push	r13
 2cc:	ef 92       	push	r14
 2ce:	ff 92       	push	r15
 2d0:	eb e7       	ldi	r30, 0x7B	; 123
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 85       	ldd	r24, Z+8	; 0x08
 2d6:	88 0f       	add	r24, r24
 2d8:	82 b9       	out	0x02, r24	; 2
 2da:	84 81       	ldd	r24, Z+4	; 0x04
 2dc:	95 81       	ldd	r25, Z+5	; 0x05
 2de:	a6 81       	ldd	r26, Z+6	; 0x06
 2e0:	b7 81       	ldd	r27, Z+7	; 0x07
 2e2:	9c 01       	movw	r18, r24
 2e4:	ad 01       	movw	r20, r26
 2e6:	22 0f       	add	r18, r18
 2e8:	33 1f       	adc	r19, r19
 2ea:	44 1f       	adc	r20, r20
 2ec:	55 1f       	adc	r21, r21
 2ee:	69 01       	movw	r12, r18
 2f0:	7a 01       	movw	r14, r20
 2f2:	cc 0c       	add	r12, r12
 2f4:	dd 1c       	adc	r13, r13
 2f6:	ee 1c       	adc	r14, r14
 2f8:	ff 1c       	adc	r15, r15
 2fa:	cc 0c       	add	r12, r12
 2fc:	dd 1c       	adc	r13, r13
 2fe:	ee 1c       	adc	r14, r14
 300:	ff 1c       	adc	r15, r15
 302:	cc 0c       	add	r12, r12
 304:	dd 1c       	adc	r13, r13
 306:	ee 1c       	adc	r14, r14
 308:	ff 1c       	adc	r15, r15
 30a:	80 81       	ld	r24, Z
 30c:	91 81       	ldd	r25, Z+1	; 0x01
 30e:	a2 81       	ldd	r26, Z+2	; 0x02
 310:	b3 81       	ldd	r27, Z+3	; 0x03
 312:	bc 01       	movw	r22, r24
 314:	cd 01       	movw	r24, r26
 316:	6c 19       	sub	r22, r12
 318:	7d 09       	sbc	r23, r13
 31a:	8e 09       	sbc	r24, r14
 31c:	9f 09       	sbc	r25, r15
 31e:	0e 94 3a 03 	call	0x674	; 0x674 <__udivmodsi4>
 322:	20 b9       	out	0x00, r18	; 0
 324:	86 b7       	in	r24, 0x36	; 54
 326:	84 60       	ori	r24, 0x04	; 4
 328:	86 bf       	out	0x36, r24	; 54
 32a:	86 b7       	in	r24, 0x36	; 54
 32c:	80 64       	ori	r24, 0x40	; 64
 32e:	86 bf       	out	0x36, r24	; 54
 330:	86 b7       	in	r24, 0x36	; 54
 332:	8f 7d       	andi	r24, 0xDF	; 223
 334:	86 bf       	out	0x36, r24	; 54
 336:	86 b7       	in	r24, 0x36	; 54
 338:	8f 7e       	andi	r24, 0xEF	; 239
 33a:	86 bf       	out	0x36, r24	; 54
 33c:	86 b7       	in	r24, 0x36	; 54
 33e:	80 68       	ori	r24, 0x80	; 128
 340:	86 bf       	out	0x36, r24	; 54
 342:	86 b7       	in	r24, 0x36	; 54
 344:	81 60       	ori	r24, 0x01	; 1
 346:	86 bf       	out	0x36, r24	; 54
 348:	8f b7       	in	r24, 0x3f	; 63
 34a:	80 68       	ori	r24, 0x80	; 128
 34c:	8f bf       	out	0x3f, r24	; 63
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	ff 90       	pop	r15
 352:	ef 90       	pop	r14
 354:	df 90       	pop	r13
 356:	cf 90       	pop	r12
 358:	08 95       	ret

0000035a <I2C_MasterTransmit>:
 35a:	e7 ea       	ldi	r30, 0xA7	; 167
 35c:	f1 e6       	ldi	r31, 0x61	; 97
 35e:	31 97       	sbiw	r30, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <I2C_MasterTransmit+0x4>
 362:	00 c0       	rjmp	.+0      	; 0x364 <I2C_MasterTransmit+0xa>
 364:	00 00       	nop
 366:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <Transmit_data_size>
 36a:	99 23       	and	r25, r25
 36c:	09 f4       	brne	.+2      	; 0x370 <I2C_MasterTransmit+0x16>
 36e:	4d c0       	rjmp	.+154    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 370:	96 b7       	in	r25, 0x36	; 54
 372:	9e 7f       	andi	r25, 0xFE	; 254
 374:	96 bf       	out	0x36, r25	; 54
 376:	96 b7       	in	r25, 0x36	; 54
 378:	94 60       	ori	r25, 0x04	; 4
 37a:	96 bf       	out	0x36, r25	; 54
 37c:	96 b7       	in	r25, 0x36	; 54
 37e:	90 62       	ori	r25, 0x20	; 32
 380:	96 bf       	out	0x36, r25	; 54
 382:	96 b7       	in	r25, 0x36	; 54
 384:	90 68       	ori	r25, 0x80	; 128
 386:	96 bf       	out	0x36, r25	; 54
 388:	06 b6       	in	r0, 0x36	; 54
 38a:	07 fe       	sbrs	r0, 7
 38c:	fd cf       	rjmp	.-6      	; 0x388 <I2C_MasterTransmit+0x2e>
 38e:	91 b1       	in	r25, 0x01	; 1
 390:	98 7f       	andi	r25, 0xF8	; 248
 392:	98 30       	cpi	r25, 0x08	; 8
 394:	e1 f5       	brne	.+120    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 396:	88 0f       	add	r24, r24
 398:	83 b9       	out	0x03, r24	; 3
 39a:	86 b7       	in	r24, 0x36	; 54
 39c:	8f 7d       	andi	r24, 0xDF	; 223
 39e:	86 bf       	out	0x36, r24	; 54
 3a0:	86 b7       	in	r24, 0x36	; 54
 3a2:	80 68       	ori	r24, 0x80	; 128
 3a4:	86 bf       	out	0x36, r24	; 54
 3a6:	06 b6       	in	r0, 0x36	; 54
 3a8:	07 fe       	sbrs	r0, 7
 3aa:	fd cf       	rjmp	.-6      	; 0x3a6 <I2C_MasterTransmit+0x4c>
 3ac:	81 b1       	in	r24, 0x01	; 1
 3ae:	88 7f       	andi	r24, 0xF8	; 248
 3b0:	88 31       	cpi	r24, 0x18	; 24
 3b2:	79 f5       	brne	.+94     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3b4:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <transmit_data>
 3b8:	83 b9       	out	0x03, r24	; 3
 3ba:	86 b7       	in	r24, 0x36	; 54
 3bc:	80 68       	ori	r24, 0x80	; 128
 3be:	86 bf       	out	0x36, r24	; 54
 3c0:	06 b6       	in	r0, 0x36	; 54
 3c2:	07 fe       	sbrs	r0, 7
 3c4:	fd cf       	rjmp	.-6      	; 0x3c0 <I2C_MasterTransmit+0x66>
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	0d c0       	rjmp	.+26     	; 0x3e4 <I2C_MasterTransmit+0x8a>
 3ca:	e9 2f       	mov	r30, r25
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	eb 57       	subi	r30, 0x7B	; 123
 3d0:	ff 4f       	sbci	r31, 0xFF	; 255
 3d2:	80 81       	ld	r24, Z
 3d4:	83 b9       	out	0x03, r24	; 3
 3d6:	9f 5f       	subi	r25, 0xFF	; 255
 3d8:	86 b7       	in	r24, 0x36	; 54
 3da:	80 68       	ori	r24, 0x80	; 128
 3dc:	86 bf       	out	0x36, r24	; 54
 3de:	06 b6       	in	r0, 0x36	; 54
 3e0:	07 fe       	sbrs	r0, 7
 3e2:	fd cf       	rjmp	.-6      	; 0x3de <I2C_MasterTransmit+0x84>
 3e4:	81 b1       	in	r24, 0x01	; 1
 3e6:	88 7f       	andi	r24, 0xF8	; 248
 3e8:	88 32       	cpi	r24, 0x28	; 40
 3ea:	21 f4       	brne	.+8      	; 0x3f4 <I2C_MasterTransmit+0x9a>
 3ec:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <Transmit_data_size>
 3f0:	98 17       	cp	r25, r24
 3f2:	58 f3       	brcs	.-42     	; 0x3ca <I2C_MasterTransmit+0x70>
 3f4:	86 b7       	in	r24, 0x36	; 54
 3f6:	80 61       	ori	r24, 0x10	; 16
 3f8:	86 bf       	out	0x36, r24	; 54
 3fa:	86 b7       	in	r24, 0x36	; 54
 3fc:	80 68       	ori	r24, 0x80	; 128
 3fe:	86 bf       	out	0x36, r24	; 54
 400:	86 b7       	in	r24, 0x36	; 54
 402:	81 60       	ori	r24, 0x01	; 1
 404:	86 bf       	out	0x36, r24	; 54
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	08 95       	ret
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	08 95       	ret
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	08 95       	ret
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	08 95       	ret

00000416 <__vector_19>:
}

ISR(TWI_vect) {
 416:	1f 92       	push	r1
 418:	0f 92       	push	r0
 41a:	0f b6       	in	r0, 0x3f	; 63
 41c:	0f 92       	push	r0
 41e:	11 24       	eor	r1, r1
 420:	8f 93       	push	r24
 422:	ef 93       	push	r30
 424:	ff 93       	push	r31
	// disable interrupt for I2C
	CLR_BIT(TWCR, 0);
 426:	86 b7       	in	r24, 0x36	; 54
 428:	8e 7f       	andi	r24, 0xFE	; 254
 42a:	86 bf       	out	0x36, r24	; 54
	switch (TWSR & 0xF8) {
 42c:	81 b1       	in	r24, 0x01	; 1
 42e:	88 7f       	andi	r24, 0xF8	; 248
 430:	80 36       	cpi	r24, 0x60	; 96
 432:	19 f0       	breq	.+6      	; 0x43a <__vector_19+0x24>
 434:	88 3a       	cpi	r24, 0xA8	; 168
 436:	21 f1       	breq	.+72     	; 0x480 <__vector_19+0x6a>
 438:	4f c0       	rjmp	.+158    	; 0x4d8 <__vector_19+0xc2>
		// receive data
		case 0x60:
			SET_BIT(PORTA, 0);
 43a:	d8 9a       	sbi	0x1b, 0	; 27
			// clear flag
			SET_BIT(TWCR, 7);
 43c:	86 b7       	in	r24, 0x36	; 54
 43e:	80 68       	ori	r24, 0x80	; 128
 440:	86 bf       	out	0x36, r24	; 54
			// wait until the flag is set
			while (GET_BIT(TWCR, 7) == 0);
 442:	06 b6       	in	r0, 0x36	; 54
 444:	07 fe       	sbrs	r0, 7
 446:	fd cf       	rjmp	.-6      	; 0x442 <__vector_19+0x2c>
 448:	13 c0       	rjmp	.+38     	; 0x470 <__vector_19+0x5a>
			// check the status code
			while ((TWSR & 0xF8) == 0x80) {
				received_data[received_data_size] = TWDR + 48;
 44a:	e0 91 eb 00 	lds	r30, 0x00EB	; 0x8000eb <received_data_size>
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	83 b1       	in	r24, 0x03	; 3
 452:	80 5d       	subi	r24, 0xD0	; 208
 454:	e4 51       	subi	r30, 0x14	; 20
 456:	ff 4f       	sbci	r31, 0xFF	; 255
 458:	80 83       	st	Z, r24
				received_data_size++;
 45a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <received_data_size>
 45e:	8f 5f       	subi	r24, 0xFF	; 255
 460:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <received_data_size>
				SET_BIT(TWCR, 7);
 464:	86 b7       	in	r24, 0x36	; 54
 466:	80 68       	ori	r24, 0x80	; 128
 468:	86 bf       	out	0x36, r24	; 54
				// wait until the flag is set
				while (GET_BIT(TWCR, 7) == 0);
 46a:	06 b6       	in	r0, 0x36	; 54
 46c:	07 fe       	sbrs	r0, 7
 46e:	fd cf       	rjmp	.-6      	; 0x46a <__vector_19+0x54>
			// clear flag
			SET_BIT(TWCR, 7);
			// wait until the flag is set
			while (GET_BIT(TWCR, 7) == 0);
			// check the status code
			while ((TWSR & 0xF8) == 0x80) {
 470:	81 b1       	in	r24, 0x01	; 1
 472:	88 7f       	andi	r24, 0xF8	; 248
 474:	80 38       	cpi	r24, 0x80	; 128
 476:	49 f3       	breq	.-46     	; 0x44a <__vector_19+0x34>
				SET_BIT(TWCR, 7);
				// wait until the flag is set
				while (GET_BIT(TWCR, 7) == 0);
			}
			// clear flag
			SET_BIT(TWCR, 7);
 478:	86 b7       	in	r24, 0x36	; 54
 47a:	80 68       	ori	r24, 0x80	; 128
 47c:	86 bf       	out	0x36, r24	; 54
			break;
 47e:	2c c0       	rjmp	.+88     	; 0x4d8 <__vector_19+0xc2>
		// transmit data	
		case 0xA8:
			// send the first byte as 0 
			TWDR = 0;
 480:	13 b8       	out	0x03, r1	; 3
			// clear flag
			SET_BIT(TWCR, 7);
 482:	86 b7       	in	r24, 0x36	; 54
 484:	80 68       	ori	r24, 0x80	; 128
 486:	86 bf       	out	0x36, r24	; 54
			// wait until the flag is set
			while (GET_BIT(TWCR, 7) == 0);
 488:	06 b6       	in	r0, 0x36	; 54
 48a:	07 fe       	sbrs	r0, 7
 48c:	fd cf       	rjmp	.-6      	; 0x488 <__vector_19+0x72>
 48e:	17 c0       	rjmp	.+46     	; 0x4be <__vector_19+0xa8>
			// send the remaining data
			while (((TWSR & 0xF8) == 0xB8) && Transmit_data_size > 0) {
				TWDR = transmit_data[index2];
 490:	e0 91 ea 00 	lds	r30, 0x00EA	; 0x8000ea <__data_end>
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	eb 57       	subi	r30, 0x7B	; 123
 498:	ff 4f       	sbci	r31, 0xFF	; 255
 49a:	80 81       	ld	r24, Z
 49c:	83 b9       	out	0x03, r24	; 3
				Transmit_data_size--;
 49e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <Transmit_data_size>
 4a2:	81 50       	subi	r24, 0x01	; 1
 4a4:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <Transmit_data_size>
				index2++;
 4a8:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <__data_end>
 4ac:	8f 5f       	subi	r24, 0xFF	; 255
 4ae:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__data_end>
				// clear flag
				SET_BIT(TWCR, 7);
 4b2:	86 b7       	in	r24, 0x36	; 54
 4b4:	80 68       	ori	r24, 0x80	; 128
 4b6:	86 bf       	out	0x36, r24	; 54
				// wait until the flag is set
				while (GET_BIT(TWCR, 7) == 0);				
 4b8:	06 b6       	in	r0, 0x36	; 54
 4ba:	07 fe       	sbrs	r0, 7
 4bc:	fd cf       	rjmp	.-6      	; 0x4b8 <__vector_19+0xa2>
			// clear flag
			SET_BIT(TWCR, 7);
			// wait until the flag is set
			while (GET_BIT(TWCR, 7) == 0);
			// send the remaining data
			while (((TWSR & 0xF8) == 0xB8) && Transmit_data_size > 0) {
 4be:	81 b1       	in	r24, 0x01	; 1
 4c0:	88 7f       	andi	r24, 0xF8	; 248
 4c2:	88 3b       	cpi	r24, 0xB8	; 184
 4c4:	21 f4       	brne	.+8      	; 0x4ce <__vector_19+0xb8>
 4c6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <Transmit_data_size>
 4ca:	81 11       	cpse	r24, r1
 4cc:	e1 cf       	rjmp	.-62     	; 0x490 <__vector_19+0x7a>
				// clear flag
				SET_BIT(TWCR, 7);
				// wait until the flag is set
				while (GET_BIT(TWCR, 7) == 0);				
			}	
			index2 = 0;			
 4ce:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__data_end>
			// clear flag
			SET_BIT(TWCR, 7);			
 4d2:	86 b7       	in	r24, 0x36	; 54
 4d4:	80 68       	ori	r24, 0x80	; 128
 4d6:	86 bf       	out	0x36, r24	; 54
			break;	
		default:
			break;		
	}
	// enable interrupt
	SET_BIT(TWCR, 0);
 4d8:	86 b7       	in	r24, 0x36	; 54
 4da:	81 60       	ori	r24, 0x01	; 1
 4dc:	86 bf       	out	0x36, r24	; 54
}
 4de:	ff 91       	pop	r31
 4e0:	ef 91       	pop	r30
 4e2:	8f 91       	pop	r24
 4e4:	0f 90       	pop	r0
 4e6:	0f be       	out	0x3f, r0	; 63
 4e8:	0f 90       	pop	r0
 4ea:	1f 90       	pop	r1
 4ec:	18 95       	reti

000004ee <EnPulse>:
 4ee:	41 e0       	ldi	r20, 0x01	; 1
 4f0:	61 e0       	ldi	r22, 0x01	; 1
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	0e 94 78 00 	call	0xf0	; 0xf0 <Dio_Write_pin>
 4f8:	98 2f       	mov	r25, r24
 4fa:	81 30       	cpi	r24, 0x01	; 1
 4fc:	51 f0       	breq	.+20     	; 0x512 <EnPulse+0x24>
 4fe:	00 00       	nop
 500:	40 e0       	ldi	r20, 0x00	; 0
 502:	61 e0       	ldi	r22, 0x01	; 1
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	0e 94 78 00 	call	0xf0	; 0xf0 <Dio_Write_pin>
 50a:	91 e0       	ldi	r25, 0x01	; 1
 50c:	81 30       	cpi	r24, 0x01	; 1
 50e:	09 f0       	breq	.+2      	; 0x512 <EnPulse+0x24>
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	89 2f       	mov	r24, r25
 514:	08 95       	ret

00000516 <Lcd_Write_4>:
 516:	cf 93       	push	r28
 518:	c8 2f       	mov	r28, r24
 51a:	40 ef       	ldi	r20, 0xF0	; 240
 51c:	60 e0       	ldi	r22, 0x00	; 0
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	0e 94 05 01 	call	0x20a	; 0x20a <Dio_Write_numOfBits>
 524:	81 30       	cpi	r24, 0x01	; 1
 526:	41 f1       	breq	.+80     	; 0x578 <Lcd_Write_4+0x62>
 528:	40 ef       	ldi	r20, 0xF0	; 240
 52a:	6c 2f       	mov	r22, r28
 52c:	60 7f       	andi	r22, 0xF0	; 240
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	0e 94 05 01 	call	0x20a	; 0x20a <Dio_Write_numOfBits>
 534:	81 30       	cpi	r24, 0x01	; 1
 536:	01 f1       	breq	.+64     	; 0x578 <Lcd_Write_4+0x62>
 538:	0e 94 77 02 	call	0x4ee	; 0x4ee <EnPulse>
 53c:	81 30       	cpi	r24, 0x01	; 1
 53e:	e1 f0       	breq	.+56     	; 0x578 <Lcd_Write_4+0x62>
 540:	40 ef       	ldi	r20, 0xF0	; 240
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	0e 94 05 01 	call	0x20a	; 0x20a <Dio_Write_numOfBits>
 54a:	81 30       	cpi	r24, 0x01	; 1
 54c:	a9 f0       	breq	.+42     	; 0x578 <Lcd_Write_4+0x62>
 54e:	80 e1       	ldi	r24, 0x10	; 16
 550:	c8 9f       	mul	r28, r24
 552:	b0 01       	movw	r22, r0
 554:	11 24       	eor	r1, r1
 556:	40 ef       	ldi	r20, 0xF0	; 240
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	0e 94 05 01 	call	0x20a	; 0x20a <Dio_Write_numOfBits>
 55e:	81 30       	cpi	r24, 0x01	; 1
 560:	59 f0       	breq	.+22     	; 0x578 <Lcd_Write_4+0x62>
 562:	0e 94 77 02 	call	0x4ee	; 0x4ee <EnPulse>
 566:	81 30       	cpi	r24, 0x01	; 1
 568:	39 f0       	breq	.+14     	; 0x578 <Lcd_Write_4+0x62>
 56a:	83 ef       	ldi	r24, 0xF3	; 243
 56c:	91 e0       	ldi	r25, 0x01	; 1
 56e:	01 97       	sbiw	r24, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <Lcd_Write_4+0x58>
 572:	00 c0       	rjmp	.+0      	; 0x574 <Lcd_Write_4+0x5e>
 574:	00 00       	nop
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	cf 91       	pop	r28
 57a:	08 95       	ret

0000057c <Lcd_Cmd>:
 57c:	cf 93       	push	r28
 57e:	c8 2f       	mov	r28, r24
 580:	40 e0       	ldi	r20, 0x00	; 0
 582:	61 e0       	ldi	r22, 0x01	; 1
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	0e 94 78 00 	call	0xf0	; 0xf0 <Dio_Write_pin>
 58a:	98 2f       	mov	r25, r24
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	39 f0       	breq	.+14     	; 0x59e <Lcd_Cmd+0x22>
 590:	8c 2f       	mov	r24, r28
 592:	0e 94 8b 02 	call	0x516	; 0x516 <Lcd_Write_4>
 596:	91 e0       	ldi	r25, 0x01	; 1
 598:	81 30       	cpi	r24, 0x01	; 1
 59a:	09 f0       	breq	.+2      	; 0x59e <Lcd_Cmd+0x22>
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	89 2f       	mov	r24, r25
 5a0:	cf 91       	pop	r28
 5a2:	08 95       	ret

000005a4 <Lcd_Init>:
 5a4:	85 ea       	ldi	r24, 0xA5	; 165
 5a6:	9e e0       	ldi	r25, 0x0E	; 14
 5a8:	01 97       	sbiw	r24, 0x01	; 1
 5aa:	f1 f7       	brne	.-4      	; 0x5a8 <Lcd_Init+0x4>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <Lcd_Init+0xa>
 5ae:	00 00       	nop
 5b0:	80 e3       	ldi	r24, 0x30	; 48
 5b2:	0e 94 be 02 	call	0x57c	; 0x57c <Lcd_Cmd>
 5b6:	98 2f       	mov	r25, r24
 5b8:	81 30       	cpi	r24, 0x01	; 1
 5ba:	21 f1       	breq	.+72     	; 0x604 <Lcd_Init+0x60>
 5bc:	80 e2       	ldi	r24, 0x20	; 32
 5be:	0e 94 be 02 	call	0x57c	; 0x57c <Lcd_Cmd>
 5c2:	98 2f       	mov	r25, r24
 5c4:	81 30       	cpi	r24, 0x01	; 1
 5c6:	f1 f0       	breq	.+60     	; 0x604 <Lcd_Init+0x60>
 5c8:	0e 94 77 02 	call	0x4ee	; 0x4ee <EnPulse>
 5cc:	98 2f       	mov	r25, r24
 5ce:	81 30       	cpi	r24, 0x01	; 1
 5d0:	c9 f0       	breq	.+50     	; 0x604 <Lcd_Init+0x60>
 5d2:	88 e2       	ldi	r24, 0x28	; 40
 5d4:	0e 94 be 02 	call	0x57c	; 0x57c <Lcd_Cmd>
 5d8:	98 2f       	mov	r25, r24
 5da:	81 30       	cpi	r24, 0x01	; 1
 5dc:	99 f0       	breq	.+38     	; 0x604 <Lcd_Init+0x60>
 5de:	8f e0       	ldi	r24, 0x0F	; 15
 5e0:	0e 94 be 02 	call	0x57c	; 0x57c <Lcd_Cmd>
 5e4:	98 2f       	mov	r25, r24
 5e6:	81 30       	cpi	r24, 0x01	; 1
 5e8:	69 f0       	breq	.+26     	; 0x604 <Lcd_Init+0x60>
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	0e 94 be 02 	call	0x57c	; 0x57c <Lcd_Cmd>
 5f0:	98 2f       	mov	r25, r24
 5f2:	81 30       	cpi	r24, 0x01	; 1
 5f4:	39 f0       	breq	.+14     	; 0x604 <Lcd_Init+0x60>
 5f6:	86 e0       	ldi	r24, 0x06	; 6
 5f8:	0e 94 be 02 	call	0x57c	; 0x57c <Lcd_Cmd>
 5fc:	91 e0       	ldi	r25, 0x01	; 1
 5fe:	81 30       	cpi	r24, 0x01	; 1
 600:	09 f0       	breq	.+2      	; 0x604 <Lcd_Init+0x60>
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	89 2f       	mov	r24, r25
 606:	08 95       	ret

00000608 <Lcd_Out>:
 608:	0f 93       	push	r16
 60a:	1f 93       	push	r17
 60c:	cf 93       	push	r28
 60e:	fc 01       	movw	r30, r24
 610:	c0 81       	ld	r28, Z
 612:	cc 23       	and	r28, r28
 614:	b1 f0       	breq	.+44     	; 0x642 <Lcd_Out+0x3a>
 616:	8c 01       	movw	r16, r24
 618:	0f 5f       	subi	r16, 0xFF	; 255
 61a:	1f 4f       	sbci	r17, 0xFF	; 255
 61c:	41 e0       	ldi	r20, 0x01	; 1
 61e:	61 e0       	ldi	r22, 0x01	; 1
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	0e 94 78 00 	call	0xf0	; 0xf0 <Dio_Write_pin>
 626:	81 30       	cpi	r24, 0x01	; 1
 628:	69 f0       	breq	.+26     	; 0x644 <Lcd_Out+0x3c>
 62a:	8c 2f       	mov	r24, r28
 62c:	0e 94 8b 02 	call	0x516	; 0x516 <Lcd_Write_4>
 630:	81 30       	cpi	r24, 0x01	; 1
 632:	41 f0       	breq	.+16     	; 0x644 <Lcd_Out+0x3c>
 634:	f8 01       	movw	r30, r16
 636:	c1 91       	ld	r28, Z+
 638:	8f 01       	movw	r16, r30
 63a:	c1 11       	cpse	r28, r1
 63c:	ef cf       	rjmp	.-34     	; 0x61c <Lcd_Out+0x14>
 63e:	8c 2f       	mov	r24, r28
 640:	01 c0       	rjmp	.+2      	; 0x644 <Lcd_Out+0x3c>
 642:	8c 2f       	mov	r24, r28
 644:	cf 91       	pop	r28
 646:	1f 91       	pop	r17
 648:	0f 91       	pop	r16
 64a:	08 95       	ret

0000064c <main>:
volatile uint8 Transmit_data_size = 9;


int main(void)
{	
	Dio_init();
 64c:	0e 94 49 00 	call	0x92	; 0x92 <Dio_init>
	Lcd_Init();
 650:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <Lcd_Init>
	I2C_init();
 654:	0e 94 64 01 	call	0x2c8	; 0x2c8 <I2C_init>
	
	I2C_MasterTransmit(0b0011001);
 658:	89 e1       	ldi	r24, 0x19	; 25
 65a:	0e 94 ad 01 	call	0x35a	; 0x35a <I2C_MasterTransmit>
		  
    while (1) {
		if (received_data_size > 0) {
 65e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <received_data_size>
 662:	88 23       	and	r24, r24
 664:	e1 f3       	breq	.-8      	; 0x65e <main+0x12>
			Lcd_Out(received_data);
 666:	8c ee       	ldi	r24, 0xEC	; 236
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	0e 94 04 03 	call	0x608	; 0x608 <Lcd_Out>
			received_data_size = 0;
 66e:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <received_data_size>
 672:	f5 cf       	rjmp	.-22     	; 0x65e <main+0x12>

00000674 <__udivmodsi4>:
 674:	a1 e2       	ldi	r26, 0x21	; 33
 676:	1a 2e       	mov	r1, r26
 678:	aa 1b       	sub	r26, r26
 67a:	bb 1b       	sub	r27, r27
 67c:	fd 01       	movw	r30, r26
 67e:	0d c0       	rjmp	.+26     	; 0x69a <__udivmodsi4_ep>

00000680 <__udivmodsi4_loop>:
 680:	aa 1f       	adc	r26, r26
 682:	bb 1f       	adc	r27, r27
 684:	ee 1f       	adc	r30, r30
 686:	ff 1f       	adc	r31, r31
 688:	a2 17       	cp	r26, r18
 68a:	b3 07       	cpc	r27, r19
 68c:	e4 07       	cpc	r30, r20
 68e:	f5 07       	cpc	r31, r21
 690:	20 f0       	brcs	.+8      	; 0x69a <__udivmodsi4_ep>
 692:	a2 1b       	sub	r26, r18
 694:	b3 0b       	sbc	r27, r19
 696:	e4 0b       	sbc	r30, r20
 698:	f5 0b       	sbc	r31, r21

0000069a <__udivmodsi4_ep>:
 69a:	66 1f       	adc	r22, r22
 69c:	77 1f       	adc	r23, r23
 69e:	88 1f       	adc	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	1a 94       	dec	r1
 6a4:	69 f7       	brne	.-38     	; 0x680 <__udivmodsi4_loop>
 6a6:	60 95       	com	r22
 6a8:	70 95       	com	r23
 6aa:	80 95       	com	r24
 6ac:	90 95       	com	r25
 6ae:	9b 01       	movw	r18, r22
 6b0:	ac 01       	movw	r20, r24
 6b2:	bd 01       	movw	r22, r26
 6b4:	cf 01       	movw	r24, r30
 6b6:	08 95       	ret

000006b8 <_exit>:
 6b8:	f8 94       	cli

000006ba <__stop_program>:
 6ba:	ff cf       	rjmp	.-2      	; 0x6ba <__stop_program>
